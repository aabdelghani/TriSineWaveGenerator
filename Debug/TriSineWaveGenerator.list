
TriSineWaveGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c38  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08004dd0  08004dd0  00014dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004fd8  08004fd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fd8  08004fd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000254  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b500  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ede  00000000  00000000  0002b57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ba0  00000000  00000000  0002d460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008ec  00000000  00000000  0002e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002055b  00000000  00000000  0002e8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e5b4  00000000  00000000  0004ee47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c679a  00000000  00000000  0005d3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000343c  00000000  00000000  00123b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00126fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004db8 	.word	0x08004db8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004db8 	.word	0x08004db8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr
 8000b14:	0000      	movs	r0, r0
	...

08000b18 <get_sineval>:
uint32_t var;

uint32_t sine_val[100];
#define PI 3.1415926
void get_sineval()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 100; i++)
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	e03a      	b.n	8000b9a <get_sineval+0x82>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1) * (4096/2));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fca7 	bl	800047c <__aeabi_i2d>
 8000b2e:	a324      	add	r3, pc, #144	; (adr r3, 8000bc0 <get_sineval+0xa8>)
 8000b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b34:	f7ff fd0c 	bl	8000550 <__aeabi_dmul>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <get_sineval+0x98>)
 8000b46:	f7ff fe2d 	bl	80007a4 <__aeabi_ddiv>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	ec43 2b17 	vmov	d7, r2, r3
 8000b52:	eeb0 0a47 	vmov.f32	s0, s14
 8000b56:	eef0 0a67 	vmov.f32	s1, s15
 8000b5a:	f003 f8ed 	bl	8003d38 <sin>
 8000b5e:	ec51 0b10 	vmov	r0, r1, d0
 8000b62:	f04f 0200 	mov.w	r2, #0
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <get_sineval+0x9c>)
 8000b68:	f7ff fb3c 	bl	80001e4 <__adddf3>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	460b      	mov	r3, r1
 8000b70:	4610      	mov	r0, r2
 8000b72:	4619      	mov	r1, r3
 8000b74:	f04f 0200 	mov.w	r2, #0
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <get_sineval+0xa0>)
 8000b7a:	f7ff fce9 	bl	8000550 <__aeabi_dmul>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	460b      	mov	r3, r1
 8000b82:	4610      	mov	r0, r2
 8000b84:	4619      	mov	r1, r3
 8000b86:	f7ff ffa5 	bl	8000ad4 <__aeabi_d2uiz>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	490b      	ldr	r1, [pc, #44]	; (8000bbc <get_sineval+0xa4>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 100; i++)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3301      	adds	r3, #1
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b63      	cmp	r3, #99	; 0x63
 8000b9e:	ddc1      	ble.n	8000b24 <get_sineval+0xc>
	}
}
 8000ba0:	bf00      	nop
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	f3af 8000 	nop.w
 8000bb0:	40590000 	.word	0x40590000
 8000bb4:	3ff00000 	.word	0x3ff00000
 8000bb8:	40a00000 	.word	0x40a00000
 8000bbc:	200000cc 	.word	0x200000cc
 8000bc0:	4d12d84a 	.word	0x4d12d84a
 8000bc4:	400921fb 	.word	0x400921fb

08000bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bce:	f000 fa55 	bl	800107c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bd2:	f000 f81d 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd6:	f000 f903 	bl	8000de0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000bda:	f000 f8e3 	bl	8000da4 <MX_DMA_Init>
  MX_DAC1_Init();
 8000bde:	f000 f86b 	bl	8000cb8 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000be2:	f000 f893 	bl	8000d0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000be6:	4807      	ldr	r0, [pc, #28]	; (8000c04 <main+0x3c>)
 8000be8:	f002 fd82 	bl	80036f0 <HAL_TIM_Base_Start>
  get_sineval();
 8000bec:	f7ff ff94 	bl	8000b18 <get_sineval>

  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	2364      	movs	r3, #100	; 0x64
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <main+0x40>)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4804      	ldr	r0, [pc, #16]	; (8000c0c <main+0x44>)
 8000bfc:	f000 fbf6 	bl	80013ec <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <main+0x38>
 8000c02:	bf00      	nop
 8000c04:	20000080 	.word	0x20000080
 8000c08:	200000cc 	.word	0x200000cc
 8000c0c:	20000028 	.word	0x20000028

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0a6      	sub	sp, #152	; 0x98
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c1a:	2228      	movs	r2, #40	; 0x28
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 f85c 	bl	8003cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2258      	movs	r2, #88	; 0x58
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 f84e 	bl	8003cdc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c48:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 f897 	bl	8001d8c <HAL_RCC_OscConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c64:	f000 f8e0 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c68:	230f      	movs	r3, #15
 8000c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c80:	2101      	movs	r1, #1
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 f8d6 	bl	8002e34 <HAL_RCC_ClockConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c8e:	f000 f8cb 	bl	8000e28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 8000c92:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c96:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f002 fab0 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000caa:	f000 f8bd 	bl	8000e28 <Error_Handler>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	3798      	adds	r7, #152	; 0x98
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_DAC1_Init+0x4c>)
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <MX_DAC1_Init+0x50>)
 8000ccc:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <MX_DAC1_Init+0x4c>)
 8000cd0:	f000 fb4b 	bl	800136a <HAL_DAC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000cda:	f000 f8a5 	bl	8000e28 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000cde:	2324      	movs	r3, #36	; 0x24
 8000ce0:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_DAC1_Init+0x4c>)
 8000cee:	f000 fc39 	bl	8001564 <HAL_DAC_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000cf8:	f000 f896 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000028 	.word	0x20000028
 8000d08:	40007400 	.word	0x40007400

08000d0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b088      	sub	sp, #32
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000d32:	4b1b      	ldr	r3, [pc, #108]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d38:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5-1;
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d44:	4b16      	ldr	r3, [pc, #88]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d52:	f002 fc75 	bl	8003640 <HAL_TIM_Base_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d5c:	f000 f864 	bl	8000e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d66:	f107 0310 	add.w	r3, r7, #16
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d6e:	f002 fd27 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d78:	f000 f856 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_TIM2_Init+0x94>)
 8000d8a:	f002 ff1b 	bl	8003bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f848 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000080 	.word	0x20000080

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_DMA_Init+0x38>)
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <MX_DMA_Init+0x38>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6153      	str	r3, [r2, #20]
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_DMA_Init+0x38>)
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	200d      	movs	r0, #13
 8000dc8:	f000 fa99 	bl	80012fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000dcc:	200d      	movs	r0, #13
 8000dce:	f000 fab2 	bl	8001336 <HAL_NVIC_EnableIRQ>

}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_GPIO_Init+0x44>)
 8000de8:	695b      	ldr	r3, [r3, #20]
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <MX_GPIO_Init+0x44>)
 8000dec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df0:	6153      	str	r3, [r2, #20]
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_GPIO_Init+0x44>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_GPIO_Init+0x44>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <MX_GPIO_Init+0x44>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_GPIO_Init+0x44>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_MspInit+0x44>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_MspInit+0x44>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x44>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_MspInit+0x44>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <HAL_MspInit+0x44>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_MspInit+0x44>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000

08000e7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a2c      	ldr	r2, [pc, #176]	; (8000f4c <HAL_DAC_MspInit+0xd0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d152      	bne.n	8000f44 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e9e:	4b2c      	ldr	r3, [pc, #176]	; (8000f50 <HAL_DAC_MspInit+0xd4>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	4a2b      	ldr	r2, [pc, #172]	; (8000f50 <HAL_DAC_MspInit+0xd4>)
 8000ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ea8:	61d3      	str	r3, [r2, #28]
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_DAC_MspInit+0xd4>)
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_DAC_MspInit+0xd4>)
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <HAL_DAC_MspInit+0xd4>)
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	6153      	str	r3, [r2, #20]
 8000ec2:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_DAC_MspInit+0xd4>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ece:	2310      	movs	r3, #16
 8000ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f000 fdc8 	bl	8001a78 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000ee8:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000eea:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <HAL_DAC_MspInit+0xdc>)
 8000eec:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eee:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000efa:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f06:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f0e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f12:	2220      	movs	r2, #32
 8000f14:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f1e:	f000 fbf8 	bl	8001712 <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8000f28:	f7ff ff7e 	bl	8000e28 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_DAC_MspInit+0xe0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_DAC_MspInit+0xe0>)
 8000f32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f36:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a06      	ldr	r2, [pc, #24]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <HAL_DAC_MspInit+0xd8>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40007400 	.word	0x40007400
 8000f50:	40021000 	.word	0x40021000
 8000f54:	2000003c 	.word	0x2000003c
 8000f58:	40020030 	.word	0x40020030
 8000f5c:	40010000 	.word	0x40010000

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f70:	d10b      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_TIM_Base_MspInit+0x38>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_TIM_Base_MspInit+0x38>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_TIM_Base_MspInit+0x38>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f88e 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <DMA1_Channel3_IRQHandler+0x10>)
 8000ff6:	f000 fc32 	bl	800185e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000003c 	.word	0x2000003c

08001004 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <SystemInit+0x20>)
 800100a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100e:	4a05      	ldr	r2, [pc, #20]	; (8001024 <SystemInit+0x20>)
 8001010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001028:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001060 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800102c:	f7ff ffea 	bl	8001004 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480c      	ldr	r0, [pc, #48]	; (8001064 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490d      	ldr	r1, [pc, #52]	; (8001068 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0a      	ldr	r4, [pc, #40]	; (8001074 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001056:	f002 fe49 	bl	8003cec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800105a:	f7ff fdb5 	bl	8000bc8 <main>

0800105e <LoopForever>:

LoopForever:
    b LoopForever
 800105e:	e7fe      	b.n	800105e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001060:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001064:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001068:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800106c:	08004fe0 	.word	0x08004fe0
  ldr r2, =_sbss
 8001070:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001074:	20000260 	.word	0x20000260

08001078 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001078:	e7fe      	b.n	8001078 <ADC1_2_IRQHandler>
	...

0800107c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_Init+0x28>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_Init+0x28>)
 8001086:	f043 0310 	orr.w	r3, r3, #16
 800108a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108c:	2003      	movs	r0, #3
 800108e:	f000 f92b 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001092:	200f      	movs	r0, #15
 8001094:	f000 f808 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001098:	f7ff fecc 	bl	8000e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f943 	bl	8001352 <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f90b 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	2000025c 	.word	0x2000025c

08001130 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;  
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000025c 	.word	0x2000025c

08001148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001164:	4013      	ands	r3, r2
 8001166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001170:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	; (800118c <__NVIC_SetPriorityGrouping+0x44>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0a1b      	lsrs	r3, r3, #8
 800119a:	f003 0307 	and.w	r3, r3, #7
}
 800119e:	4618      	mov	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db0b      	blt.n	80011d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	4907      	ldr	r1, [pc, #28]	; (80011e4 <__NVIC_EnableIRQ+0x38>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100

080011e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	6039      	str	r1, [r7, #0]
 80011f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	db0a      	blt.n	8001212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	b2da      	uxtb	r2, r3
 8001200:	490c      	ldr	r1, [pc, #48]	; (8001234 <__NVIC_SetPriority+0x4c>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	0112      	lsls	r2, r2, #4
 8001208:	b2d2      	uxtb	r2, r2
 800120a:	440b      	add	r3, r1
 800120c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001210:	e00a      	b.n	8001228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4908      	ldr	r1, [pc, #32]	; (8001238 <__NVIC_SetPriority+0x50>)
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	3b04      	subs	r3, #4
 8001220:	0112      	lsls	r2, r2, #4
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	440b      	add	r3, r1
 8001226:	761a      	strb	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800123c:	b480      	push	{r7}
 800123e:	b089      	sub	sp, #36	; 0x24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f1c3 0307 	rsb	r3, r3, #7
 8001256:	2b04      	cmp	r3, #4
 8001258:	bf28      	it	cs
 800125a:	2304      	movcs	r3, #4
 800125c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3304      	adds	r3, #4
 8001262:	2b06      	cmp	r3, #6
 8001264:	d902      	bls.n	800126c <NVIC_EncodePriority+0x30>
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3b03      	subs	r3, #3
 800126a:	e000      	b.n	800126e <NVIC_EncodePriority+0x32>
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 32ff 	mov.w	r2, #4294967295
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43da      	mvns	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	401a      	ands	r2, r3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001284:	f04f 31ff 	mov.w	r1, #4294967295
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa01 f303 	lsl.w	r3, r1, r3
 800128e:	43d9      	mvns	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	4313      	orrs	r3, r2
         );
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff8e 	bl	80011e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff29 	bl	8001148 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff3e 	bl	8001190 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff8e 	bl	800123c <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5d 	bl	80011e8 <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff ff31 	bl	80011ac <__NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff ffa2 	bl	80012a4 <SysTick_Config>
 8001360:	4603      	mov	r3, r0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e014      	b.n	80013a6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	791b      	ldrb	r3, [r3, #4]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d105      	bne.n	8001392 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fd75 	bl	8000e7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2201      	movs	r2, #1
 80013a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
 80013f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	795b      	ldrb	r3, [r3, #5]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_DAC_Start_DMA+0x1e>
 8001406:	2302      	movs	r3, #2
 8001408:	e09b      	b.n	8001542 <HAL_DAC_Start_DMA+0x156>
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	2201      	movs	r2, #1
 800140e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2202      	movs	r2, #2
 8001414:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d12f      	bne.n	800147c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	4a4a      	ldr	r2, [pc, #296]	; (800154c <HAL_DAC_Start_DMA+0x160>)
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a49      	ldr	r2, [pc, #292]	; (8001550 <HAL_DAC_Start_DMA+0x164>)
 800142a:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_DAC_Start_DMA+0x168>)
 8001432:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001442:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d013      	beq.n	8001472 <HAL_DAC_Start_DMA+0x86>
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	2b08      	cmp	r3, #8
 800144e:	d845      	bhi.n	80014dc <HAL_DAC_Start_DMA+0xf0>
 8001450:	6a3b      	ldr	r3, [r7, #32]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_DAC_Start_DMA+0x72>
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	2b04      	cmp	r3, #4
 800145a:	d005      	beq.n	8001468 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800145c:	e03e      	b.n	80014dc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	3308      	adds	r3, #8
 8001464:	617b      	str	r3, [r7, #20]
        break;
 8001466:	e03c      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	330c      	adds	r3, #12
 800146e:	617b      	str	r3, [r7, #20]
        break;
 8001470:	e037      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3310      	adds	r3, #16
 8001478:	617b      	str	r3, [r7, #20]
        break;
 800147a:	e032      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4a35      	ldr	r2, [pc, #212]	; (8001558 <HAL_DAC_Start_DMA+0x16c>)
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	4a34      	ldr	r2, [pc, #208]	; (800155c <HAL_DAC_Start_DMA+0x170>)
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <HAL_DAC_Start_DMA+0x174>)
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a2:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d013      	beq.n	80014d2 <HAL_DAC_Start_DMA+0xe6>
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d817      	bhi.n	80014e0 <HAL_DAC_Start_DMA+0xf4>
 80014b0:	6a3b      	ldr	r3, [r7, #32]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_DAC_Start_DMA+0xd2>
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d005      	beq.n	80014c8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80014bc:	e010      	b.n	80014e0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3314      	adds	r3, #20
 80014c4:	617b      	str	r3, [r7, #20]
        break;
 80014c6:	e00c      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3318      	adds	r3, #24
 80014ce:	617b      	str	r3, [r7, #20]
        break;
 80014d0:	e007      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	331c      	adds	r3, #28
 80014d8:	617b      	str	r3, [r7, #20]
        break;
 80014da:	e002      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80014dc:	bf00      	nop
 80014de:	e000      	b.n	80014e2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80014e0:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10f      	bne.n	8001508 <HAL_DAC_Start_DMA+0x11c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6898      	ldr	r0, [r3, #8]
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	f000 f94d 	bl	80017a0 <HAL_DMA_Start_IT>
 8001506:	e00e      	b.n	8001526 <HAL_DAC_Start_DMA+0x13a>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001516:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	68d8      	ldr	r0, [r3, #12]
 800151c:	6879      	ldr	r1, [r7, #4]
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	f000 f93d 	bl	80017a0 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	0800163b 	.word	0x0800163b
 8001550:	0800165d 	.word	0x0800165d
 8001554:	08001679 	.word	0x08001679
 8001558:	080016a7 	.word	0x080016a7
 800155c:	080016c9 	.word	0x080016c9
 8001560:	080016e5 	.word	0x080016e5

08001564 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001564:	b480      	push	{r7}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	2300      	movs	r3, #0
 8001576:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	795b      	ldrb	r3, [r3, #5]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_DAC_ConfigChannel+0x20>
 8001580:	2302      	movs	r3, #2
 8001582:	e036      	b.n	80015f2 <HAL_DAC_ConfigChannel+0x8e>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2201      	movs	r2, #1
 8001588:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2202      	movs	r2, #2
 800158e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001598:	f640 72fe 	movw	r2, #4094	; 0xffe
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	4013      	ands	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6819      	ldr	r1, [r3, #0]
 80015d2:	22c0      	movs	r2, #192	; 0xc0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2201      	movs	r2, #1
 80015e8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b084      	sub	sp, #16
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f7ff feb0 	bl	80013ae <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2201      	movs	r2, #1
 8001652:	711a      	strb	r2, [r3, #4]
}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fea9 	bl	80013c2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001684:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f043 0204 	orr.w	r2, r3, #4
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001692:	68f8      	ldr	r0, [r7, #12]
 8001694:	f7ff fe9f 	bl	80013d6 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	711a      	strb	r2, [r3, #4]
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b084      	sub	sp, #16
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff ffa2 	bl	80015fe <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2201      	movs	r2, #1
 80016be:	711a      	strb	r2, [r3, #4]
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f7ff ff9b 	bl	8001612 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f043 0204 	orr.w	r2, r3, #4
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff ff91 	bl	8001626 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	711a      	strb	r2, [r3, #4]
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e037      	b.n	8001798 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2202      	movs	r2, #2
 800172c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800173e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001742:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800174c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f940 	bl	8001a00 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}  
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_DMA_Start_IT+0x20>
 80017bc:	2302      	movs	r3, #2
 80017be:	e04a      	b.n	8001856 <HAL_DMA_Start_IT+0xb6>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d13a      	bne.n	8001848 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2202      	movs	r2, #2
 80017d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	68b9      	ldr	r1, [r7, #8]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f8d4 	bl	80019a4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f042 020e 	orr.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	e00f      	b.n	8001836 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 020a 	orr.w	r2, r2, #10
 8001824:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0204 	bic.w	r2, r2, #4
 8001834:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e005      	b.n	8001854 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8001850:	2302      	movs	r3, #2
 8001852:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8001854:	7dfb      	ldrb	r3, [r7, #23]
} 
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b084      	sub	sp, #16
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2204      	movs	r2, #4
 800187c:	409a      	lsls	r2, r3
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d024      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x72>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01f      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0204 	bic.w	r2, r2, #4
 80018ac:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b6:	2104      	movs	r1, #4
 80018b8:	fa01 f202 	lsl.w	r2, r1, r2
 80018bc:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d06a      	beq.n	800199c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80018ce:	e065      	b.n	800199c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2202      	movs	r2, #2
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d02c      	beq.n	800193a <HAL_DMA_IRQHandler+0xdc>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d027      	beq.n	800193a <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0320 	and.w	r3, r3, #32
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10b      	bne.n	8001910 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 020a 	bic.w	r2, r2, #10
 8001906:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2102      	movs	r1, #2
 800191a:	fa01 f202 	lsl.w	r2, r1, r2
 800191e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	2b00      	cmp	r3, #0
 800192e:	d035      	beq.n	800199c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001938:	e030      	b.n	800199c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2208      	movs	r2, #8
 8001940:	409a      	lsls	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d028      	beq.n	800199c <HAL_DMA_IRQHandler+0x13e>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d023      	beq.n	800199c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020e 	bic.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196c:	2101      	movs	r1, #1
 800196e:	fa01 f202 	lsl.w	r2, r1, r2
 8001972:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
    }
  }
}  
 800199a:	e7ff      	b.n	800199c <HAL_DMA_IRQHandler+0x13e>
 800199c:	bf00      	nop
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ba:	2101      	movs	r1, #1
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b10      	cmp	r3, #16
 80019d0:	d108      	bne.n	80019e4 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019e2:	e007      	b.n	80019f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <DMA_CalcBaseAndBitshift+0x60>)
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d80f      	bhi.n	8001a34 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <DMA_CalcBaseAndBitshift+0x64>)
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <DMA_CalcBaseAndBitshift+0x68>)
 8001a20:	fba2 2303 	umull	r2, r3, r2, r3
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	009a      	lsls	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <DMA_CalcBaseAndBitshift+0x6c>)
 8001a30:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001a32:	e00e      	b.n	8001a52 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <DMA_CalcBaseAndBitshift+0x70>)
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <DMA_CalcBaseAndBitshift+0x68>)
 8001a40:	fba2 2303 	umull	r2, r3, r2, r3
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	009a      	lsls	r2, r3, #2
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <DMA_CalcBaseAndBitshift+0x74>)
 8001a50:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40020407 	.word	0x40020407
 8001a64:	bffdfff8 	.word	0xbffdfff8
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	bffdfbf8 	.word	0xbffdfbf8
 8001a74:	40020400 	.word	0x40020400

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b087      	sub	sp, #28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a86:	e160      	b.n	8001d4a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	fa01 f303 	lsl.w	r3, r1, r3
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8152 	beq.w	8001d44 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d005      	beq.n	8001ab8 <HAL_GPIO_Init+0x40>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d130      	bne.n	8001b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aee:	2201      	movs	r2, #1
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 0201 	and.w	r2, r3, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d017      	beq.n	8001b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68db      	ldr	r3, [r3, #12]
 8001b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	2203      	movs	r2, #3
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d123      	bne.n	8001baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	08da      	lsrs	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3208      	adds	r2, #8
 8001b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	08da      	lsrs	r2, r3, #3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3208      	adds	r2, #8
 8001ba4:	6939      	ldr	r1, [r7, #16]
 8001ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0203 	and.w	r2, r3, #3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 80ac 	beq.w	8001d44 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bec:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a5d      	ldr	r2, [pc, #372]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c04:	4a59      	ldr	r2, [pc, #356]	; (8001d6c <HAL_GPIO_Init+0x2f4>)
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c2e:	d025      	beq.n	8001c7c <HAL_GPIO_Init+0x204>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a4f      	ldr	r2, [pc, #316]	; (8001d70 <HAL_GPIO_Init+0x2f8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d01f      	beq.n	8001c78 <HAL_GPIO_Init+0x200>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a4e      	ldr	r2, [pc, #312]	; (8001d74 <HAL_GPIO_Init+0x2fc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d019      	beq.n	8001c74 <HAL_GPIO_Init+0x1fc>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a4d      	ldr	r2, [pc, #308]	; (8001d78 <HAL_GPIO_Init+0x300>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d013      	beq.n	8001c70 <HAL_GPIO_Init+0x1f8>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a4c      	ldr	r2, [pc, #304]	; (8001d7c <HAL_GPIO_Init+0x304>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d00d      	beq.n	8001c6c <HAL_GPIO_Init+0x1f4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_GPIO_Init+0x308>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d007      	beq.n	8001c68 <HAL_GPIO_Init+0x1f0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_GPIO_Init+0x1ec>
 8001c60:	2306      	movs	r3, #6
 8001c62:	e00c      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c64:	2307      	movs	r3, #7
 8001c66:	e00a      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c68:	2305      	movs	r3, #5
 8001c6a:	e008      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	e006      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c70:	2303      	movs	r3, #3
 8001c72:	e004      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e002      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <HAL_GPIO_Init+0x206>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8e:	4937      	ldr	r1, [pc, #220]	; (8001d6c <HAL_GPIO_Init+0x2f4>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc6:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cea:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d1a:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4013      	ands	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	fa22 f303 	lsr.w	r3, r2, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f47f ae97 	bne.w	8001a88 <HAL_GPIO_Init+0x10>
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	48000400 	.word	0x48000400
 8001d74:	48000800 	.word	0x48000800
 8001d78:	48000c00 	.word	0x48000c00
 8001d7c:	48001000 	.word	0x48001000
 8001d80:	48001400 	.word	0x48001400
 8001d84:	48001800 	.word	0x48001800
 8001d88:	40010400 	.word	0x40010400

08001d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d98:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f001 b83a 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 816f 	beq.w	80020a6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dc8:	4bb5      	ldr	r3, [pc, #724]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d00c      	beq.n	8001dee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dd4:	4bb2      	ldr	r3, [pc, #712]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d15c      	bne.n	8001e9a <HAL_RCC_OscConfig+0x10e>
 8001de0:	4baf      	ldr	r3, [pc, #700]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d155      	bne.n	8001e9a <HAL_RCC_OscConfig+0x10e>
 8001dee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001df2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e02:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	095b      	lsrs	r3, r3, #5
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d102      	bne.n	8001e20 <HAL_RCC_OscConfig+0x94>
 8001e1a:	4ba1      	ldr	r3, [pc, #644]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	e015      	b.n	8001e4c <HAL_RCC_OscConfig+0xc0>
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e38:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e3c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e48:	4b95      	ldr	r3, [pc, #596]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e50:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001e54:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001e60:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 8111 	beq.w	80020a4 <HAL_RCC_OscConfig+0x318>
 8001e82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e86:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8108 	bne.w	80020a4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	f000 bfc6 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x12e>
 8001eac:	4b7c      	ldr	r3, [pc, #496]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7b      	ldr	r2, [pc, #492]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e036      	b.n	8001f28 <HAL_RCC_OscConfig+0x19c>
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x158>
 8001eca:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a74      	ldr	r2, [pc, #464]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a71      	ldr	r2, [pc, #452]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e021      	b.n	8001f28 <HAL_RCC_OscConfig+0x19c>
 8001ee4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef4:	d10c      	bne.n	8001f10 <HAL_RCC_OscConfig+0x184>
 8001ef6:	4b6a      	ldr	r3, [pc, #424]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a69      	ldr	r2, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f00:	6013      	str	r3, [r2, #0]
 8001f02:	4b67      	ldr	r3, [pc, #412]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e00b      	b.n	8001f28 <HAL_RCC_OscConfig+0x19c>
 8001f10:	4b63      	ldr	r3, [pc, #396]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a62      	ldr	r2, [pc, #392]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a5f      	ldr	r2, [pc, #380]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f26:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d059      	beq.n	8001fec <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff f8fa 	bl	8001130 <HAL_GetTick>
 8001f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f42:	f7ff f8f5 	bl	8001130 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d902      	bls.n	8001f58 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	f000 bf67 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
 8001f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f6c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d102      	bne.n	8001f8a <HAL_RCC_OscConfig+0x1fe>
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	e015      	b.n	8001fb6 <HAL_RCC_OscConfig+0x22a>
 8001f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f96:	fa93 f3a3 	rbit	r3, r3
 8001f9a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001fa6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001fbe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001fc2:	fa92 f2a2 	rbit	r2, r2
 8001fc6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001fca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001fce:	fab2 f282 	clz	r2, r2
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	f042 0220 	orr.w	r2, r2, #32
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	f002 021f 	and.w	r2, r2, #31
 8001fde:	2101      	movs	r1, #1
 8001fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d0ab      	beq.n	8001f42 <HAL_RCC_OscConfig+0x1b6>
 8001fea:	e05c      	b.n	80020a6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff f8a0 	bl	8001130 <HAL_GetTick>
 8001ff0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff6:	f7ff f89b 	bl	8001130 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d902      	bls.n	800200c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	f000 bf0d 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
 800200c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002010:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002020:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	b2db      	uxtb	r3, r3
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d102      	bne.n	800203e <HAL_RCC_OscConfig+0x2b2>
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	e015      	b.n	800206a <HAL_RCC_OscConfig+0x2de>
 800203e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002042:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002056:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800205a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_OscConfig+0x314>)
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800206e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002072:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002076:	fa92 f2a2 	rbit	r2, r2
 800207a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800207e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	f002 021f 	and.w	r2, r2, #31
 8002092:	2101      	movs	r1, #1
 8002094:	fa01 f202 	lsl.w	r2, r1, r2
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ab      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x26a>
 800209e:	e002      	b.n	80020a6 <HAL_RCC_OscConfig+0x31a>
 80020a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 817f 	beq.w	80023ba <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020bc:	4ba7      	ldr	r3, [pc, #668]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c8:	4ba4      	ldr	r3, [pc, #656]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d173      	bne.n	80021bc <HAL_RCC_OscConfig+0x430>
 80020d4:	4ba1      	ldr	r3, [pc, #644]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e0:	d16c      	bne.n	80021bc <HAL_RCC_OscConfig+0x430>
 80020e2:	2302      	movs	r3, #2
 80020e4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80020f4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f8:	fab3 f383 	clz	r3, r3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_RCC_OscConfig+0x386>
 800210c:	4b93      	ldr	r3, [pc, #588]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e013      	b.n	800213a <HAL_RCC_OscConfig+0x3ae>
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002118:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002124:	2302      	movs	r3, #2
 8002126:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800212a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002136:	4b89      	ldr	r3, [pc, #548]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	2202      	movs	r2, #2
 800213c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002140:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002144:	fa92 f2a2 	rbit	r2, r2
 8002148:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800214c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	f042 0220 	orr.w	r2, r2, #32
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f002 021f 	and.w	r2, r2, #31
 8002160:	2101      	movs	r1, #1
 8002162:	fa01 f202 	lsl.w	r2, r1, r2
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCC_OscConfig+0x3f6>
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d002      	beq.n	8002182 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f000 be52 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002182:	4b76      	ldr	r3, [pc, #472]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800218a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	21f8      	movs	r1, #248	; 0xf8
 8002198:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80021a0:	fa91 f1a1 	rbit	r1, r1
 80021a4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80021a8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80021ac:	fab1 f181 	clz	r1, r1
 80021b0:	b2c9      	uxtb	r1, r1
 80021b2:	408b      	lsls	r3, r1
 80021b4:	4969      	ldr	r1, [pc, #420]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	e0fe      	b.n	80023ba <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f000 8088 	beq.w	80022de <HAL_RCC_OscConfig+0x552>
 80021ce:	2301      	movs	r3, #1
 80021d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80021e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	461a      	mov	r2, r3
 80021f6:	2301      	movs	r3, #1
 80021f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe ff99 	bl	8001130 <HAL_GetTick>
 80021fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	e00a      	b.n	800221a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002204:	f7fe ff94 	bl	8001130 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d902      	bls.n	800221a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	f000 be06 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800222c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	fab3 f383 	clz	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <HAL_RCC_OscConfig+0x4be>
 8002244:	4b45      	ldr	r3, [pc, #276]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	e013      	b.n	8002272 <HAL_RCC_OscConfig+0x4e6>
 800224a:	2302      	movs	r3, #2
 800224c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002250:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800225c:	2302      	movs	r3, #2
 800225e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002262:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2202      	movs	r2, #2
 8002274:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002278:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800227c:	fa92 f2a2 	rbit	r2, r2
 8002280:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002284:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	f042 0220 	orr.w	r2, r2, #32
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	f002 021f 	and.w	r2, r2, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f202 	lsl.w	r2, r1, r2
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0af      	beq.n	8002204 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	21f8      	movs	r1, #248	; 0xf8
 80022ba:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80022c2:	fa91 f1a1 	rbit	r1, r1
 80022c6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80022ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80022ce:	fab1 f181 	clz	r1, r1
 80022d2:	b2c9      	uxtb	r1, r1
 80022d4:	408b      	lsls	r3, r1
 80022d6:	4921      	ldr	r1, [pc, #132]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e06d      	b.n	80023ba <HAL_RCC_OscConfig+0x62e>
 80022de:	2301      	movs	r3, #1
 80022e0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80022f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	461a      	mov	r2, r3
 8002306:	2300      	movs	r3, #0
 8002308:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe ff11 	bl	8001130 <HAL_GetTick>
 800230e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002314:	f7fe ff0c 	bl	8001130 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d902      	bls.n	800232a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	f000 bd7e 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
 800232a:	2302      	movs	r3, #2
 800232c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002334:	fa93 f3a3 	rbit	r3, r3
 8002338:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800233c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002340:	fab3 f383 	clz	r3, r3
 8002344:	b2db      	uxtb	r3, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	b2db      	uxtb	r3, r3
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x5d4>
 8002354:	4b01      	ldr	r3, [pc, #4]	; (800235c <HAL_RCC_OscConfig+0x5d0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e016      	b.n	8002388 <HAL_RCC_OscConfig+0x5fc>
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	2302      	movs	r3, #2
 8002362:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002372:	2302      	movs	r3, #2
 8002374:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002378:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002384:	4bbf      	ldr	r3, [pc, #764]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2202      	movs	r2, #2
 800238a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800238e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002392:	fa92 f2a2 	rbit	r2, r2
 8002396:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800239a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800239e:	fab2 f282 	clz	r2, r2
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	f042 0220 	orr.w	r2, r2, #32
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	f002 021f 	and.w	r2, r2, #31
 80023ae:	2101      	movs	r1, #1
 80023b0:	fa01 f202 	lsl.w	r2, r1, r2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ac      	bne.n	8002314 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 8113 	beq.w	80025f6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d07c      	beq.n	80024da <HAL_RCC_OscConfig+0x74e>
 80023e0:	2301      	movs	r3, #1
 80023e2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80023f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f6:	fab3 f383 	clz	r3, r3
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	4ba2      	ldr	r3, [pc, #648]	; (8002688 <HAL_RCC_OscConfig+0x8fc>)
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	461a      	mov	r2, r3
 8002406:	2301      	movs	r3, #1
 8002408:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240a:	f7fe fe91 	bl	8001130 <HAL_GetTick>
 800240e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002412:	e00a      	b.n	800242a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fe8c 	bl	8001130 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d902      	bls.n	800242a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	f000 bcfe 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
 800242a:	2302      	movs	r3, #2
 800242c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800243c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002446:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800244a:	2202      	movs	r2, #2
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002452:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800246a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800246e:	2202      	movs	r2, #2
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002488:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b7e      	ldr	r3, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 800248c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800248e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002492:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002496:	2102      	movs	r1, #2
 8002498:	6019      	str	r1, [r3, #0]
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f1a3 	rbit	r1, r3
 80024a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024b0:	6019      	str	r1, [r3, #0]
  return result;
 80024b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fab3 f383 	clz	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	4013      	ands	r3, r2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d09d      	beq.n	8002414 <HAL_RCC_OscConfig+0x688>
 80024d8:	e08d      	b.n	80025f6 <HAL_RCC_OscConfig+0x86a>
 80024da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ea:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	fa93 f2a3 	rbit	r2, r3
 80024f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024f8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80024fc:	601a      	str	r2, [r3, #0]
  return result;
 80024fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002502:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002506:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002508:	fab3 f383 	clz	r3, r3
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	4b5d      	ldr	r3, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x8fc>)
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	461a      	mov	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251c:	f7fe fe08 	bl	8001130 <HAL_GetTick>
 8002520:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	e00a      	b.n	800253c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002526:	f7fe fe03 	bl	8001130 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d902      	bls.n	800253c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	f000 bc75 	b.w	8002e26 <HAL_RCC_OscConfig+0x109a>
 800253c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002540:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002544:	2202      	movs	r2, #2
 8002546:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fa93 f2a3 	rbit	r2, r3
 8002556:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002564:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002568:	2202      	movs	r2, #2
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002570:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	fa93 f2a3 	rbit	r2, r3
 800257a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002588:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002594:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	fa93 f2a3 	rbit	r2, r3
 800259e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80025a6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b36      	ldr	r3, [pc, #216]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 80025aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025b0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025b4:	2102      	movs	r1, #2
 80025b6:	6019      	str	r1, [r3, #0]
 80025b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025bc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	fa93 f1a3 	rbit	r1, r3
 80025c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ca:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025ce:	6019      	str	r1, [r3, #0]
  return result;
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 031f 	and.w	r3, r3, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f303 	lsl.w	r3, r1, r3
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d197      	bne.n	8002526 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 81a5 	beq.w	8002956 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b1c      	ldr	r3, [pc, #112]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_RCC_OscConfig+0x8f8>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002632:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002636:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002644:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b0f      	ldr	r3, [pc, #60]	; (800268c <HAL_RCC_OscConfig+0x900>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d121      	bne.n	800269c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <HAL_RCC_OscConfig+0x900>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0b      	ldr	r2, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x900>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002664:	f7fe fd64 	bl	8001130 <HAL_GetTick>
 8002668:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	e010      	b.n	8002690 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7fe fd5f 	bl	8001130 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d908      	bls.n	8002690 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e3d1      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	10908120 	.word	0x10908120
 800268c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002690:	4b8d      	ldr	r3, [pc, #564]	; (80028c8 <HAL_RCC_OscConfig+0xb3c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0e8      	beq.n	800266e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800269c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x92e>
 80026ac:	4b87      	ldr	r3, [pc, #540]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a86      	ldr	r2, [pc, #536]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e035      	b.n	8002726 <HAL_RCC_OscConfig+0x99a>
 80026ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x958>
 80026ca:	4b80      	ldr	r3, [pc, #512]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4a7f      	ldr	r2, [pc, #508]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	6213      	str	r3, [r2, #32]
 80026d6:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a7c      	ldr	r2, [pc, #496]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	e020      	b.n	8002726 <HAL_RCC_OscConfig+0x99a>
 80026e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d10c      	bne.n	800270e <HAL_RCC_OscConfig+0x982>
 80026f4:	4b75      	ldr	r3, [pc, #468]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a74      	ldr	r2, [pc, #464]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6213      	str	r3, [r2, #32]
 8002700:	4b72      	ldr	r3, [pc, #456]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a71      	ldr	r2, [pc, #452]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e00b      	b.n	8002726 <HAL_RCC_OscConfig+0x99a>
 800270e:	4b6f      	ldr	r3, [pc, #444]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	6213      	str	r3, [r2, #32]
 800271a:	4b6c      	ldr	r3, [pc, #432]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	4a6b      	ldr	r2, [pc, #428]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 8002720:	f023 0304 	bic.w	r3, r3, #4
 8002724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800272a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 8081 	beq.w	800283a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7fe fcfa 	bl	8001130 <HAL_GetTick>
 800273c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe fcf5 	bl	8001130 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002752:	4293      	cmp	r3, r2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e365      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002762:	2202      	movs	r2, #2
 8002764:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800276a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	fa93 f2a3 	rbit	r2, r3
 8002774:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002778:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002782:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027a0:	601a      	str	r2, [r3, #0]
  return result;
 80027a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027aa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ac:	fab3 f383 	clz	r3, r3
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	095b      	lsrs	r3, r3, #5
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d102      	bne.n	80027c6 <HAL_RCC_OscConfig+0xa3a>
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	e013      	b.n	80027ee <HAL_RCC_OscConfig+0xa62>
 80027c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027ce:	2202      	movs	r2, #2
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e4:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	4b38      	ldr	r3, [pc, #224]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027f2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80027f6:	2102      	movs	r1, #2
 80027f8:	6011      	str	r1, [r2, #0]
 80027fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027fe:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	fa92 f1a2 	rbit	r1, r2
 8002808:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800280c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002810:	6011      	str	r1, [r2, #0]
  return result;
 8002812:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002816:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800281a:	6812      	ldr	r2, [r2, #0]
 800281c:	fab2 f282 	clz	r2, r2
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	f002 021f 	and.w	r2, r2, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f202 	lsl.w	r2, r1, r2
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d084      	beq.n	8002742 <HAL_RCC_OscConfig+0x9b6>
 8002838:	e083      	b.n	8002942 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7fe fc79 	bl	8001130 <HAL_GetTick>
 800283e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002842:	e00b      	b.n	800285c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002844:	f7fe fc74 	bl	8001130 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f241 3288 	movw	r2, #5000	; 0x1388
 8002854:	4293      	cmp	r3, r2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e2e4      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
 800285c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002860:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002864:	2202      	movs	r2, #2
 8002866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800286c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fa93 f2a3 	rbit	r2, r3
 8002876:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002884:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002888:	2202      	movs	r2, #2
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002890:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	fa93 f2a3 	rbit	r2, r3
 800289a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800289e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028a2:	601a      	str	r2, [r3, #0]
  return result;
 80028a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028a8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80028ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	095b      	lsrs	r3, r3, #5
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d106      	bne.n	80028d0 <HAL_RCC_OscConfig+0xb44>
 80028c2:	4b02      	ldr	r3, [pc, #8]	; (80028cc <HAL_RCC_OscConfig+0xb40>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	e017      	b.n	80028f8 <HAL_RCC_OscConfig+0xb6c>
 80028c8:	40007000 	.word	0x40007000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028d4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028d8:	2202      	movs	r2, #2
 80028da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028e0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	fa93 f2a3 	rbit	r2, r3
 80028ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80028ee:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	4bb3      	ldr	r3, [pc, #716]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80028fc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002900:	2102      	movs	r1, #2
 8002902:	6011      	str	r1, [r2, #0]
 8002904:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002908:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	fa92 f1a2 	rbit	r1, r2
 8002912:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002916:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800291a:	6011      	str	r1, [r2, #0]
  return result;
 800291c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002920:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d180      	bne.n	8002844 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002942:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	4a9d      	ldr	r2, [pc, #628]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002954:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002956:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800295a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 825e 	beq.w	8002e24 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	4b96      	ldr	r3, [pc, #600]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 030c 	and.w	r3, r3, #12
 8002970:	2b08      	cmp	r3, #8
 8002972:	f000 821f 	beq.w	8002db4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800297a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	2b02      	cmp	r3, #2
 8002984:	f040 8170 	bne.w	8002c68 <HAL_RCC_OscConfig+0xedc>
 8002988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800298c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002990:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002994:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800299a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029a8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029ac:	601a      	str	r2, [r3, #0]
  return result;
 80029ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80029b6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	461a      	mov	r2, r3
 80029ca:	2300      	movs	r3, #0
 80029cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ce:	f7fe fbaf 	bl	8001130 <HAL_GetTick>
 80029d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d6:	e009      	b.n	80029ec <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029d8:	f7fe fbaa 	bl	8001130 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e21c      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
 80029ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029f0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80029f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80029fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a0c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a10:	601a      	str	r2, [r3, #0]
  return result;
 8002a12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a16:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002a1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	095b      	lsrs	r3, r3, #5
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d102      	bne.n	8002a36 <HAL_RCC_OscConfig+0xcaa>
 8002a30:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	e027      	b.n	8002a86 <HAL_RCC_OscConfig+0xcfa>
 8002a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a3a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a48:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	fa93 f2a3 	rbit	r2, r3
 8002a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a60:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a6e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002a7c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a8a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a8e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a92:	6011      	str	r1, [r2, #0]
 8002a94:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002a98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	fa92 f1a2 	rbit	r1, r2
 8002aa2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002aa6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002aaa:	6011      	str	r1, [r2, #0]
  return result;
 8002aac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002ab0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	fab2 f282 	clz	r2, r2
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	f042 0220 	orr.w	r2, r2, #32
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	f002 021f 	and.w	r2, r2, #31
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d182      	bne.n	80029d8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f023 020f 	bic.w	r2, r3, #15
 8002ada:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ade:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	4937      	ldr	r1, [pc, #220]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002aec:	4b35      	ldr	r3, [pc, #212]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002af4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002af8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6a19      	ldr	r1, [r3, #32]
 8002b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	492d      	ldr	r1, [pc, #180]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
 8002b14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b18:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b26:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	fa93 f2a3 	rbit	r2, r3
 8002b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b34:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b38:	601a      	str	r2, [r3, #0]
  return result;
 8002b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b3e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002b42:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	fab3 f383 	clz	r3, r3
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b4e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	461a      	mov	r2, r3
 8002b56:	2301      	movs	r3, #1
 8002b58:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fae9 	bl	8001130 <HAL_GetTick>
 8002b5e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b62:	e009      	b.n	8002b78 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fae4 	bl	8001130 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e156      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
 8002b78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b7c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b8a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	fa93 f2a3 	rbit	r2, r3
 8002b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002b98:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002b9c:	601a      	str	r2, [r3, #0]
  return result;
 8002b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ba2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002ba6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCC_OscConfig+0xe3c>
 8002bbc:	4b01      	ldr	r3, [pc, #4]	; (8002bc4 <HAL_RCC_OscConfig+0xe38>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	e02a      	b.n	8002c18 <HAL_RCC_OscConfig+0xe8c>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bcc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bda:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	fa93 f2a3 	rbit	r2, r3
 8002be4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002be8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002bf2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002bf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c00:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c0e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	4b86      	ldr	r3, [pc, #536]	; (8002e30 <HAL_RCC_OscConfig+0x10a4>)
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c1c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c24:	6011      	str	r1, [r2, #0]
 8002c26:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c2a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	fa92 f1a2 	rbit	r1, r2
 8002c34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c38:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002c3c:	6011      	str	r1, [r2, #0]
  return result;
 8002c3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002c42:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	fab2 f282 	clz	r2, r2
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	f042 0220 	orr.w	r2, r2, #32
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	f002 021f 	and.w	r2, r2, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f43f af7f 	beq.w	8002b64 <HAL_RCC_OscConfig+0xdd8>
 8002c66:	e0dd      	b.n	8002e24 <HAL_RCC_OscConfig+0x1098>
 8002c68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c6c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c8c:	601a      	str	r2, [r3, #0]
  return result;
 8002c8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002c92:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002c96:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ca2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7fe fa3f 	bl	8001130 <HAL_GetTick>
 8002cb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	e009      	b.n	8002ccc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7fe fa3a 	bl	8001130 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0ac      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
 8002ccc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cd0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002cd4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	fa93 f2a3 	rbit	r2, r3
 8002ce8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cec:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cf0:	601a      	str	r2, [r3, #0]
  return result;
 8002cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002cf6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002cfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	f043 0301 	orr.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d102      	bne.n	8002d16 <HAL_RCC_OscConfig+0xf8a>
 8002d10:	4b47      	ldr	r3, [pc, #284]	; (8002e30 <HAL_RCC_OscConfig+0x10a4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	e027      	b.n	8002d66 <HAL_RCC_OscConfig+0xfda>
 8002d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d1a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d28:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	fa93 f2a3 	rbit	r2, r3
 8002d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d40:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d4e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	fa93 f2a3 	rbit	r2, r3
 8002d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002d5c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	4b33      	ldr	r3, [pc, #204]	; (8002e30 <HAL_RCC_OscConfig+0x10a4>)
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d6a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d6e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d72:	6011      	str	r1, [r2, #0]
 8002d74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d78:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	fa92 f1a2 	rbit	r1, r2
 8002d82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d86:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002d8a:	6011      	str	r1, [r2, #0]
  return result;
 8002d8c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002d90:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	fab2 f282 	clz	r2, r2
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	f042 0220 	orr.w	r2, r2, #32
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	f002 021f 	and.w	r2, r2, #31
 8002da6:	2101      	movs	r1, #1
 8002da8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d182      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xf2c>
 8002db2:	e037      	b.n	8002e24 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002db8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e02e      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002dc8:	4b19      	ldr	r3, [pc, #100]	; (8002e30 <HAL_RCC_OscConfig+0x10a4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_RCC_OscConfig+0x10a4>)
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002dd8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002ddc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d117      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002df0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002df4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002df8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dfc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10b      	bne.n	8002e20 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b09e      	sub	sp, #120	; 0x78
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e162      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b90      	ldr	r3, [pc, #576]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d910      	bls.n	8002e7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b8d      	ldr	r3, [pc, #564]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f023 0207 	bic.w	r2, r3, #7
 8002e62:	498b      	ldr	r1, [pc, #556]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e6a:	4b89      	ldr	r3, [pc, #548]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d001      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e14a      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e88:	4b82      	ldr	r3, [pc, #520]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	497f      	ldr	r1, [pc, #508]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80dc 	beq.w	8003060 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d13c      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xf6>
 8002eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d102      	bne.n	8002eda <HAL_RCC_ClockConfig+0xa6>
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	e00f      	b.n	8002efa <HAL_RCC_ClockConfig+0xc6>
 8002eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ede:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ee8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002eec:	663b      	str	r3, [r7, #96]	; 0x60
 8002eee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ef6:	4b67      	ldr	r3, [pc, #412]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002efe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f02:	fa92 f2a2 	rbit	r2, r2
 8002f06:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002f08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002f0a:	fab2 f282 	clz	r2, r2
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	f042 0220 	orr.w	r2, r2, #32
 8002f14:	b2d2      	uxtb	r2, r2
 8002f16:	f002 021f 	and.w	r2, r2, #31
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d17b      	bne.n	800301e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e0f3      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d13c      	bne.n	8002fac <HAL_RCC_ClockConfig+0x178>
 8002f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f36:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f3a:	fa93 f3a3 	rbit	r3, r3
 8002f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	095b      	lsrs	r3, r3, #5
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d102      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x128>
 8002f56:	4b4f      	ldr	r3, [pc, #316]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	e00f      	b.n	8002f7c <HAL_RCC_ClockConfig+0x148>
 8002f5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f60:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	647b      	str	r3, [r7, #68]	; 0x44
 8002f6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40
 8002f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f78:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f80:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f84:	fa92 f2a2 	rbit	r2, r2
 8002f88:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f8c:	fab2 f282 	clz	r2, r2
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	f002 021f 	and.w	r2, r2, #31
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d13a      	bne.n	800301e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0b2      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
 8002fac:	2302      	movs	r3, #2
 8002fae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fba:	fab3 f383 	clz	r3, r3
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d102      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0x1a0>
 8002fce:	4b31      	ldr	r3, [pc, #196]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	e00d      	b.n	8002ff0 <HAL_RCC_ClockConfig+0x1bc>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	61fb      	str	r3, [r7, #28]
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	61ba      	str	r2, [r7, #24]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	fa92 f2a2 	rbit	r2, r2
 8002ffa:	617a      	str	r2, [r7, #20]
  return result;
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	fab2 f282 	clz	r2, r2
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f002 021f 	and.w	r2, r2, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e079      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800301e:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f023 0203 	bic.w	r2, r3, #3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	491a      	ldr	r1, [pc, #104]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003030:	f7fe f87e 	bl	8001130 <HAL_GetTick>
 8003034:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	e00a      	b.n	800304e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003038:	f7fe f87a 	bl	8001130 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	f241 3288 	movw	r2, #5000	; 0x1388
 8003046:	4293      	cmp	r3, r2
 8003048:	d901      	bls.n	800304e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e061      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304e:	4b11      	ldr	r3, [pc, #68]	; (8003094 <HAL_RCC_ClockConfig+0x260>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 020c 	and.w	r2, r3, #12
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	429a      	cmp	r2, r3
 800305e:	d1eb      	bne.n	8003038 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d214      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4906      	ldr	r1, [pc, #24]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_RCC_ClockConfig+0x25c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e040      	b.n	8003112 <HAL_RCC_ClockConfig+0x2de>
 8003090:	40022000 	.word	0x40022000
 8003094:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_ClockConfig+0x2e8>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	491a      	ldr	r1, [pc, #104]	; (800311c <HAL_RCC_ClockConfig+0x2e8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_RCC_ClockConfig+0x2e8>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4912      	ldr	r1, [pc, #72]	; (800311c <HAL_RCC_ClockConfig+0x2e8>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80030d6:	f000 f829 	bl	800312c <HAL_RCC_GetSysClockFreq>
 80030da:	4601      	mov	r1, r0
 80030dc:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_RCC_ClockConfig+0x2e8>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e4:	22f0      	movs	r2, #240	; 0xf0
 80030e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	fa92 f2a2 	rbit	r2, r2
 80030ee:	60fa      	str	r2, [r7, #12]
  return result;
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	fab2 f282 	clz	r2, r2
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	40d3      	lsrs	r3, r2
 80030fa:	4a09      	ldr	r2, [pc, #36]	; (8003120 <HAL_RCC_ClockConfig+0x2ec>)
 80030fc:	5cd3      	ldrb	r3, [r2, r3]
 80030fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003102:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_RCC_ClockConfig+0x2f0>)
 8003104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <HAL_RCC_ClockConfig+0x2f4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd ffcc 	bl	80010a8 <HAL_InitTick>
  
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3778      	adds	r7, #120	; 0x78
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40021000 	.word	0x40021000
 8003120:	08004dd0 	.word	0x08004dd0
 8003124:	20000000 	.word	0x20000000
 8003128:	20000004 	.word	0x20000004

0800312c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	b08b      	sub	sp, #44	; 0x2c
 8003130:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d002      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x30>
 8003156:	2b08      	cmp	r3, #8
 8003158:	d003      	beq.n	8003162 <HAL_RCC_GetSysClockFreq+0x36>
 800315a:	e03f      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800315c:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800315e:	623b      	str	r3, [r7, #32]
      break;
 8003160:	e03f      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003168:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800316c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	fa92 f2a2 	rbit	r2, r2
 8003174:	607a      	str	r2, [r7, #4]
  return result;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	fab2 f282 	clz	r2, r2
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	40d3      	lsrs	r3, r2
 8003180:	4a1d      	ldr	r2, [pc, #116]	; (80031f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003186:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	220f      	movs	r2, #15
 8003190:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	fa92 f2a2 	rbit	r2, r2
 8003198:	60fa      	str	r2, [r7, #12]
  return result;
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	fab2 f282 	clz	r2, r2
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	40d3      	lsrs	r3, r2
 80031a4:	4a15      	ldr	r2, [pc, #84]	; (80031fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80031a6:	5cd3      	ldrb	r3, [r2, r3]
 80031a8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d008      	beq.n	80031c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031b4:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	e007      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <HAL_RCC_GetSysClockFreq+0xd4>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fb02 f303 	mul.w	r3, r2, r3
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	623b      	str	r3, [r7, #32]
      break;
 80031da:	e002      	b.n	80031e2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_RCC_GetSysClockFreq+0xd4>)
 80031de:	623b      	str	r3, [r7, #32]
      break;
 80031e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e2:	6a3b      	ldr	r3, [r7, #32]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	372c      	adds	r7, #44	; 0x2c
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40021000 	.word	0x40021000
 80031f4:	01e84800 	.word	0x01e84800
 80031f8:	08004de0 	.word	0x08004de0
 80031fc:	08004df0 	.word	0x08004df0
 8003200:	007a1200 	.word	0x007a1200

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b092      	sub	sp, #72	; 0x48
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003222:	2b00      	cmp	r3, #0
 8003224:	f000 80d4 	beq.w	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003228:	4b4e      	ldr	r3, [pc, #312]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10e      	bne.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4a4a      	ldr	r2, [pc, #296]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800323a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800323e:	61d3      	str	r3, [r2, #28]
 8003240:	4b48      	ldr	r3, [pc, #288]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003248:	60bb      	str	r3, [r7, #8]
 800324a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003252:	4b45      	ldr	r3, [pc, #276]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325e:	4b42      	ldr	r3, [pc, #264]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a41      	ldr	r2, [pc, #260]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fd ff61 	bl	8001130 <HAL_GetTick>
 800326e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fd ff5d 	bl	8001130 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b64      	cmp	r3, #100	; 0x64
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e1d6      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003284:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003290:	4b34      	ldr	r3, [pc, #208]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003298:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800329a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 8084 	beq.w	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d07c      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032b0:	4b2c      	ldr	r3, [pc, #176]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	4b26      	ldr	r3, [pc, #152]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032d4:	4413      	add	r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	461a      	mov	r2, r3
 80032da:	2301      	movs	r3, #1
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80032ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	461a      	mov	r2, r3
 80032f6:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	461a      	mov	r2, r3
 80032fe:	2300      	movs	r3, #0
 8003300:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003306:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04b      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003312:	f7fd ff0d 	bl	8001130 <HAL_GetTick>
 8003316:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003318:	e00a      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800331a:	f7fd ff09 	bl	8001130 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	f241 3288 	movw	r2, #5000	; 0x1388
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e180      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003330:	2302      	movs	r3, #2
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	fa93 f3a3 	rbit	r3, r3
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	2302      	movs	r3, #2
 800333e:	623b      	str	r3, [r7, #32]
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	fa93 f3a3 	rbit	r3, r3
 8003346:	61fb      	str	r3, [r7, #28]
  return result;
 8003348:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	b2db      	uxtb	r3, r3
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d108      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800335e:	4b01      	ldr	r3, [pc, #4]	; (8003364 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	e00d      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003364:	40021000 	.word	0x40021000
 8003368:	40007000 	.word	0x40007000
 800336c:	10908100 	.word	0x10908100
 8003370:	2302      	movs	r3, #2
 8003372:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	4b9a      	ldr	r3, [pc, #616]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2202      	movs	r2, #2
 8003382:	613a      	str	r2, [r7, #16]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	fa92 f2a2 	rbit	r2, r2
 800338a:	60fa      	str	r2, [r7, #12]
  return result;
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	fab2 f282 	clz	r2, r2
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	f002 021f 	and.w	r2, r2, #31
 800339e:	2101      	movs	r1, #1
 80033a0:	fa01 f202 	lsl.w	r2, r1, r2
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0b7      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033aa:	4b8f      	ldr	r3, [pc, #572]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	498c      	ldr	r1, [pc, #560]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c4:	4b88      	ldr	r3, [pc, #544]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	4a87      	ldr	r2, [pc, #540]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0301 	and.w	r3, r3, #1
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033dc:	4b82      	ldr	r3, [pc, #520]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e0:	f023 0203 	bic.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	497f      	ldr	r1, [pc, #508]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fa:	4b7b      	ldr	r3, [pc, #492]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	4978      	ldr	r1, [pc, #480]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003408:	4313      	orrs	r3, r2
 800340a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	d008      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003418:	4b73      	ldr	r3, [pc, #460]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	4970      	ldr	r1, [pc, #448]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003426:	4313      	orrs	r3, r2
 8003428:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d008      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003436:	4b6c      	ldr	r3, [pc, #432]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f023 0210 	bic.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4969      	ldr	r1, [pc, #420]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003444:	4313      	orrs	r3, r2
 8003446:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003454:	4b64      	ldr	r3, [pc, #400]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	4961      	ldr	r1, [pc, #388]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f023 0220 	bic.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	495a      	ldr	r1, [pc, #360]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003480:	4313      	orrs	r3, r2
 8003482:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003490:	4b55      	ldr	r3, [pc, #340]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	4952      	ldr	r1, [pc, #328]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d008      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034ae:	4b4e      	ldr	r3, [pc, #312]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	494b      	ldr	r1, [pc, #300]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4943      	ldr	r1, [pc, #268]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80034ea:	4b3f      	ldr	r3, [pc, #252]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f6:	493c      	ldr	r1, [pc, #240]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003508:	4b37      	ldr	r3, [pc, #220]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	4934      	ldr	r1, [pc, #208]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	492d      	ldr	r1, [pc, #180]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003534:	4313      	orrs	r3, r2
 8003536:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003544:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	4925      	ldr	r1, [pc, #148]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003562:	4b21      	ldr	r3, [pc, #132]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	491e      	ldr	r1, [pc, #120]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003570:	4313      	orrs	r3, r2
 8003572:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035aa:	490f      	ldr	r1, [pc, #60]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c8:	4907      	ldr	r1, [pc, #28]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00c      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80035da:	4b03      	ldr	r3, [pc, #12]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80035e6:	bf00      	nop
 80035e8:	40021000 	.word	0x40021000
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	4913      	ldr	r1, [pc, #76]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360c:	490b      	ldr	r1, [pc, #44]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800360e:	4313      	orrs	r3, r2
 8003610:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	4904      	ldr	r1, [pc, #16]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800362c:	4313      	orrs	r3, r2
 800362e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3748      	adds	r7, #72	; 0x48
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000

08003640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e049      	b.n	80036e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fc7a 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4619      	mov	r1, r3
 800367e:	4610      	mov	r0, r2
 8003680:	f000 f968 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d001      	beq.n	8003708 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e047      	b.n	8003798 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_TIM_Base_Start+0xb4>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01d      	beq.n	8003756 <HAL_TIM_Base_Start+0x66>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003722:	d018      	beq.n	8003756 <HAL_TIM_Base_Start+0x66>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_TIM_Base_Start+0xb8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d013      	beq.n	8003756 <HAL_TIM_Base_Start+0x66>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_TIM_Base_Start+0xbc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_TIM_Base_Start+0x66>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_TIM_Base_Start+0xc0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_TIM_Base_Start+0x66>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_TIM_Base_Start+0xc4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIM_Base_Start+0x66>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_TIM_Base_Start+0xc8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d115      	bne.n	8003782 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <HAL_TIM_Base_Start+0xcc>)
 800375e:	4013      	ands	r3, r2
 8003760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b06      	cmp	r3, #6
 8003766:	d015      	beq.n	8003794 <HAL_TIM_Base_Start+0xa4>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800376e:	d011      	beq.n	8003794 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003780:	e008      	b.n	8003794 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f042 0201 	orr.w	r2, r2, #1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e000      	b.n	8003796 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	40012c00 	.word	0x40012c00
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40013400 	.word	0x40013400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40015000 	.word	0x40015000
 80037bc:	00010007 	.word	0x00010007

080037c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_ConfigClockSource+0x1c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0b6      	b.n	800394a <HAL_TIM_ConfigClockSource+0x18a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003806:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003818:	d03e      	beq.n	8003898 <HAL_TIM_ConfigClockSource+0xd8>
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	f200 8087 	bhi.w	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003826:	f000 8086 	beq.w	8003936 <HAL_TIM_ConfigClockSource+0x176>
 800382a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382e:	d87f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d01a      	beq.n	800386a <HAL_TIM_ConfigClockSource+0xaa>
 8003834:	2b70      	cmp	r3, #112	; 0x70
 8003836:	d87b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d050      	beq.n	80038de <HAL_TIM_ConfigClockSource+0x11e>
 800383c:	2b60      	cmp	r3, #96	; 0x60
 800383e:	d877      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003840:	2b50      	cmp	r3, #80	; 0x50
 8003842:	d03c      	beq.n	80038be <HAL_TIM_ConfigClockSource+0xfe>
 8003844:	2b50      	cmp	r3, #80	; 0x50
 8003846:	d873      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d058      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0x13e>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d86f      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003850:	2b30      	cmp	r3, #48	; 0x30
 8003852:	d064      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15e>
 8003854:	2b30      	cmp	r3, #48	; 0x30
 8003856:	d86b      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d060      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15e>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d867      	bhi.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d05c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15e>
 8003864:	2b10      	cmp	r3, #16
 8003866:	d05a      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x15e>
 8003868:	e062      	b.n	8003930 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800387a:	f000 f983 	bl	8003b84 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800388c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	609a      	str	r2, [r3, #8]
      break;
 8003896:	e04f      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038a8:	f000 f96c 	bl	8003b84 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ba:	609a      	str	r2, [r3, #8]
      break;
 80038bc:	e03c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	461a      	mov	r2, r3
 80038cc:	f000 f8e0 	bl	8003a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2150      	movs	r1, #80	; 0x50
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f939 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038dc:	e02c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ea:	461a      	mov	r2, r3
 80038ec:	f000 f8ff 	bl	8003aee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2160      	movs	r1, #96	; 0x60
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f929 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 80038fc:	e01c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	461a      	mov	r2, r3
 800390c:	f000 f8c0 	bl	8003a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2140      	movs	r1, #64	; 0x40
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f919 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 800391c:	e00c      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	4610      	mov	r0, r2
 800392a:	f000 f910 	bl	8003b4e <TIM_ITRx_SetConfig>
      break;
 800392e:	e003      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
      break;
 8003934:	e000      	b.n	8003938 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003936:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a42      	ldr	r2, [pc, #264]	; (8003a70 <TIM_Base_SetConfig+0x11c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a3f      	ldr	r2, [pc, #252]	; (8003a74 <TIM_Base_SetConfig+0x120>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a3e      	ldr	r2, [pc, #248]	; (8003a78 <TIM_Base_SetConfig+0x124>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a3d      	ldr	r2, [pc, #244]	; (8003a7c <TIM_Base_SetConfig+0x128>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a3c      	ldr	r2, [pc, #240]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <TIM_Base_SetConfig+0x11c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01f      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d01b      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2e      	ldr	r2, [pc, #184]	; (8003a74 <TIM_Base_SetConfig+0x120>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d017      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2d      	ldr	r2, [pc, #180]	; (8003a78 <TIM_Base_SetConfig+0x124>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <TIM_Base_SetConfig+0x128>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00f      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2c      	ldr	r2, [pc, #176]	; (8003a84 <TIM_Base_SetConfig+0x130>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2b      	ldr	r2, [pc, #172]	; (8003a88 <TIM_Base_SetConfig+0x134>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <TIM_Base_SetConfig+0x138>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x9a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a25      	ldr	r2, [pc, #148]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <TIM_Base_SetConfig+0x11c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d013      	beq.n	8003a54 <TIM_Base_SetConfig+0x100>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <TIM_Base_SetConfig+0x128>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00f      	beq.n	8003a54 <TIM_Base_SetConfig+0x100>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <TIM_Base_SetConfig+0x130>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00b      	beq.n	8003a54 <TIM_Base_SetConfig+0x100>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <TIM_Base_SetConfig+0x134>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d007      	beq.n	8003a54 <TIM_Base_SetConfig+0x100>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <TIM_Base_SetConfig+0x138>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <TIM_Base_SetConfig+0x100>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a0c      	ldr	r2, [pc, #48]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d103      	bne.n	8003a5c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	691a      	ldr	r2, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	615a      	str	r2, [r3, #20]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40013400 	.word	0x40013400
 8003a80:	40015000 	.word	0x40015000
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40014400 	.word	0x40014400
 8003a8c:	40014800 	.word	0x40014800

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b087      	sub	sp, #28
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	f023 0210 	bic.w	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	031b      	lsls	r3, r3, #12
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	621a      	str	r2, [r3, #32]
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f043 0307 	orr.w	r3, r3, #7
 8003b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	609a      	str	r2, [r3, #8]
}
 8003bb8:	bf00      	nop
 8003bba:	371c      	adds	r7, #28
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd8:	2302      	movs	r3, #2
 8003bda:	e06d      	b.n	8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a2f      	ldr	r2, [pc, #188]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d004      	beq.n	8003c1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2d      	ldr	r2, [pc, #180]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d108      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a1e      	ldr	r2, [pc, #120]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c58:	d018      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a15      	ldr	r2, [pc, #84]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a11      	ldr	r2, [pc, #68]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	40012c00 	.word	0x40012c00
 8003cc8:	40013400 	.word	0x40013400
 8003ccc:	40015000 	.word	0x40015000
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40014000 	.word	0x40014000

08003cdc <memset>:
 8003cdc:	4402      	add	r2, r0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d100      	bne.n	8003ce6 <memset+0xa>
 8003ce4:	4770      	bx	lr
 8003ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8003cea:	e7f9      	b.n	8003ce0 <memset+0x4>

08003cec <__libc_init_array>:
 8003cec:	b570      	push	{r4, r5, r6, lr}
 8003cee:	4d0d      	ldr	r5, [pc, #52]	; (8003d24 <__libc_init_array+0x38>)
 8003cf0:	4c0d      	ldr	r4, [pc, #52]	; (8003d28 <__libc_init_array+0x3c>)
 8003cf2:	1b64      	subs	r4, r4, r5
 8003cf4:	10a4      	asrs	r4, r4, #2
 8003cf6:	2600      	movs	r6, #0
 8003cf8:	42a6      	cmp	r6, r4
 8003cfa:	d109      	bne.n	8003d10 <__libc_init_array+0x24>
 8003cfc:	4d0b      	ldr	r5, [pc, #44]	; (8003d2c <__libc_init_array+0x40>)
 8003cfe:	4c0c      	ldr	r4, [pc, #48]	; (8003d30 <__libc_init_array+0x44>)
 8003d00:	f001 f85a 	bl	8004db8 <_init>
 8003d04:	1b64      	subs	r4, r4, r5
 8003d06:	10a4      	asrs	r4, r4, #2
 8003d08:	2600      	movs	r6, #0
 8003d0a:	42a6      	cmp	r6, r4
 8003d0c:	d105      	bne.n	8003d1a <__libc_init_array+0x2e>
 8003d0e:	bd70      	pop	{r4, r5, r6, pc}
 8003d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d14:	4798      	blx	r3
 8003d16:	3601      	adds	r6, #1
 8003d18:	e7ee      	b.n	8003cf8 <__libc_init_array+0xc>
 8003d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d1e:	4798      	blx	r3
 8003d20:	3601      	adds	r6, #1
 8003d22:	e7f2      	b.n	8003d0a <__libc_init_array+0x1e>
 8003d24:	08004fd8 	.word	0x08004fd8
 8003d28:	08004fd8 	.word	0x08004fd8
 8003d2c:	08004fd8 	.word	0x08004fd8
 8003d30:	08004fdc 	.word	0x08004fdc
 8003d34:	00000000 	.word	0x00000000

08003d38 <sin>:
 8003d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d3a:	ec53 2b10 	vmov	r2, r3, d0
 8003d3e:	4828      	ldr	r0, [pc, #160]	; (8003de0 <sin+0xa8>)
 8003d40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003d44:	4281      	cmp	r1, r0
 8003d46:	dc07      	bgt.n	8003d58 <sin+0x20>
 8003d48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003dd8 <sin+0xa0>
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	b005      	add	sp, #20
 8003d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d54:	f000 b910 	b.w	8003f78 <__kernel_sin>
 8003d58:	4822      	ldr	r0, [pc, #136]	; (8003de4 <sin+0xac>)
 8003d5a:	4281      	cmp	r1, r0
 8003d5c:	dd09      	ble.n	8003d72 <sin+0x3a>
 8003d5e:	ee10 0a10 	vmov	r0, s0
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fc fa3c 	bl	80001e0 <__aeabi_dsub>
 8003d68:	ec41 0b10 	vmov	d0, r0, r1
 8003d6c:	b005      	add	sp, #20
 8003d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d72:	4668      	mov	r0, sp
 8003d74:	f000 f9c0 	bl	80040f8 <__ieee754_rem_pio2>
 8003d78:	f000 0003 	and.w	r0, r0, #3
 8003d7c:	2801      	cmp	r0, #1
 8003d7e:	d00c      	beq.n	8003d9a <sin+0x62>
 8003d80:	2802      	cmp	r0, #2
 8003d82:	d011      	beq.n	8003da8 <sin+0x70>
 8003d84:	b9f0      	cbnz	r0, 8003dc4 <sin+0x8c>
 8003d86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d8a:	ed9d 0b00 	vldr	d0, [sp]
 8003d8e:	2001      	movs	r0, #1
 8003d90:	f000 f8f2 	bl	8003f78 <__kernel_sin>
 8003d94:	ec51 0b10 	vmov	r0, r1, d0
 8003d98:	e7e6      	b.n	8003d68 <sin+0x30>
 8003d9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d9e:	ed9d 0b00 	vldr	d0, [sp]
 8003da2:	f000 f821 	bl	8003de8 <__kernel_cos>
 8003da6:	e7f5      	b.n	8003d94 <sin+0x5c>
 8003da8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dac:	ed9d 0b00 	vldr	d0, [sp]
 8003db0:	2001      	movs	r0, #1
 8003db2:	f000 f8e1 	bl	8003f78 <__kernel_sin>
 8003db6:	ec53 2b10 	vmov	r2, r3, d0
 8003dba:	ee10 0a10 	vmov	r0, s0
 8003dbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003dc2:	e7d1      	b.n	8003d68 <sin+0x30>
 8003dc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003dc8:	ed9d 0b00 	vldr	d0, [sp]
 8003dcc:	f000 f80c 	bl	8003de8 <__kernel_cos>
 8003dd0:	e7f1      	b.n	8003db6 <sin+0x7e>
 8003dd2:	bf00      	nop
 8003dd4:	f3af 8000 	nop.w
	...
 8003de0:	3fe921fb 	.word	0x3fe921fb
 8003de4:	7fefffff 	.word	0x7fefffff

08003de8 <__kernel_cos>:
 8003de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	ec57 6b10 	vmov	r6, r7, d0
 8003df0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003df4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003df8:	ed8d 1b00 	vstr	d1, [sp]
 8003dfc:	da07      	bge.n	8003e0e <__kernel_cos+0x26>
 8003dfe:	ee10 0a10 	vmov	r0, s0
 8003e02:	4639      	mov	r1, r7
 8003e04:	f7fc fe3e 	bl	8000a84 <__aeabi_d2iz>
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	f000 8088 	beq.w	8003f1e <__kernel_cos+0x136>
 8003e0e:	4632      	mov	r2, r6
 8003e10:	463b      	mov	r3, r7
 8003e12:	4630      	mov	r0, r6
 8003e14:	4639      	mov	r1, r7
 8003e16:	f7fc fb9b 	bl	8000550 <__aeabi_dmul>
 8003e1a:	4b51      	ldr	r3, [pc, #324]	; (8003f60 <__kernel_cos+0x178>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4604      	mov	r4, r0
 8003e20:	460d      	mov	r5, r1
 8003e22:	f7fc fb95 	bl	8000550 <__aeabi_dmul>
 8003e26:	a340      	add	r3, pc, #256	; (adr r3, 8003f28 <__kernel_cos+0x140>)
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	4682      	mov	sl, r0
 8003e2e:	468b      	mov	fp, r1
 8003e30:	4620      	mov	r0, r4
 8003e32:	4629      	mov	r1, r5
 8003e34:	f7fc fb8c 	bl	8000550 <__aeabi_dmul>
 8003e38:	a33d      	add	r3, pc, #244	; (adr r3, 8003f30 <__kernel_cos+0x148>)
 8003e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3e:	f7fc f9d1 	bl	80001e4 <__adddf3>
 8003e42:	4622      	mov	r2, r4
 8003e44:	462b      	mov	r3, r5
 8003e46:	f7fc fb83 	bl	8000550 <__aeabi_dmul>
 8003e4a:	a33b      	add	r3, pc, #236	; (adr r3, 8003f38 <__kernel_cos+0x150>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc f9c6 	bl	80001e0 <__aeabi_dsub>
 8003e54:	4622      	mov	r2, r4
 8003e56:	462b      	mov	r3, r5
 8003e58:	f7fc fb7a 	bl	8000550 <__aeabi_dmul>
 8003e5c:	a338      	add	r3, pc, #224	; (adr r3, 8003f40 <__kernel_cos+0x158>)
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f7fc f9bf 	bl	80001e4 <__adddf3>
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	f7fc fb71 	bl	8000550 <__aeabi_dmul>
 8003e6e:	a336      	add	r3, pc, #216	; (adr r3, 8003f48 <__kernel_cos+0x160>)
 8003e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e74:	f7fc f9b4 	bl	80001e0 <__aeabi_dsub>
 8003e78:	4622      	mov	r2, r4
 8003e7a:	462b      	mov	r3, r5
 8003e7c:	f7fc fb68 	bl	8000550 <__aeabi_dmul>
 8003e80:	a333      	add	r3, pc, #204	; (adr r3, 8003f50 <__kernel_cos+0x168>)
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f7fc f9ad 	bl	80001e4 <__adddf3>
 8003e8a:	4622      	mov	r2, r4
 8003e8c:	462b      	mov	r3, r5
 8003e8e:	f7fc fb5f 	bl	8000550 <__aeabi_dmul>
 8003e92:	4622      	mov	r2, r4
 8003e94:	462b      	mov	r3, r5
 8003e96:	f7fc fb5b 	bl	8000550 <__aeabi_dmul>
 8003e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	460d      	mov	r5, r1
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	4639      	mov	r1, r7
 8003ea6:	f7fc fb53 	bl	8000550 <__aeabi_dmul>
 8003eaa:	460b      	mov	r3, r1
 8003eac:	4602      	mov	r2, r0
 8003eae:	4629      	mov	r1, r5
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	f7fc f995 	bl	80001e0 <__aeabi_dsub>
 8003eb6:	4b2b      	ldr	r3, [pc, #172]	; (8003f64 <__kernel_cos+0x17c>)
 8003eb8:	4598      	cmp	r8, r3
 8003eba:	4606      	mov	r6, r0
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	dc10      	bgt.n	8003ee2 <__kernel_cos+0xfa>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	460b      	mov	r3, r1
 8003ec4:	4650      	mov	r0, sl
 8003ec6:	4659      	mov	r1, fp
 8003ec8:	f7fc f98a 	bl	80001e0 <__aeabi_dsub>
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4926      	ldr	r1, [pc, #152]	; (8003f68 <__kernel_cos+0x180>)
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fc f984 	bl	80001e0 <__aeabi_dsub>
 8003ed8:	ec41 0b10 	vmov	d0, r0, r1
 8003edc:	b003      	add	sp, #12
 8003ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <__kernel_cos+0x184>)
 8003ee4:	4920      	ldr	r1, [pc, #128]	; (8003f68 <__kernel_cos+0x180>)
 8003ee6:	4598      	cmp	r8, r3
 8003ee8:	bfcc      	ite	gt
 8003eea:	4d21      	ldrgt	r5, [pc, #132]	; (8003f70 <__kernel_cos+0x188>)
 8003eec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	4622      	mov	r2, r4
 8003ef4:	462b      	mov	r3, r5
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fc f972 	bl	80001e0 <__aeabi_dsub>
 8003efc:	4622      	mov	r2, r4
 8003efe:	4680      	mov	r8, r0
 8003f00:	4689      	mov	r9, r1
 8003f02:	462b      	mov	r3, r5
 8003f04:	4650      	mov	r0, sl
 8003f06:	4659      	mov	r1, fp
 8003f08:	f7fc f96a 	bl	80001e0 <__aeabi_dsub>
 8003f0c:	4632      	mov	r2, r6
 8003f0e:	463b      	mov	r3, r7
 8003f10:	f7fc f966 	bl	80001e0 <__aeabi_dsub>
 8003f14:	4602      	mov	r2, r0
 8003f16:	460b      	mov	r3, r1
 8003f18:	4640      	mov	r0, r8
 8003f1a:	4649      	mov	r1, r9
 8003f1c:	e7da      	b.n	8003ed4 <__kernel_cos+0xec>
 8003f1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003f58 <__kernel_cos+0x170>
 8003f22:	e7db      	b.n	8003edc <__kernel_cos+0xf4>
 8003f24:	f3af 8000 	nop.w
 8003f28:	be8838d4 	.word	0xbe8838d4
 8003f2c:	bda8fae9 	.word	0xbda8fae9
 8003f30:	bdb4b1c4 	.word	0xbdb4b1c4
 8003f34:	3e21ee9e 	.word	0x3e21ee9e
 8003f38:	809c52ad 	.word	0x809c52ad
 8003f3c:	3e927e4f 	.word	0x3e927e4f
 8003f40:	19cb1590 	.word	0x19cb1590
 8003f44:	3efa01a0 	.word	0x3efa01a0
 8003f48:	16c15177 	.word	0x16c15177
 8003f4c:	3f56c16c 	.word	0x3f56c16c
 8003f50:	5555554c 	.word	0x5555554c
 8003f54:	3fa55555 	.word	0x3fa55555
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	3ff00000 	.word	0x3ff00000
 8003f60:	3fe00000 	.word	0x3fe00000
 8003f64:	3fd33332 	.word	0x3fd33332
 8003f68:	3ff00000 	.word	0x3ff00000
 8003f6c:	3fe90000 	.word	0x3fe90000
 8003f70:	3fd20000 	.word	0x3fd20000
 8003f74:	00000000 	.word	0x00000000

08003f78 <__kernel_sin>:
 8003f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f7c:	ed2d 8b04 	vpush	{d8-d9}
 8003f80:	eeb0 8a41 	vmov.f32	s16, s2
 8003f84:	eef0 8a61 	vmov.f32	s17, s3
 8003f88:	ec55 4b10 	vmov	r4, r5, d0
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003f92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003f96:	9001      	str	r0, [sp, #4]
 8003f98:	da06      	bge.n	8003fa8 <__kernel_sin+0x30>
 8003f9a:	ee10 0a10 	vmov	r0, s0
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc fd70 	bl	8000a84 <__aeabi_d2iz>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d051      	beq.n	800404c <__kernel_sin+0xd4>
 8003fa8:	4622      	mov	r2, r4
 8003faa:	462b      	mov	r3, r5
 8003fac:	4620      	mov	r0, r4
 8003fae:	4629      	mov	r1, r5
 8003fb0:	f7fc face 	bl	8000550 <__aeabi_dmul>
 8003fb4:	4682      	mov	sl, r0
 8003fb6:	468b      	mov	fp, r1
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4620      	mov	r0, r4
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	f7fc fac6 	bl	8000550 <__aeabi_dmul>
 8003fc4:	a341      	add	r3, pc, #260	; (adr r3, 80040cc <__kernel_sin+0x154>)
 8003fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fca:	4680      	mov	r8, r0
 8003fcc:	4689      	mov	r9, r1
 8003fce:	4650      	mov	r0, sl
 8003fd0:	4659      	mov	r1, fp
 8003fd2:	f7fc fabd 	bl	8000550 <__aeabi_dmul>
 8003fd6:	a33f      	add	r3, pc, #252	; (adr r3, 80040d4 <__kernel_sin+0x15c>)
 8003fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fdc:	f7fc f900 	bl	80001e0 <__aeabi_dsub>
 8003fe0:	4652      	mov	r2, sl
 8003fe2:	465b      	mov	r3, fp
 8003fe4:	f7fc fab4 	bl	8000550 <__aeabi_dmul>
 8003fe8:	a33c      	add	r3, pc, #240	; (adr r3, 80040dc <__kernel_sin+0x164>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc f8f9 	bl	80001e4 <__adddf3>
 8003ff2:	4652      	mov	r2, sl
 8003ff4:	465b      	mov	r3, fp
 8003ff6:	f7fc faab 	bl	8000550 <__aeabi_dmul>
 8003ffa:	a33a      	add	r3, pc, #232	; (adr r3, 80040e4 <__kernel_sin+0x16c>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc f8ee 	bl	80001e0 <__aeabi_dsub>
 8004004:	4652      	mov	r2, sl
 8004006:	465b      	mov	r3, fp
 8004008:	f7fc faa2 	bl	8000550 <__aeabi_dmul>
 800400c:	a337      	add	r3, pc, #220	; (adr r3, 80040ec <__kernel_sin+0x174>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc f8e7 	bl	80001e4 <__adddf3>
 8004016:	9b01      	ldr	r3, [sp, #4]
 8004018:	4606      	mov	r6, r0
 800401a:	460f      	mov	r7, r1
 800401c:	b9eb      	cbnz	r3, 800405a <__kernel_sin+0xe2>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4650      	mov	r0, sl
 8004024:	4659      	mov	r1, fp
 8004026:	f7fc fa93 	bl	8000550 <__aeabi_dmul>
 800402a:	a325      	add	r3, pc, #148	; (adr r3, 80040c0 <__kernel_sin+0x148>)
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f7fc f8d6 	bl	80001e0 <__aeabi_dsub>
 8004034:	4642      	mov	r2, r8
 8004036:	464b      	mov	r3, r9
 8004038:	f7fc fa8a 	bl	8000550 <__aeabi_dmul>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc f8ce 	bl	80001e4 <__adddf3>
 8004048:	4604      	mov	r4, r0
 800404a:	460d      	mov	r5, r1
 800404c:	ec45 4b10 	vmov	d0, r4, r5
 8004050:	b003      	add	sp, #12
 8004052:	ecbd 8b04 	vpop	{d8-d9}
 8004056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <__kernel_sin+0x150>)
 800405c:	ec51 0b18 	vmov	r0, r1, d8
 8004060:	2200      	movs	r2, #0
 8004062:	f7fc fa75 	bl	8000550 <__aeabi_dmul>
 8004066:	4632      	mov	r2, r6
 8004068:	ec41 0b19 	vmov	d9, r0, r1
 800406c:	463b      	mov	r3, r7
 800406e:	4640      	mov	r0, r8
 8004070:	4649      	mov	r1, r9
 8004072:	f7fc fa6d 	bl	8000550 <__aeabi_dmul>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	ec51 0b19 	vmov	r0, r1, d9
 800407e:	f7fc f8af 	bl	80001e0 <__aeabi_dsub>
 8004082:	4652      	mov	r2, sl
 8004084:	465b      	mov	r3, fp
 8004086:	f7fc fa63 	bl	8000550 <__aeabi_dmul>
 800408a:	ec53 2b18 	vmov	r2, r3, d8
 800408e:	f7fc f8a7 	bl	80001e0 <__aeabi_dsub>
 8004092:	a30b      	add	r3, pc, #44	; (adr r3, 80040c0 <__kernel_sin+0x148>)
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	4606      	mov	r6, r0
 800409a:	460f      	mov	r7, r1
 800409c:	4640      	mov	r0, r8
 800409e:	4649      	mov	r1, r9
 80040a0:	f7fc fa56 	bl	8000550 <__aeabi_dmul>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4630      	mov	r0, r6
 80040aa:	4639      	mov	r1, r7
 80040ac:	f7fc f89a 	bl	80001e4 <__adddf3>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4620      	mov	r0, r4
 80040b6:	4629      	mov	r1, r5
 80040b8:	f7fc f892 	bl	80001e0 <__aeabi_dsub>
 80040bc:	e7c4      	b.n	8004048 <__kernel_sin+0xd0>
 80040be:	bf00      	nop
 80040c0:	55555549 	.word	0x55555549
 80040c4:	3fc55555 	.word	0x3fc55555
 80040c8:	3fe00000 	.word	0x3fe00000
 80040cc:	5acfd57c 	.word	0x5acfd57c
 80040d0:	3de5d93a 	.word	0x3de5d93a
 80040d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80040d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80040dc:	57b1fe7d 	.word	0x57b1fe7d
 80040e0:	3ec71de3 	.word	0x3ec71de3
 80040e4:	19c161d5 	.word	0x19c161d5
 80040e8:	3f2a01a0 	.word	0x3f2a01a0
 80040ec:	1110f8a6 	.word	0x1110f8a6
 80040f0:	3f811111 	.word	0x3f811111
 80040f4:	00000000 	.word	0x00000000

080040f8 <__ieee754_rem_pio2>:
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	ed2d 8b02 	vpush	{d8}
 8004100:	ec55 4b10 	vmov	r4, r5, d0
 8004104:	4bca      	ldr	r3, [pc, #808]	; (8004430 <__ieee754_rem_pio2+0x338>)
 8004106:	b08b      	sub	sp, #44	; 0x2c
 8004108:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800410c:	4598      	cmp	r8, r3
 800410e:	4682      	mov	sl, r0
 8004110:	9502      	str	r5, [sp, #8]
 8004112:	dc08      	bgt.n	8004126 <__ieee754_rem_pio2+0x2e>
 8004114:	2200      	movs	r2, #0
 8004116:	2300      	movs	r3, #0
 8004118:	ed80 0b00 	vstr	d0, [r0]
 800411c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004120:	f04f 0b00 	mov.w	fp, #0
 8004124:	e028      	b.n	8004178 <__ieee754_rem_pio2+0x80>
 8004126:	4bc3      	ldr	r3, [pc, #780]	; (8004434 <__ieee754_rem_pio2+0x33c>)
 8004128:	4598      	cmp	r8, r3
 800412a:	dc78      	bgt.n	800421e <__ieee754_rem_pio2+0x126>
 800412c:	9b02      	ldr	r3, [sp, #8]
 800412e:	4ec2      	ldr	r6, [pc, #776]	; (8004438 <__ieee754_rem_pio2+0x340>)
 8004130:	2b00      	cmp	r3, #0
 8004132:	ee10 0a10 	vmov	r0, s0
 8004136:	a3b0      	add	r3, pc, #704	; (adr r3, 80043f8 <__ieee754_rem_pio2+0x300>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	4629      	mov	r1, r5
 800413e:	dd39      	ble.n	80041b4 <__ieee754_rem_pio2+0xbc>
 8004140:	f7fc f84e 	bl	80001e0 <__aeabi_dsub>
 8004144:	45b0      	cmp	r8, r6
 8004146:	4604      	mov	r4, r0
 8004148:	460d      	mov	r5, r1
 800414a:	d01b      	beq.n	8004184 <__ieee754_rem_pio2+0x8c>
 800414c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004400 <__ieee754_rem_pio2+0x308>)
 800414e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004152:	f7fc f845 	bl	80001e0 <__aeabi_dsub>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	e9ca 2300 	strd	r2, r3, [sl]
 800415e:	4620      	mov	r0, r4
 8004160:	4629      	mov	r1, r5
 8004162:	f7fc f83d 	bl	80001e0 <__aeabi_dsub>
 8004166:	a3a6      	add	r3, pc, #664	; (adr r3, 8004400 <__ieee754_rem_pio2+0x308>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f7fc f838 	bl	80001e0 <__aeabi_dsub>
 8004170:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004174:	f04f 0b01 	mov.w	fp, #1
 8004178:	4658      	mov	r0, fp
 800417a:	b00b      	add	sp, #44	; 0x2c
 800417c:	ecbd 8b02 	vpop	{d8}
 8004180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004184:	a3a0      	add	r3, pc, #640	; (adr r3, 8004408 <__ieee754_rem_pio2+0x310>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f7fc f829 	bl	80001e0 <__aeabi_dsub>
 800418e:	a3a0      	add	r3, pc, #640	; (adr r3, 8004410 <__ieee754_rem_pio2+0x318>)
 8004190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004194:	4604      	mov	r4, r0
 8004196:	460d      	mov	r5, r1
 8004198:	f7fc f822 	bl	80001e0 <__aeabi_dsub>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	e9ca 2300 	strd	r2, r3, [sl]
 80041a4:	4620      	mov	r0, r4
 80041a6:	4629      	mov	r1, r5
 80041a8:	f7fc f81a 	bl	80001e0 <__aeabi_dsub>
 80041ac:	a398      	add	r3, pc, #608	; (adr r3, 8004410 <__ieee754_rem_pio2+0x318>)
 80041ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b2:	e7db      	b.n	800416c <__ieee754_rem_pio2+0x74>
 80041b4:	f7fc f816 	bl	80001e4 <__adddf3>
 80041b8:	45b0      	cmp	r8, r6
 80041ba:	4604      	mov	r4, r0
 80041bc:	460d      	mov	r5, r1
 80041be:	d016      	beq.n	80041ee <__ieee754_rem_pio2+0xf6>
 80041c0:	a38f      	add	r3, pc, #572	; (adr r3, 8004400 <__ieee754_rem_pio2+0x308>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f7fc f80d 	bl	80001e4 <__adddf3>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	e9ca 2300 	strd	r2, r3, [sl]
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f803 	bl	80001e0 <__aeabi_dsub>
 80041da:	a389      	add	r3, pc, #548	; (adr r3, 8004400 <__ieee754_rem_pio2+0x308>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc f800 	bl	80001e4 <__adddf3>
 80041e4:	f04f 3bff 	mov.w	fp, #4294967295
 80041e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041ec:	e7c4      	b.n	8004178 <__ieee754_rem_pio2+0x80>
 80041ee:	a386      	add	r3, pc, #536	; (adr r3, 8004408 <__ieee754_rem_pio2+0x310>)
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f7fb fff6 	bl	80001e4 <__adddf3>
 80041f8:	a385      	add	r3, pc, #532	; (adr r3, 8004410 <__ieee754_rem_pio2+0x318>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	4604      	mov	r4, r0
 8004200:	460d      	mov	r5, r1
 8004202:	f7fb ffef 	bl	80001e4 <__adddf3>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	e9ca 2300 	strd	r2, r3, [sl]
 800420e:	4620      	mov	r0, r4
 8004210:	4629      	mov	r1, r5
 8004212:	f7fb ffe5 	bl	80001e0 <__aeabi_dsub>
 8004216:	a37e      	add	r3, pc, #504	; (adr r3, 8004410 <__ieee754_rem_pio2+0x318>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	e7e0      	b.n	80041e0 <__ieee754_rem_pio2+0xe8>
 800421e:	4b87      	ldr	r3, [pc, #540]	; (800443c <__ieee754_rem_pio2+0x344>)
 8004220:	4598      	cmp	r8, r3
 8004222:	f300 80d8 	bgt.w	80043d6 <__ieee754_rem_pio2+0x2de>
 8004226:	f000 f96d 	bl	8004504 <fabs>
 800422a:	ec55 4b10 	vmov	r4, r5, d0
 800422e:	ee10 0a10 	vmov	r0, s0
 8004232:	a379      	add	r3, pc, #484	; (adr r3, 8004418 <__ieee754_rem_pio2+0x320>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	4629      	mov	r1, r5
 800423a:	f7fc f989 	bl	8000550 <__aeabi_dmul>
 800423e:	4b80      	ldr	r3, [pc, #512]	; (8004440 <__ieee754_rem_pio2+0x348>)
 8004240:	2200      	movs	r2, #0
 8004242:	f7fb ffcf 	bl	80001e4 <__adddf3>
 8004246:	f7fc fc1d 	bl	8000a84 <__aeabi_d2iz>
 800424a:	4683      	mov	fp, r0
 800424c:	f7fc f916 	bl	800047c <__aeabi_i2d>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	ec43 2b18 	vmov	d8, r2, r3
 8004258:	a367      	add	r3, pc, #412	; (adr r3, 80043f8 <__ieee754_rem_pio2+0x300>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f7fc f977 	bl	8000550 <__aeabi_dmul>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4620      	mov	r0, r4
 8004268:	4629      	mov	r1, r5
 800426a:	f7fb ffb9 	bl	80001e0 <__aeabi_dsub>
 800426e:	a364      	add	r3, pc, #400	; (adr r3, 8004400 <__ieee754_rem_pio2+0x308>)
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	4606      	mov	r6, r0
 8004276:	460f      	mov	r7, r1
 8004278:	ec51 0b18 	vmov	r0, r1, d8
 800427c:	f7fc f968 	bl	8000550 <__aeabi_dmul>
 8004280:	f1bb 0f1f 	cmp.w	fp, #31
 8004284:	4604      	mov	r4, r0
 8004286:	460d      	mov	r5, r1
 8004288:	dc0d      	bgt.n	80042a6 <__ieee754_rem_pio2+0x1ae>
 800428a:	4b6e      	ldr	r3, [pc, #440]	; (8004444 <__ieee754_rem_pio2+0x34c>)
 800428c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004294:	4543      	cmp	r3, r8
 8004296:	d006      	beq.n	80042a6 <__ieee754_rem_pio2+0x1ae>
 8004298:	4622      	mov	r2, r4
 800429a:	462b      	mov	r3, r5
 800429c:	4630      	mov	r0, r6
 800429e:	4639      	mov	r1, r7
 80042a0:	f7fb ff9e 	bl	80001e0 <__aeabi_dsub>
 80042a4:	e00e      	b.n	80042c4 <__ieee754_rem_pio2+0x1cc>
 80042a6:	462b      	mov	r3, r5
 80042a8:	4622      	mov	r2, r4
 80042aa:	4630      	mov	r0, r6
 80042ac:	4639      	mov	r1, r7
 80042ae:	f7fb ff97 	bl	80001e0 <__aeabi_dsub>
 80042b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80042b6:	9303      	str	r3, [sp, #12]
 80042b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80042bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	dc02      	bgt.n	80042ca <__ieee754_rem_pio2+0x1d2>
 80042c4:	e9ca 0100 	strd	r0, r1, [sl]
 80042c8:	e039      	b.n	800433e <__ieee754_rem_pio2+0x246>
 80042ca:	a34f      	add	r3, pc, #316	; (adr r3, 8004408 <__ieee754_rem_pio2+0x310>)
 80042cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d0:	ec51 0b18 	vmov	r0, r1, d8
 80042d4:	f7fc f93c 	bl	8000550 <__aeabi_dmul>
 80042d8:	4604      	mov	r4, r0
 80042da:	460d      	mov	r5, r1
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4630      	mov	r0, r6
 80042e2:	4639      	mov	r1, r7
 80042e4:	f7fb ff7c 	bl	80001e0 <__aeabi_dsub>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4680      	mov	r8, r0
 80042ee:	4689      	mov	r9, r1
 80042f0:	4630      	mov	r0, r6
 80042f2:	4639      	mov	r1, r7
 80042f4:	f7fb ff74 	bl	80001e0 <__aeabi_dsub>
 80042f8:	4622      	mov	r2, r4
 80042fa:	462b      	mov	r3, r5
 80042fc:	f7fb ff70 	bl	80001e0 <__aeabi_dsub>
 8004300:	a343      	add	r3, pc, #268	; (adr r3, 8004410 <__ieee754_rem_pio2+0x318>)
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	4604      	mov	r4, r0
 8004308:	460d      	mov	r5, r1
 800430a:	ec51 0b18 	vmov	r0, r1, d8
 800430e:	f7fc f91f 	bl	8000550 <__aeabi_dmul>
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	f7fb ff63 	bl	80001e0 <__aeabi_dsub>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4604      	mov	r4, r0
 8004320:	460d      	mov	r5, r1
 8004322:	4640      	mov	r0, r8
 8004324:	4649      	mov	r1, r9
 8004326:	f7fb ff5b 	bl	80001e0 <__aeabi_dsub>
 800432a:	9a03      	ldr	r2, [sp, #12]
 800432c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b31      	cmp	r3, #49	; 0x31
 8004334:	dc24      	bgt.n	8004380 <__ieee754_rem_pio2+0x288>
 8004336:	e9ca 0100 	strd	r0, r1, [sl]
 800433a:	4646      	mov	r6, r8
 800433c:	464f      	mov	r7, r9
 800433e:	e9da 8900 	ldrd	r8, r9, [sl]
 8004342:	4630      	mov	r0, r6
 8004344:	4642      	mov	r2, r8
 8004346:	464b      	mov	r3, r9
 8004348:	4639      	mov	r1, r7
 800434a:	f7fb ff49 	bl	80001e0 <__aeabi_dsub>
 800434e:	462b      	mov	r3, r5
 8004350:	4622      	mov	r2, r4
 8004352:	f7fb ff45 	bl	80001e0 <__aeabi_dsub>
 8004356:	9b02      	ldr	r3, [sp, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800435e:	f6bf af0b 	bge.w	8004178 <__ieee754_rem_pio2+0x80>
 8004362:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004366:	f8ca 3004 	str.w	r3, [sl, #4]
 800436a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800436e:	f8ca 8000 	str.w	r8, [sl]
 8004372:	f8ca 0008 	str.w	r0, [sl, #8]
 8004376:	f8ca 300c 	str.w	r3, [sl, #12]
 800437a:	f1cb 0b00 	rsb	fp, fp, #0
 800437e:	e6fb      	b.n	8004178 <__ieee754_rem_pio2+0x80>
 8004380:	a327      	add	r3, pc, #156	; (adr r3, 8004420 <__ieee754_rem_pio2+0x328>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	ec51 0b18 	vmov	r0, r1, d8
 800438a:	f7fc f8e1 	bl	8000550 <__aeabi_dmul>
 800438e:	4604      	mov	r4, r0
 8004390:	460d      	mov	r5, r1
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4640      	mov	r0, r8
 8004398:	4649      	mov	r1, r9
 800439a:	f7fb ff21 	bl	80001e0 <__aeabi_dsub>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4606      	mov	r6, r0
 80043a4:	460f      	mov	r7, r1
 80043a6:	4640      	mov	r0, r8
 80043a8:	4649      	mov	r1, r9
 80043aa:	f7fb ff19 	bl	80001e0 <__aeabi_dsub>
 80043ae:	4622      	mov	r2, r4
 80043b0:	462b      	mov	r3, r5
 80043b2:	f7fb ff15 	bl	80001e0 <__aeabi_dsub>
 80043b6:	a31c      	add	r3, pc, #112	; (adr r3, 8004428 <__ieee754_rem_pio2+0x330>)
 80043b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043bc:	4604      	mov	r4, r0
 80043be:	460d      	mov	r5, r1
 80043c0:	ec51 0b18 	vmov	r0, r1, d8
 80043c4:	f7fc f8c4 	bl	8000550 <__aeabi_dmul>
 80043c8:	4622      	mov	r2, r4
 80043ca:	462b      	mov	r3, r5
 80043cc:	f7fb ff08 	bl	80001e0 <__aeabi_dsub>
 80043d0:	4604      	mov	r4, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	e760      	b.n	8004298 <__ieee754_rem_pio2+0x1a0>
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <__ieee754_rem_pio2+0x350>)
 80043d8:	4598      	cmp	r8, r3
 80043da:	dd37      	ble.n	800444c <__ieee754_rem_pio2+0x354>
 80043dc:	ee10 2a10 	vmov	r2, s0
 80043e0:	462b      	mov	r3, r5
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	f7fb fefb 	bl	80001e0 <__aeabi_dsub>
 80043ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80043ee:	e9ca 0100 	strd	r0, r1, [sl]
 80043f2:	e695      	b.n	8004120 <__ieee754_rem_pio2+0x28>
 80043f4:	f3af 8000 	nop.w
 80043f8:	54400000 	.word	0x54400000
 80043fc:	3ff921fb 	.word	0x3ff921fb
 8004400:	1a626331 	.word	0x1a626331
 8004404:	3dd0b461 	.word	0x3dd0b461
 8004408:	1a600000 	.word	0x1a600000
 800440c:	3dd0b461 	.word	0x3dd0b461
 8004410:	2e037073 	.word	0x2e037073
 8004414:	3ba3198a 	.word	0x3ba3198a
 8004418:	6dc9c883 	.word	0x6dc9c883
 800441c:	3fe45f30 	.word	0x3fe45f30
 8004420:	2e000000 	.word	0x2e000000
 8004424:	3ba3198a 	.word	0x3ba3198a
 8004428:	252049c1 	.word	0x252049c1
 800442c:	397b839a 	.word	0x397b839a
 8004430:	3fe921fb 	.word	0x3fe921fb
 8004434:	4002d97b 	.word	0x4002d97b
 8004438:	3ff921fb 	.word	0x3ff921fb
 800443c:	413921fb 	.word	0x413921fb
 8004440:	3fe00000 	.word	0x3fe00000
 8004444:	08004e00 	.word	0x08004e00
 8004448:	7fefffff 	.word	0x7fefffff
 800444c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004450:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004454:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004458:	4620      	mov	r0, r4
 800445a:	460d      	mov	r5, r1
 800445c:	f7fc fb12 	bl	8000a84 <__aeabi_d2iz>
 8004460:	f7fc f80c 	bl	800047c <__aeabi_i2d>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4620      	mov	r0, r4
 800446a:	4629      	mov	r1, r5
 800446c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004470:	f7fb feb6 	bl	80001e0 <__aeabi_dsub>
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <__ieee754_rem_pio2+0x404>)
 8004476:	2200      	movs	r2, #0
 8004478:	f7fc f86a 	bl	8000550 <__aeabi_dmul>
 800447c:	460d      	mov	r5, r1
 800447e:	4604      	mov	r4, r0
 8004480:	f7fc fb00 	bl	8000a84 <__aeabi_d2iz>
 8004484:	f7fb fffa 	bl	800047c <__aeabi_i2d>
 8004488:	4602      	mov	r2, r0
 800448a:	460b      	mov	r3, r1
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004494:	f7fb fea4 	bl	80001e0 <__aeabi_dsub>
 8004498:	4b18      	ldr	r3, [pc, #96]	; (80044fc <__ieee754_rem_pio2+0x404>)
 800449a:	2200      	movs	r2, #0
 800449c:	f7fc f858 	bl	8000550 <__aeabi_dmul>
 80044a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80044a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80044a8:	2703      	movs	r7, #3
 80044aa:	2400      	movs	r4, #0
 80044ac:	2500      	movs	r5, #0
 80044ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80044b2:	4622      	mov	r2, r4
 80044b4:	462b      	mov	r3, r5
 80044b6:	46b9      	mov	r9, r7
 80044b8:	3f01      	subs	r7, #1
 80044ba:	f7fc fab1 	bl	8000a20 <__aeabi_dcmpeq>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d1f5      	bne.n	80044ae <__ieee754_rem_pio2+0x3b6>
 80044c2:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <__ieee754_rem_pio2+0x408>)
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	2302      	movs	r3, #2
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4632      	mov	r2, r6
 80044cc:	464b      	mov	r3, r9
 80044ce:	4651      	mov	r1, sl
 80044d0:	a804      	add	r0, sp, #16
 80044d2:	f000 f821 	bl	8004518 <__kernel_rem_pio2>
 80044d6:	9b02      	ldr	r3, [sp, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	4683      	mov	fp, r0
 80044dc:	f6bf ae4c 	bge.w	8004178 <__ieee754_rem_pio2+0x80>
 80044e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80044e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044e8:	e9ca 2300 	strd	r2, r3, [sl]
 80044ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80044f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80044f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80044f8:	e73f      	b.n	800437a <__ieee754_rem_pio2+0x282>
 80044fa:	bf00      	nop
 80044fc:	41700000 	.word	0x41700000
 8004500:	08004e80 	.word	0x08004e80

08004504 <fabs>:
 8004504:	ec51 0b10 	vmov	r0, r1, d0
 8004508:	ee10 2a10 	vmov	r2, s0
 800450c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004510:	ec43 2b10 	vmov	d0, r2, r3
 8004514:	4770      	bx	lr
	...

08004518 <__kernel_rem_pio2>:
 8004518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451c:	ed2d 8b02 	vpush	{d8}
 8004520:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004524:	f112 0f14 	cmn.w	r2, #20
 8004528:	9306      	str	r3, [sp, #24]
 800452a:	9104      	str	r1, [sp, #16]
 800452c:	4bc2      	ldr	r3, [pc, #776]	; (8004838 <__kernel_rem_pio2+0x320>)
 800452e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004530:	9009      	str	r0, [sp, #36]	; 0x24
 8004532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	9b06      	ldr	r3, [sp, #24]
 800453a:	f103 33ff 	add.w	r3, r3, #4294967295
 800453e:	bfa8      	it	ge
 8004540:	1ed4      	subge	r4, r2, #3
 8004542:	9305      	str	r3, [sp, #20]
 8004544:	bfb2      	itee	lt
 8004546:	2400      	movlt	r4, #0
 8004548:	2318      	movge	r3, #24
 800454a:	fb94 f4f3 	sdivge	r4, r4, r3
 800454e:	f06f 0317 	mvn.w	r3, #23
 8004552:	fb04 3303 	mla	r3, r4, r3, r3
 8004556:	eb03 0a02 	add.w	sl, r3, r2
 800455a:	9b00      	ldr	r3, [sp, #0]
 800455c:	9a05      	ldr	r2, [sp, #20]
 800455e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004828 <__kernel_rem_pio2+0x310>
 8004562:	eb03 0802 	add.w	r8, r3, r2
 8004566:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004568:	1aa7      	subs	r7, r4, r2
 800456a:	ae20      	add	r6, sp, #128	; 0x80
 800456c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004570:	2500      	movs	r5, #0
 8004572:	4545      	cmp	r5, r8
 8004574:	dd13      	ble.n	800459e <__kernel_rem_pio2+0x86>
 8004576:	9b06      	ldr	r3, [sp, #24]
 8004578:	aa20      	add	r2, sp, #128	; 0x80
 800457a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800457e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004582:	f04f 0800 	mov.w	r8, #0
 8004586:	9b00      	ldr	r3, [sp, #0]
 8004588:	4598      	cmp	r8, r3
 800458a:	dc31      	bgt.n	80045f0 <__kernel_rem_pio2+0xd8>
 800458c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004828 <__kernel_rem_pio2+0x310>
 8004590:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004594:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004598:	462f      	mov	r7, r5
 800459a:	2600      	movs	r6, #0
 800459c:	e01b      	b.n	80045d6 <__kernel_rem_pio2+0xbe>
 800459e:	42ef      	cmn	r7, r5
 80045a0:	d407      	bmi.n	80045b2 <__kernel_rem_pio2+0x9a>
 80045a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80045a6:	f7fb ff69 	bl	800047c <__aeabi_i2d>
 80045aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80045ae:	3501      	adds	r5, #1
 80045b0:	e7df      	b.n	8004572 <__kernel_rem_pio2+0x5a>
 80045b2:	ec51 0b18 	vmov	r0, r1, d8
 80045b6:	e7f8      	b.n	80045aa <__kernel_rem_pio2+0x92>
 80045b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80045c0:	f7fb ffc6 	bl	8000550 <__aeabi_dmul>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045cc:	f7fb fe0a 	bl	80001e4 <__adddf3>
 80045d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d4:	3601      	adds	r6, #1
 80045d6:	9b05      	ldr	r3, [sp, #20]
 80045d8:	429e      	cmp	r6, r3
 80045da:	f1a7 0708 	sub.w	r7, r7, #8
 80045de:	ddeb      	ble.n	80045b8 <__kernel_rem_pio2+0xa0>
 80045e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80045e4:	f108 0801 	add.w	r8, r8, #1
 80045e8:	ecab 7b02 	vstmia	fp!, {d7}
 80045ec:	3508      	adds	r5, #8
 80045ee:	e7ca      	b.n	8004586 <__kernel_rem_pio2+0x6e>
 80045f0:	9b00      	ldr	r3, [sp, #0]
 80045f2:	aa0c      	add	r2, sp, #48	; 0x30
 80045f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80045f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80045fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004600:	9c00      	ldr	r4, [sp, #0]
 8004602:	930a      	str	r3, [sp, #40]	; 0x28
 8004604:	00e3      	lsls	r3, r4, #3
 8004606:	9308      	str	r3, [sp, #32]
 8004608:	ab98      	add	r3, sp, #608	; 0x260
 800460a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800460e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004612:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8004616:	ab70      	add	r3, sp, #448	; 0x1c0
 8004618:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800461c:	46c3      	mov	fp, r8
 800461e:	46a1      	mov	r9, r4
 8004620:	f1b9 0f00 	cmp.w	r9, #0
 8004624:	f1a5 0508 	sub.w	r5, r5, #8
 8004628:	dc77      	bgt.n	800471a <__kernel_rem_pio2+0x202>
 800462a:	ec47 6b10 	vmov	d0, r6, r7
 800462e:	4650      	mov	r0, sl
 8004630:	f000 fac2 	bl	8004bb8 <scalbn>
 8004634:	ec57 6b10 	vmov	r6, r7, d0
 8004638:	2200      	movs	r2, #0
 800463a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800463e:	ee10 0a10 	vmov	r0, s0
 8004642:	4639      	mov	r1, r7
 8004644:	f7fb ff84 	bl	8000550 <__aeabi_dmul>
 8004648:	ec41 0b10 	vmov	d0, r0, r1
 800464c:	f000 fb34 	bl	8004cb8 <floor>
 8004650:	4b7a      	ldr	r3, [pc, #488]	; (800483c <__kernel_rem_pio2+0x324>)
 8004652:	ec51 0b10 	vmov	r0, r1, d0
 8004656:	2200      	movs	r2, #0
 8004658:	f7fb ff7a 	bl	8000550 <__aeabi_dmul>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4630      	mov	r0, r6
 8004662:	4639      	mov	r1, r7
 8004664:	f7fb fdbc 	bl	80001e0 <__aeabi_dsub>
 8004668:	460f      	mov	r7, r1
 800466a:	4606      	mov	r6, r0
 800466c:	f7fc fa0a 	bl	8000a84 <__aeabi_d2iz>
 8004670:	9002      	str	r0, [sp, #8]
 8004672:	f7fb ff03 	bl	800047c <__aeabi_i2d>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4630      	mov	r0, r6
 800467c:	4639      	mov	r1, r7
 800467e:	f7fb fdaf 	bl	80001e0 <__aeabi_dsub>
 8004682:	f1ba 0f00 	cmp.w	sl, #0
 8004686:	4606      	mov	r6, r0
 8004688:	460f      	mov	r7, r1
 800468a:	dd6d      	ble.n	8004768 <__kernel_rem_pio2+0x250>
 800468c:	1e61      	subs	r1, r4, #1
 800468e:	ab0c      	add	r3, sp, #48	; 0x30
 8004690:	9d02      	ldr	r5, [sp, #8]
 8004692:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004696:	f1ca 0018 	rsb	r0, sl, #24
 800469a:	fa43 f200 	asr.w	r2, r3, r0
 800469e:	4415      	add	r5, r2
 80046a0:	4082      	lsls	r2, r0
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	aa0c      	add	r2, sp, #48	; 0x30
 80046a6:	9502      	str	r5, [sp, #8]
 80046a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80046ac:	f1ca 0217 	rsb	r2, sl, #23
 80046b0:	fa43 fb02 	asr.w	fp, r3, r2
 80046b4:	f1bb 0f00 	cmp.w	fp, #0
 80046b8:	dd65      	ble.n	8004786 <__kernel_rem_pio2+0x26e>
 80046ba:	9b02      	ldr	r3, [sp, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	3301      	adds	r3, #1
 80046c0:	9302      	str	r3, [sp, #8]
 80046c2:	4615      	mov	r5, r2
 80046c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80046c8:	4294      	cmp	r4, r2
 80046ca:	f300 809f 	bgt.w	800480c <__kernel_rem_pio2+0x2f4>
 80046ce:	f1ba 0f00 	cmp.w	sl, #0
 80046d2:	dd07      	ble.n	80046e4 <__kernel_rem_pio2+0x1cc>
 80046d4:	f1ba 0f01 	cmp.w	sl, #1
 80046d8:	f000 80c1 	beq.w	800485e <__kernel_rem_pio2+0x346>
 80046dc:	f1ba 0f02 	cmp.w	sl, #2
 80046e0:	f000 80c7 	beq.w	8004872 <__kernel_rem_pio2+0x35a>
 80046e4:	f1bb 0f02 	cmp.w	fp, #2
 80046e8:	d14d      	bne.n	8004786 <__kernel_rem_pio2+0x26e>
 80046ea:	4632      	mov	r2, r6
 80046ec:	463b      	mov	r3, r7
 80046ee:	4954      	ldr	r1, [pc, #336]	; (8004840 <__kernel_rem_pio2+0x328>)
 80046f0:	2000      	movs	r0, #0
 80046f2:	f7fb fd75 	bl	80001e0 <__aeabi_dsub>
 80046f6:	4606      	mov	r6, r0
 80046f8:	460f      	mov	r7, r1
 80046fa:	2d00      	cmp	r5, #0
 80046fc:	d043      	beq.n	8004786 <__kernel_rem_pio2+0x26e>
 80046fe:	4650      	mov	r0, sl
 8004700:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004830 <__kernel_rem_pio2+0x318>
 8004704:	f000 fa58 	bl	8004bb8 <scalbn>
 8004708:	4630      	mov	r0, r6
 800470a:	4639      	mov	r1, r7
 800470c:	ec53 2b10 	vmov	r2, r3, d0
 8004710:	f7fb fd66 	bl	80001e0 <__aeabi_dsub>
 8004714:	4606      	mov	r6, r0
 8004716:	460f      	mov	r7, r1
 8004718:	e035      	b.n	8004786 <__kernel_rem_pio2+0x26e>
 800471a:	4b4a      	ldr	r3, [pc, #296]	; (8004844 <__kernel_rem_pio2+0x32c>)
 800471c:	2200      	movs	r2, #0
 800471e:	4630      	mov	r0, r6
 8004720:	4639      	mov	r1, r7
 8004722:	f7fb ff15 	bl	8000550 <__aeabi_dmul>
 8004726:	f7fc f9ad 	bl	8000a84 <__aeabi_d2iz>
 800472a:	f7fb fea7 	bl	800047c <__aeabi_i2d>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	ec43 2b18 	vmov	d8, r2, r3
 8004736:	4b44      	ldr	r3, [pc, #272]	; (8004848 <__kernel_rem_pio2+0x330>)
 8004738:	2200      	movs	r2, #0
 800473a:	f7fb ff09 	bl	8000550 <__aeabi_dmul>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4630      	mov	r0, r6
 8004744:	4639      	mov	r1, r7
 8004746:	f7fb fd4b 	bl	80001e0 <__aeabi_dsub>
 800474a:	f7fc f99b 	bl	8000a84 <__aeabi_d2iz>
 800474e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004752:	f84b 0b04 	str.w	r0, [fp], #4
 8004756:	ec51 0b18 	vmov	r0, r1, d8
 800475a:	f7fb fd43 	bl	80001e4 <__adddf3>
 800475e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004762:	4606      	mov	r6, r0
 8004764:	460f      	mov	r7, r1
 8004766:	e75b      	b.n	8004620 <__kernel_rem_pio2+0x108>
 8004768:	d106      	bne.n	8004778 <__kernel_rem_pio2+0x260>
 800476a:	1e63      	subs	r3, r4, #1
 800476c:	aa0c      	add	r2, sp, #48	; 0x30
 800476e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004772:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004776:	e79d      	b.n	80046b4 <__kernel_rem_pio2+0x19c>
 8004778:	4b34      	ldr	r3, [pc, #208]	; (800484c <__kernel_rem_pio2+0x334>)
 800477a:	2200      	movs	r2, #0
 800477c:	f7fc f96e 	bl	8000a5c <__aeabi_dcmpge>
 8004780:	2800      	cmp	r0, #0
 8004782:	d140      	bne.n	8004806 <__kernel_rem_pio2+0x2ee>
 8004784:	4683      	mov	fp, r0
 8004786:	2200      	movs	r2, #0
 8004788:	2300      	movs	r3, #0
 800478a:	4630      	mov	r0, r6
 800478c:	4639      	mov	r1, r7
 800478e:	f7fc f947 	bl	8000a20 <__aeabi_dcmpeq>
 8004792:	2800      	cmp	r0, #0
 8004794:	f000 80c1 	beq.w	800491a <__kernel_rem_pio2+0x402>
 8004798:	1e65      	subs	r5, r4, #1
 800479a:	462b      	mov	r3, r5
 800479c:	2200      	movs	r2, #0
 800479e:	9900      	ldr	r1, [sp, #0]
 80047a0:	428b      	cmp	r3, r1
 80047a2:	da6d      	bge.n	8004880 <__kernel_rem_pio2+0x368>
 80047a4:	2a00      	cmp	r2, #0
 80047a6:	f000 808a 	beq.w	80048be <__kernel_rem_pio2+0x3a6>
 80047aa:	ab0c      	add	r3, sp, #48	; 0x30
 80047ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80047b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80ae 	beq.w	8004916 <__kernel_rem_pio2+0x3fe>
 80047ba:	4650      	mov	r0, sl
 80047bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004830 <__kernel_rem_pio2+0x318>
 80047c0:	f000 f9fa 	bl	8004bb8 <scalbn>
 80047c4:	1c6b      	adds	r3, r5, #1
 80047c6:	00da      	lsls	r2, r3, #3
 80047c8:	9205      	str	r2, [sp, #20]
 80047ca:	ec57 6b10 	vmov	r6, r7, d0
 80047ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80047d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004844 <__kernel_rem_pio2+0x32c>
 80047d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80047d8:	462c      	mov	r4, r5
 80047da:	f04f 0800 	mov.w	r8, #0
 80047de:	2c00      	cmp	r4, #0
 80047e0:	f280 80d4 	bge.w	800498c <__kernel_rem_pio2+0x474>
 80047e4:	462c      	mov	r4, r5
 80047e6:	2c00      	cmp	r4, #0
 80047e8:	f2c0 8102 	blt.w	80049f0 <__kernel_rem_pio2+0x4d8>
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <__kernel_rem_pio2+0x338>)
 80047ee:	461e      	mov	r6, r3
 80047f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80047f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80047f6:	1b2b      	subs	r3, r5, r4
 80047f8:	f04f 0900 	mov.w	r9, #0
 80047fc:	f04f 0a00 	mov.w	sl, #0
 8004800:	2700      	movs	r7, #0
 8004802:	9306      	str	r3, [sp, #24]
 8004804:	e0e6      	b.n	80049d4 <__kernel_rem_pio2+0x4bc>
 8004806:	f04f 0b02 	mov.w	fp, #2
 800480a:	e756      	b.n	80046ba <__kernel_rem_pio2+0x1a2>
 800480c:	f8d8 3000 	ldr.w	r3, [r8]
 8004810:	bb05      	cbnz	r5, 8004854 <__kernel_rem_pio2+0x33c>
 8004812:	b123      	cbz	r3, 800481e <__kernel_rem_pio2+0x306>
 8004814:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004818:	f8c8 3000 	str.w	r3, [r8]
 800481c:	2301      	movs	r3, #1
 800481e:	3201      	adds	r2, #1
 8004820:	f108 0804 	add.w	r8, r8, #4
 8004824:	461d      	mov	r5, r3
 8004826:	e74f      	b.n	80046c8 <__kernel_rem_pio2+0x1b0>
	...
 8004834:	3ff00000 	.word	0x3ff00000
 8004838:	08004fc8 	.word	0x08004fc8
 800483c:	40200000 	.word	0x40200000
 8004840:	3ff00000 	.word	0x3ff00000
 8004844:	3e700000 	.word	0x3e700000
 8004848:	41700000 	.word	0x41700000
 800484c:	3fe00000 	.word	0x3fe00000
 8004850:	08004f88 	.word	0x08004f88
 8004854:	1acb      	subs	r3, r1, r3
 8004856:	f8c8 3000 	str.w	r3, [r8]
 800485a:	462b      	mov	r3, r5
 800485c:	e7df      	b.n	800481e <__kernel_rem_pio2+0x306>
 800485e:	1e62      	subs	r2, r4, #1
 8004860:	ab0c      	add	r3, sp, #48	; 0x30
 8004862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004866:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800486a:	a90c      	add	r1, sp, #48	; 0x30
 800486c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004870:	e738      	b.n	80046e4 <__kernel_rem_pio2+0x1cc>
 8004872:	1e62      	subs	r2, r4, #1
 8004874:	ab0c      	add	r3, sp, #48	; 0x30
 8004876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800487a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800487e:	e7f4      	b.n	800486a <__kernel_rem_pio2+0x352>
 8004880:	a90c      	add	r1, sp, #48	; 0x30
 8004882:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004886:	3b01      	subs	r3, #1
 8004888:	430a      	orrs	r2, r1
 800488a:	e788      	b.n	800479e <__kernel_rem_pio2+0x286>
 800488c:	3301      	adds	r3, #1
 800488e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004892:	2900      	cmp	r1, #0
 8004894:	d0fa      	beq.n	800488c <__kernel_rem_pio2+0x374>
 8004896:	9a08      	ldr	r2, [sp, #32]
 8004898:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800489c:	446a      	add	r2, sp
 800489e:	3a98      	subs	r2, #152	; 0x98
 80048a0:	9208      	str	r2, [sp, #32]
 80048a2:	9a06      	ldr	r2, [sp, #24]
 80048a4:	a920      	add	r1, sp, #128	; 0x80
 80048a6:	18a2      	adds	r2, r4, r2
 80048a8:	18e3      	adds	r3, r4, r3
 80048aa:	f104 0801 	add.w	r8, r4, #1
 80048ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80048b2:	9302      	str	r3, [sp, #8]
 80048b4:	9b02      	ldr	r3, [sp, #8]
 80048b6:	4543      	cmp	r3, r8
 80048b8:	da04      	bge.n	80048c4 <__kernel_rem_pio2+0x3ac>
 80048ba:	461c      	mov	r4, r3
 80048bc:	e6a2      	b.n	8004604 <__kernel_rem_pio2+0xec>
 80048be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048c0:	2301      	movs	r3, #1
 80048c2:	e7e4      	b.n	800488e <__kernel_rem_pio2+0x376>
 80048c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80048ca:	f7fb fdd7 	bl	800047c <__aeabi_i2d>
 80048ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80048d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d4:	46ab      	mov	fp, r5
 80048d6:	461c      	mov	r4, r3
 80048d8:	f04f 0900 	mov.w	r9, #0
 80048dc:	2600      	movs	r6, #0
 80048de:	2700      	movs	r7, #0
 80048e0:	9b05      	ldr	r3, [sp, #20]
 80048e2:	4599      	cmp	r9, r3
 80048e4:	dd06      	ble.n	80048f4 <__kernel_rem_pio2+0x3dc>
 80048e6:	9b08      	ldr	r3, [sp, #32]
 80048e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80048ec:	f108 0801 	add.w	r8, r8, #1
 80048f0:	9308      	str	r3, [sp, #32]
 80048f2:	e7df      	b.n	80048b4 <__kernel_rem_pio2+0x39c>
 80048f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80048f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80048fc:	f7fb fe28 	bl	8000550 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4630      	mov	r0, r6
 8004906:	4639      	mov	r1, r7
 8004908:	f7fb fc6c 	bl	80001e4 <__adddf3>
 800490c:	f109 0901 	add.w	r9, r9, #1
 8004910:	4606      	mov	r6, r0
 8004912:	460f      	mov	r7, r1
 8004914:	e7e4      	b.n	80048e0 <__kernel_rem_pio2+0x3c8>
 8004916:	3d01      	subs	r5, #1
 8004918:	e747      	b.n	80047aa <__kernel_rem_pio2+0x292>
 800491a:	ec47 6b10 	vmov	d0, r6, r7
 800491e:	f1ca 0000 	rsb	r0, sl, #0
 8004922:	f000 f949 	bl	8004bb8 <scalbn>
 8004926:	ec57 6b10 	vmov	r6, r7, d0
 800492a:	4ba0      	ldr	r3, [pc, #640]	; (8004bac <__kernel_rem_pio2+0x694>)
 800492c:	ee10 0a10 	vmov	r0, s0
 8004930:	2200      	movs	r2, #0
 8004932:	4639      	mov	r1, r7
 8004934:	f7fc f892 	bl	8000a5c <__aeabi_dcmpge>
 8004938:	b1f8      	cbz	r0, 800497a <__kernel_rem_pio2+0x462>
 800493a:	4b9d      	ldr	r3, [pc, #628]	; (8004bb0 <__kernel_rem_pio2+0x698>)
 800493c:	2200      	movs	r2, #0
 800493e:	4630      	mov	r0, r6
 8004940:	4639      	mov	r1, r7
 8004942:	f7fb fe05 	bl	8000550 <__aeabi_dmul>
 8004946:	f7fc f89d 	bl	8000a84 <__aeabi_d2iz>
 800494a:	4680      	mov	r8, r0
 800494c:	f7fb fd96 	bl	800047c <__aeabi_i2d>
 8004950:	4b96      	ldr	r3, [pc, #600]	; (8004bac <__kernel_rem_pio2+0x694>)
 8004952:	2200      	movs	r2, #0
 8004954:	f7fb fdfc 	bl	8000550 <__aeabi_dmul>
 8004958:	460b      	mov	r3, r1
 800495a:	4602      	mov	r2, r0
 800495c:	4639      	mov	r1, r7
 800495e:	4630      	mov	r0, r6
 8004960:	f7fb fc3e 	bl	80001e0 <__aeabi_dsub>
 8004964:	f7fc f88e 	bl	8000a84 <__aeabi_d2iz>
 8004968:	1c65      	adds	r5, r4, #1
 800496a:	ab0c      	add	r3, sp, #48	; 0x30
 800496c:	f10a 0a18 	add.w	sl, sl, #24
 8004970:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004974:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004978:	e71f      	b.n	80047ba <__kernel_rem_pio2+0x2a2>
 800497a:	4630      	mov	r0, r6
 800497c:	4639      	mov	r1, r7
 800497e:	f7fc f881 	bl	8000a84 <__aeabi_d2iz>
 8004982:	ab0c      	add	r3, sp, #48	; 0x30
 8004984:	4625      	mov	r5, r4
 8004986:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800498a:	e716      	b.n	80047ba <__kernel_rem_pio2+0x2a2>
 800498c:	ab0c      	add	r3, sp, #48	; 0x30
 800498e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004992:	f7fb fd73 	bl	800047c <__aeabi_i2d>
 8004996:	4632      	mov	r2, r6
 8004998:	463b      	mov	r3, r7
 800499a:	f7fb fdd9 	bl	8000550 <__aeabi_dmul>
 800499e:	4642      	mov	r2, r8
 80049a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80049a4:	464b      	mov	r3, r9
 80049a6:	4630      	mov	r0, r6
 80049a8:	4639      	mov	r1, r7
 80049aa:	f7fb fdd1 	bl	8000550 <__aeabi_dmul>
 80049ae:	3c01      	subs	r4, #1
 80049b0:	4606      	mov	r6, r0
 80049b2:	460f      	mov	r7, r1
 80049b4:	e713      	b.n	80047de <__kernel_rem_pio2+0x2c6>
 80049b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80049ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80049be:	f7fb fdc7 	bl	8000550 <__aeabi_dmul>
 80049c2:	4602      	mov	r2, r0
 80049c4:	460b      	mov	r3, r1
 80049c6:	4648      	mov	r0, r9
 80049c8:	4651      	mov	r1, sl
 80049ca:	f7fb fc0b 	bl	80001e4 <__adddf3>
 80049ce:	3701      	adds	r7, #1
 80049d0:	4681      	mov	r9, r0
 80049d2:	468a      	mov	sl, r1
 80049d4:	9b00      	ldr	r3, [sp, #0]
 80049d6:	429f      	cmp	r7, r3
 80049d8:	dc02      	bgt.n	80049e0 <__kernel_rem_pio2+0x4c8>
 80049da:	9b06      	ldr	r3, [sp, #24]
 80049dc:	429f      	cmp	r7, r3
 80049de:	ddea      	ble.n	80049b6 <__kernel_rem_pio2+0x49e>
 80049e0:	9a06      	ldr	r2, [sp, #24]
 80049e2:	ab48      	add	r3, sp, #288	; 0x120
 80049e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80049e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80049ec:	3c01      	subs	r4, #1
 80049ee:	e6fa      	b.n	80047e6 <__kernel_rem_pio2+0x2ce>
 80049f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	dc0b      	bgt.n	8004a0e <__kernel_rem_pio2+0x4f6>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dc39      	bgt.n	8004a6e <__kernel_rem_pio2+0x556>
 80049fa:	d05d      	beq.n	8004ab8 <__kernel_rem_pio2+0x5a0>
 80049fc:	9b02      	ldr	r3, [sp, #8]
 80049fe:	f003 0007 	and.w	r0, r3, #7
 8004a02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004a06:	ecbd 8b02 	vpop	{d8}
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d1f3      	bne.n	80049fc <__kernel_rem_pio2+0x4e4>
 8004a14:	9b05      	ldr	r3, [sp, #20]
 8004a16:	9500      	str	r5, [sp, #0]
 8004a18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004a1c:	eb0d 0403 	add.w	r4, sp, r3
 8004a20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004a24:	46a2      	mov	sl, r4
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f1aa 0a08 	sub.w	sl, sl, #8
 8004a2e:	dc69      	bgt.n	8004b04 <__kernel_rem_pio2+0x5ec>
 8004a30:	46aa      	mov	sl, r5
 8004a32:	f1ba 0f01 	cmp.w	sl, #1
 8004a36:	f1a4 0408 	sub.w	r4, r4, #8
 8004a3a:	f300 8083 	bgt.w	8004b44 <__kernel_rem_pio2+0x62c>
 8004a3e:	9c05      	ldr	r4, [sp, #20]
 8004a40:	ab48      	add	r3, sp, #288	; 0x120
 8004a42:	441c      	add	r4, r3
 8004a44:	2000      	movs	r0, #0
 8004a46:	2100      	movs	r1, #0
 8004a48:	2d01      	cmp	r5, #1
 8004a4a:	f300 809a 	bgt.w	8004b82 <__kernel_rem_pio2+0x66a>
 8004a4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004a52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004a56:	f1bb 0f00 	cmp.w	fp, #0
 8004a5a:	f040 8098 	bne.w	8004b8e <__kernel_rem_pio2+0x676>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	e9c3 7800 	strd	r7, r8, [r3]
 8004a64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004a68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004a6c:	e7c6      	b.n	80049fc <__kernel_rem_pio2+0x4e4>
 8004a6e:	9e05      	ldr	r6, [sp, #20]
 8004a70:	ab48      	add	r3, sp, #288	; 0x120
 8004a72:	441e      	add	r6, r3
 8004a74:	462c      	mov	r4, r5
 8004a76:	2000      	movs	r0, #0
 8004a78:	2100      	movs	r1, #0
 8004a7a:	2c00      	cmp	r4, #0
 8004a7c:	da33      	bge.n	8004ae6 <__kernel_rem_pio2+0x5ce>
 8004a7e:	f1bb 0f00 	cmp.w	fp, #0
 8004a82:	d036      	beq.n	8004af2 <__kernel_rem_pio2+0x5da>
 8004a84:	4602      	mov	r2, r0
 8004a86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a8a:	9c04      	ldr	r4, [sp, #16]
 8004a8c:	e9c4 2300 	strd	r2, r3, [r4]
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004a98:	f7fb fba2 	bl	80001e0 <__aeabi_dsub>
 8004a9c:	ae4a      	add	r6, sp, #296	; 0x128
 8004a9e:	2401      	movs	r4, #1
 8004aa0:	42a5      	cmp	r5, r4
 8004aa2:	da29      	bge.n	8004af8 <__kernel_rem_pio2+0x5e0>
 8004aa4:	f1bb 0f00 	cmp.w	fp, #0
 8004aa8:	d002      	beq.n	8004ab0 <__kernel_rem_pio2+0x598>
 8004aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004aae:	4619      	mov	r1, r3
 8004ab0:	9b04      	ldr	r3, [sp, #16]
 8004ab2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004ab6:	e7a1      	b.n	80049fc <__kernel_rem_pio2+0x4e4>
 8004ab8:	9c05      	ldr	r4, [sp, #20]
 8004aba:	ab48      	add	r3, sp, #288	; 0x120
 8004abc:	441c      	add	r4, r3
 8004abe:	2000      	movs	r0, #0
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	2d00      	cmp	r5, #0
 8004ac4:	da09      	bge.n	8004ada <__kernel_rem_pio2+0x5c2>
 8004ac6:	f1bb 0f00 	cmp.w	fp, #0
 8004aca:	d002      	beq.n	8004ad2 <__kernel_rem_pio2+0x5ba>
 8004acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	9b04      	ldr	r3, [sp, #16]
 8004ad4:	e9c3 0100 	strd	r0, r1, [r3]
 8004ad8:	e790      	b.n	80049fc <__kernel_rem_pio2+0x4e4>
 8004ada:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004ade:	f7fb fb81 	bl	80001e4 <__adddf3>
 8004ae2:	3d01      	subs	r5, #1
 8004ae4:	e7ed      	b.n	8004ac2 <__kernel_rem_pio2+0x5aa>
 8004ae6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004aea:	f7fb fb7b 	bl	80001e4 <__adddf3>
 8004aee:	3c01      	subs	r4, #1
 8004af0:	e7c3      	b.n	8004a7a <__kernel_rem_pio2+0x562>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	e7c8      	b.n	8004a8a <__kernel_rem_pio2+0x572>
 8004af8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004afc:	f7fb fb72 	bl	80001e4 <__adddf3>
 8004b00:	3401      	adds	r4, #1
 8004b02:	e7cd      	b.n	8004aa0 <__kernel_rem_pio2+0x588>
 8004b04:	e9da 8900 	ldrd	r8, r9, [sl]
 8004b08:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004b0c:	9b00      	ldr	r3, [sp, #0]
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4632      	mov	r2, r6
 8004b14:	463b      	mov	r3, r7
 8004b16:	4640      	mov	r0, r8
 8004b18:	4649      	mov	r1, r9
 8004b1a:	f7fb fb63 	bl	80001e4 <__adddf3>
 8004b1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	4640      	mov	r0, r8
 8004b28:	4649      	mov	r1, r9
 8004b2a:	f7fb fb59 	bl	80001e0 <__aeabi_dsub>
 8004b2e:	4632      	mov	r2, r6
 8004b30:	463b      	mov	r3, r7
 8004b32:	f7fb fb57 	bl	80001e4 <__adddf3>
 8004b36:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004b3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004b3e:	ed8a 7b00 	vstr	d7, [sl]
 8004b42:	e770      	b.n	8004a26 <__kernel_rem_pio2+0x50e>
 8004b44:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004b48:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004b4c:	4640      	mov	r0, r8
 8004b4e:	4632      	mov	r2, r6
 8004b50:	463b      	mov	r3, r7
 8004b52:	4649      	mov	r1, r9
 8004b54:	f7fb fb46 	bl	80001e4 <__adddf3>
 8004b58:	e9cd 0100 	strd	r0, r1, [sp]
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4640      	mov	r0, r8
 8004b62:	4649      	mov	r1, r9
 8004b64:	f7fb fb3c 	bl	80001e0 <__aeabi_dsub>
 8004b68:	4632      	mov	r2, r6
 8004b6a:	463b      	mov	r3, r7
 8004b6c:	f7fb fb3a 	bl	80001e4 <__adddf3>
 8004b70:	ed9d 7b00 	vldr	d7, [sp]
 8004b74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004b78:	ed84 7b00 	vstr	d7, [r4]
 8004b7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b80:	e757      	b.n	8004a32 <__kernel_rem_pio2+0x51a>
 8004b82:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004b86:	f7fb fb2d 	bl	80001e4 <__adddf3>
 8004b8a:	3d01      	subs	r5, #1
 8004b8c:	e75c      	b.n	8004a48 <__kernel_rem_pio2+0x530>
 8004b8e:	9b04      	ldr	r3, [sp, #16]
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	601f      	str	r7, [r3, #0]
 8004b94:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004b98:	605c      	str	r4, [r3, #4]
 8004b9a:	609d      	str	r5, [r3, #8]
 8004b9c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004ba0:	60d3      	str	r3, [r2, #12]
 8004ba2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ba6:	6110      	str	r0, [r2, #16]
 8004ba8:	6153      	str	r3, [r2, #20]
 8004baa:	e727      	b.n	80049fc <__kernel_rem_pio2+0x4e4>
 8004bac:	41700000 	.word	0x41700000
 8004bb0:	3e700000 	.word	0x3e700000
 8004bb4:	00000000 	.word	0x00000000

08004bb8 <scalbn>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	ec55 4b10 	vmov	r4, r5, d0
 8004bbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004bc2:	4606      	mov	r6, r0
 8004bc4:	462b      	mov	r3, r5
 8004bc6:	b999      	cbnz	r1, 8004bf0 <scalbn+0x38>
 8004bc8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004bcc:	4323      	orrs	r3, r4
 8004bce:	d03f      	beq.n	8004c50 <scalbn+0x98>
 8004bd0:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <scalbn+0xf0>)
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	ee10 0a10 	vmov	r0, s0
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f7fb fcb9 	bl	8000550 <__aeabi_dmul>
 8004bde:	4b33      	ldr	r3, [pc, #204]	; (8004cac <scalbn+0xf4>)
 8004be0:	429e      	cmp	r6, r3
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	da10      	bge.n	8004c0a <scalbn+0x52>
 8004be8:	a327      	add	r3, pc, #156	; (adr r3, 8004c88 <scalbn+0xd0>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	e01f      	b.n	8004c30 <scalbn+0x78>
 8004bf0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004bf4:	4291      	cmp	r1, r2
 8004bf6:	d10c      	bne.n	8004c12 <scalbn+0x5a>
 8004bf8:	ee10 2a10 	vmov	r2, s0
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	4629      	mov	r1, r5
 8004c00:	f7fb faf0 	bl	80001e4 <__adddf3>
 8004c04:	4604      	mov	r4, r0
 8004c06:	460d      	mov	r5, r1
 8004c08:	e022      	b.n	8004c50 <scalbn+0x98>
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004c10:	3936      	subs	r1, #54	; 0x36
 8004c12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004c16:	4296      	cmp	r6, r2
 8004c18:	dd0d      	ble.n	8004c36 <scalbn+0x7e>
 8004c1a:	2d00      	cmp	r5, #0
 8004c1c:	a11c      	add	r1, pc, #112	; (adr r1, 8004c90 <scalbn+0xd8>)
 8004c1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c22:	da02      	bge.n	8004c2a <scalbn+0x72>
 8004c24:	a11c      	add	r1, pc, #112	; (adr r1, 8004c98 <scalbn+0xe0>)
 8004c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c2a:	a319      	add	r3, pc, #100	; (adr r3, 8004c90 <scalbn+0xd8>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fc8e 	bl	8000550 <__aeabi_dmul>
 8004c34:	e7e6      	b.n	8004c04 <scalbn+0x4c>
 8004c36:	1872      	adds	r2, r6, r1
 8004c38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004c3c:	428a      	cmp	r2, r1
 8004c3e:	dcec      	bgt.n	8004c1a <scalbn+0x62>
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	dd08      	ble.n	8004c56 <scalbn+0x9e>
 8004c44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004c50:	ec45 4b10 	vmov	d0, r4, r5
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004c5a:	da08      	bge.n	8004c6e <scalbn+0xb6>
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	a10a      	add	r1, pc, #40	; (adr r1, 8004c88 <scalbn+0xd0>)
 8004c60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c64:	dac0      	bge.n	8004be8 <scalbn+0x30>
 8004c66:	a10e      	add	r1, pc, #56	; (adr r1, 8004ca0 <scalbn+0xe8>)
 8004c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c6c:	e7bc      	b.n	8004be8 <scalbn+0x30>
 8004c6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c72:	3236      	adds	r2, #54	; 0x36
 8004c74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <scalbn+0xf8>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	e7d5      	b.n	8004c30 <scalbn+0x78>
 8004c84:	f3af 8000 	nop.w
 8004c88:	c2f8f359 	.word	0xc2f8f359
 8004c8c:	01a56e1f 	.word	0x01a56e1f
 8004c90:	8800759c 	.word	0x8800759c
 8004c94:	7e37e43c 	.word	0x7e37e43c
 8004c98:	8800759c 	.word	0x8800759c
 8004c9c:	fe37e43c 	.word	0xfe37e43c
 8004ca0:	c2f8f359 	.word	0xc2f8f359
 8004ca4:	81a56e1f 	.word	0x81a56e1f
 8004ca8:	43500000 	.word	0x43500000
 8004cac:	ffff3cb0 	.word	0xffff3cb0
 8004cb0:	3c900000 	.word	0x3c900000
 8004cb4:	00000000 	.word	0x00000000

08004cb8 <floor>:
 8004cb8:	ec51 0b10 	vmov	r0, r1, d0
 8004cbc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cc4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004cc8:	2e13      	cmp	r6, #19
 8004cca:	ee10 5a10 	vmov	r5, s0
 8004cce:	ee10 8a10 	vmov	r8, s0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	dc31      	bgt.n	8004d3a <floor+0x82>
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	da14      	bge.n	8004d04 <floor+0x4c>
 8004cda:	a333      	add	r3, pc, #204	; (adr r3, 8004da8 <floor+0xf0>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fa80 	bl	80001e4 <__adddf3>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f7fb fec2 	bl	8000a70 <__aeabi_dcmpgt>
 8004cec:	b138      	cbz	r0, 8004cfe <floor+0x46>
 8004cee:	2c00      	cmp	r4, #0
 8004cf0:	da53      	bge.n	8004d9a <floor+0xe2>
 8004cf2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004cf6:	4325      	orrs	r5, r4
 8004cf8:	d052      	beq.n	8004da0 <floor+0xe8>
 8004cfa:	4c2d      	ldr	r4, [pc, #180]	; (8004db0 <floor+0xf8>)
 8004cfc:	2500      	movs	r5, #0
 8004cfe:	4621      	mov	r1, r4
 8004d00:	4628      	mov	r0, r5
 8004d02:	e024      	b.n	8004d4e <floor+0x96>
 8004d04:	4f2b      	ldr	r7, [pc, #172]	; (8004db4 <floor+0xfc>)
 8004d06:	4137      	asrs	r7, r6
 8004d08:	ea01 0307 	and.w	r3, r1, r7
 8004d0c:	4303      	orrs	r3, r0
 8004d0e:	d01e      	beq.n	8004d4e <floor+0x96>
 8004d10:	a325      	add	r3, pc, #148	; (adr r3, 8004da8 <floor+0xf0>)
 8004d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d16:	f7fb fa65 	bl	80001e4 <__adddf3>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f7fb fea7 	bl	8000a70 <__aeabi_dcmpgt>
 8004d22:	2800      	cmp	r0, #0
 8004d24:	d0eb      	beq.n	8004cfe <floor+0x46>
 8004d26:	2c00      	cmp	r4, #0
 8004d28:	bfbe      	ittt	lt
 8004d2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004d2e:	4133      	asrlt	r3, r6
 8004d30:	18e4      	addlt	r4, r4, r3
 8004d32:	ea24 0407 	bic.w	r4, r4, r7
 8004d36:	2500      	movs	r5, #0
 8004d38:	e7e1      	b.n	8004cfe <floor+0x46>
 8004d3a:	2e33      	cmp	r6, #51	; 0x33
 8004d3c:	dd0b      	ble.n	8004d56 <floor+0x9e>
 8004d3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004d42:	d104      	bne.n	8004d4e <floor+0x96>
 8004d44:	ee10 2a10 	vmov	r2, s0
 8004d48:	460b      	mov	r3, r1
 8004d4a:	f7fb fa4b 	bl	80001e4 <__adddf3>
 8004d4e:	ec41 0b10 	vmov	d0, r0, r1
 8004d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d5e:	40df      	lsrs	r7, r3
 8004d60:	4238      	tst	r0, r7
 8004d62:	d0f4      	beq.n	8004d4e <floor+0x96>
 8004d64:	a310      	add	r3, pc, #64	; (adr r3, 8004da8 <floor+0xf0>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	f7fb fa3b 	bl	80001e4 <__adddf3>
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2300      	movs	r3, #0
 8004d72:	f7fb fe7d 	bl	8000a70 <__aeabi_dcmpgt>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d0c1      	beq.n	8004cfe <floor+0x46>
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	da0a      	bge.n	8004d94 <floor+0xdc>
 8004d7e:	2e14      	cmp	r6, #20
 8004d80:	d101      	bne.n	8004d86 <floor+0xce>
 8004d82:	3401      	adds	r4, #1
 8004d84:	e006      	b.n	8004d94 <floor+0xdc>
 8004d86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	40b3      	lsls	r3, r6
 8004d8e:	441d      	add	r5, r3
 8004d90:	45a8      	cmp	r8, r5
 8004d92:	d8f6      	bhi.n	8004d82 <floor+0xca>
 8004d94:	ea25 0507 	bic.w	r5, r5, r7
 8004d98:	e7b1      	b.n	8004cfe <floor+0x46>
 8004d9a:	2500      	movs	r5, #0
 8004d9c:	462c      	mov	r4, r5
 8004d9e:	e7ae      	b.n	8004cfe <floor+0x46>
 8004da0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004da4:	e7ab      	b.n	8004cfe <floor+0x46>
 8004da6:	bf00      	nop
 8004da8:	8800759c 	.word	0x8800759c
 8004dac:	7e37e43c 	.word	0x7e37e43c
 8004db0:	bff00000 	.word	0xbff00000
 8004db4:	000fffff 	.word	0x000fffff

08004db8 <_init>:
 8004db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dba:	bf00      	nop
 8004dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dbe:	bc08      	pop	{r3}
 8004dc0:	469e      	mov	lr, r3
 8004dc2:	4770      	bx	lr

08004dc4 <_fini>:
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	bf00      	nop
 8004dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dca:	bc08      	pop	{r3}
 8004dcc:	469e      	mov	lr, r3
 8004dce:	4770      	bx	lr
