
TriSineWaveGenerator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006180  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e00  08006e00  00020720  2**0
                  CONTENTS
  4 .ARM          00000000  08006e00  08006e00  00020720  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e00  08006e00  00020720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000720  20000000  08006e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  20000720  08007528  00020720  2**2
                  ALLOC
 10 ._user_heap_stack 00000480  20000aa8  08007528  00020aa8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020720  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020748  2**0
                  CONTENTS, READONLY
 13 .debug_line   00036228  00000000  00000000  0002078b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000076  00000000  00000000  000569b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0003e091  00000000  00000000  00056a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006eb5  00000000  00000000  00094aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001748  00000000  00000000  0009b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007da03  00000000  00000000  0009d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002100  00000000  00000000  0011aabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00019495  00000000  00000000  0011cbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ee0  00000000  00000000  00136050  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00013477  00000000  00000000  00139f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000720 	.word	0x20000720
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006228 	.word	0x08006228

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000724 	.word	0x20000724
 8000104:	08006228 	.word	0x08006228

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f8:	480d      	ldr	r0, [pc, #52]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fa:	490e      	ldr	r1, [pc, #56]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003fc:	4a0e      	ldr	r2, [pc, #56]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000400:	e002      	b.n	8000408 <LoopCopyDataInit>

08000402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000406:	3304      	adds	r3, #4

08000408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800040c:	d3f9      	bcc.n	8000402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000410:	4c0b      	ldr	r4, [pc, #44]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000414:	e001      	b.n	800041a <LoopFillZerobss>

08000416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000418:	3204      	adds	r2, #4

0800041a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800041c:	d3fb      	bcc.n	8000416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800041e:	f002 fb61 	bl	8002ae4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000422:	f005 fed3 	bl	80061cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f000 f851 	bl	80004cc <main>

0800042a <LoopForever>:

LoopForever:
    b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	20000720 	.word	0x20000720
  ldr r2, =_sidata
 8000438:	08006e08 	.word	0x08006e08
  ldr r2, =_sbss
 800043c:	20000720 	.word	0x20000720
  ldr r4, =_ebss
 8000440:	20000aa8 	.word	0x20000aa8

08000444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_IRQHandler>
	...

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	222c      	movs	r2, #44	; 0x2c
 800044e:	2100      	movs	r1, #0
 8000450:	a809      	add	r0, sp, #36	; 0x24
 8000452:	f005 feb3 	bl	80061bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4668      	mov	r0, sp
 800045c:	f005 feae 	bl	80061bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	2210      	movs	r2, #16
 8000462:	2100      	movs	r1, #0
 8000464:	a804      	add	r0, sp, #16
 8000466:	f005 fea9 	bl	80061bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800046a:	2312      	movs	r3, #18
 800046c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046e:	3b10      	subs	r3, #16
 8000470:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000472:	23a0      	movs	r3, #160	; 0xa0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000474:	2510      	movs	r5, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000478:	039b      	lsls	r3, r3, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800047e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000482:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000484:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000486:	f002 fe49 	bl	800311c <HAL_RCC_OscConfig>
 800048a:	2800      	cmp	r0, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000490:	e7fe      	b.n	8000490 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000492:	2207      	movs	r2, #7
 8000494:	2302      	movs	r3, #2
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049e:	2101      	movs	r1, #1
 80004a0:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	9202      	str	r2, [sp, #8]
 80004a4:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004a6:	f003 f893 	bl	80035d0 <HAL_RCC_ClockConfig>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x6a>
 80004ae:	b672      	cpsid	i
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <SystemClock_Config+0x68>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80004b2:	9006      	str	r0, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004b6:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b8:	f003 f9a0 	bl	80037fc <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x7c>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <SystemClock_Config+0x7a>
  HAL_RCC_EnableCSS();
 80004c4:	f003 f942 	bl	800374c <HAL_RCC_EnableCSS>
}
 80004c8:	b015      	add	sp, #84	; 0x54
 80004ca:	bd30      	pop	{r4, r5, pc}

080004cc <main>:
{
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	46ce      	mov	lr, r9
 80004d0:	4647      	mov	r7, r8
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 80004d6:	f002 fb2d 	bl	8002b34 <HAL_Init>
  SystemClock_Config();
 80004da:	f7ff ffb5 	bl	8000448 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	2214      	movs	r2, #20
 80004e0:	2100      	movs	r1, #0
 80004e2:	a80e      	add	r0, sp, #56	; 0x38
 80004e4:	f005 fe6a 	bl	80061bc <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004e8:	2280      	movs	r2, #128	; 0x80
 80004ea:	4cac      	ldr	r4, [pc, #688]	; (800079c <main+0x2d0>)
 80004ec:	03d2      	lsls	r2, r2, #15
 80004ee:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80004f0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	4313      	orrs	r3, r2
 80004f4:	6163      	str	r3, [r4, #20]
 80004f6:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 80004f8:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fa:	4013      	ands	r3, r2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fc:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004fe:	9302      	str	r3, [sp, #8]
 8000500:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	6963      	ldr	r3, [r4, #20]
 8000504:	0292      	lsls	r2, r2, #10
 8000506:	4313      	orrs	r3, r2
 8000508:	6163      	str	r3, [r4, #20]
 800050a:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800050c:	0109      	lsls	r1, r1, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	4013      	ands	r3, r2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000510:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	9303      	str	r3, [sp, #12]
 8000514:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	6963      	ldr	r3, [r4, #20]
 8000518:	02d2      	lsls	r2, r2, #11
 800051a:	4313      	orrs	r3, r2
 800051c:	6163      	str	r3, [r4, #20]
 800051e:	6963      	ldr	r3, [r4, #20]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000520:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4013      	ands	r3, r2
 8000524:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 8000528:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(OC_SEL_GPIO_Port, OC_SEL_Pin, GPIO_PIN_SET);
 800052c:	f002 fdf0 	bl	8003110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(_3FG_HIZ_GPIO_Port, _3FG_HIZ_Pin, GPIO_PIN_RESET);
 8000530:	2090      	movs	r0, #144	; 0x90
 8000532:	017f      	lsls	r7, r7, #5
 8000534:	2200      	movs	r2, #0
 8000536:	0039      	movs	r1, r7
 8000538:	05c0      	lsls	r0, r0, #23
 800053a:	f002 fde9 	bl	8003110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY2_GPIO_Port, OCTH_STBY2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	4897      	ldr	r0, [pc, #604]	; (80007a0 <main+0x2d4>)
 8000544:	f002 fde4 	bl	8003110 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OCTH_STBY1_GPIO_Port, OCTH_STBY1_Pin, GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2180      	movs	r1, #128	; 0x80
 800054c:	4894      	ldr	r0, [pc, #592]	; (80007a0 <main+0x2d4>)
 800054e:	f002 fddf 	bl	8003110 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000552:	2384      	movs	r3, #132	; 0x84
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000554:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000556:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000558:	4891      	ldr	r0, [pc, #580]	; (80007a0 <main+0x2d4>)
 800055a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800055c:	930f      	str	r3, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800055e:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000560:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000562:	f002 fcd7 	bl	8002f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 8000566:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 800056a:	015b      	lsls	r3, r3, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056c:	2600      	movs	r6, #0
  GPIO_InitStruct.Pin = OC_SEL_Pin|_3FG_HIZ_Pin;
 800056e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000570:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	a90e      	add	r1, sp, #56	; 0x38
 8000574:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000576:	4698      	mov	r8, r3
 8000578:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057e:	f002 fcc9 	bl	8002f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OCTH_STBY2_Pin|OCTH_STBY1_Pin;
 8000582:	23c0      	movs	r3, #192	; 0xc0
 8000584:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000586:	4643      	mov	r3, r8
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000588:	4885      	ldr	r0, [pc, #532]	; (80007a0 <main+0x2d4>)
 800058a:	a90e      	add	r1, sp, #56	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800058c:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058e:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000592:	f002 fcbf 	bl	8002f14 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000596:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000598:	220c      	movs	r2, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059a:	432b      	orrs	r3, r5
 800059c:	6163      	str	r3, [r4, #20]
 800059e:	6963      	ldr	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a0:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	402b      	ands	r3, r5
 80005a4:	9301      	str	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a8:	9b01      	ldr	r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	f005 fe07 	bl	80061bc <memset>
  hadc.Instance = ADC1;
 80005ae:	4c7d      	ldr	r4, [pc, #500]	; (80007a4 <main+0x2d8>)
 80005b0:	4b7d      	ldr	r3, [pc, #500]	; (80007a8 <main+0x2dc>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005b2:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80005b4:	6023      	str	r3, [r4, #0]
  hadc.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80005b6:	2320      	movs	r3, #32
 80005b8:	4698      	mov	r8, r3
 80005ba:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005bc:	3b1c      	subs	r3, #28
 80005be:	4699      	mov	r9, r3
 80005c0:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	6223      	str	r3, [r4, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005c8:	2324      	movs	r3, #36	; 0x24
  hadc.Init.LowPowerAutoWait = DISABLE;
 80005ca:	61a6      	str	r6, [r4, #24]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005cc:	6066      	str	r6, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005ce:	60a6      	str	r6, [r4, #8]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005d0:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 80005d2:	61e6      	str	r6, [r4, #28]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80005d4:	54e5      	strb	r5, [r4, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005d6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80005d8:	f002 face 	bl	8002b78 <HAL_ADC_Init>
 80005dc:	2800      	cmp	r0, #0
 80005de:	d001      	beq.n	80005e4 <main+0x118>
 80005e0:	b672      	cpsid	i
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x116>
  sConfig.Channel = ADC_CHANNEL_3;
 80005e4:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e6:	0020      	movs	r0, r4
 80005e8:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_3;
 80005ea:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80005ec:	970f      	str	r7, [sp, #60]	; 0x3c
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80005ee:	9510      	str	r5, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005f0:	f002 fb6a 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d001      	beq.n	80005fc <main+0x130>
 80005f8:	b672      	cpsid	i
  while (1)
 80005fa:	e7fe      	b.n	80005fa <main+0x12e>
  sConfig.Channel = ADC_CHANNEL_4;
 80005fc:	464b      	mov	r3, r9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005fe:	0020      	movs	r0, r4
 8000600:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_4;
 8000602:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000604:	f002 fb60 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 8000608:	2800      	cmp	r0, #0
 800060a:	d001      	beq.n	8000610 <main+0x144>
 800060c:	b672      	cpsid	i
  while (1)
 800060e:	e7fe      	b.n	800060e <main+0x142>
  sConfig.Channel = ADC_CHANNEL_5;
 8000610:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000612:	0020      	movs	r0, r4
 8000614:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000618:	f002 fb56 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 800061c:	2800      	cmp	r0, #0
 800061e:	d001      	beq.n	8000624 <main+0x158>
 8000620:	b672      	cpsid	i
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x156>
  sConfig.Channel = ADC_CHANNEL_9;
 8000624:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000626:	0020      	movs	r0, r4
 8000628:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Channel = ADC_CHANNEL_9;
 800062a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800062c:	f002 fb4c 	bl	8002cc8 <HAL_ADC_ConfigChannel>
 8000630:	1e06      	subs	r6, r0, #0
 8000632:	d001      	beq.n	8000638 <main+0x16c>
 8000634:	b672      	cpsid	i
  while (1)
 8000636:	e7fe      	b.n	8000636 <main+0x16a>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000638:	0001      	movs	r1, r0
 800063a:	2208      	movs	r2, #8
 800063c:	a805      	add	r0, sp, #20
 800063e:	f005 fdbd 	bl	80061bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000642:	221c      	movs	r2, #28
 8000644:	0031      	movs	r1, r6
 8000646:	a807      	add	r0, sp, #28
 8000648:	f005 fdb8 	bl	80061bc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800064c:	2220      	movs	r2, #32
 800064e:	0031      	movs	r1, r6
 8000650:	a80e      	add	r0, sp, #56	; 0x38
 8000652:	f005 fdb3 	bl	80061bc <memset>
  htim1.Instance = TIM1;
 8000656:	4c55      	ldr	r4, [pc, #340]	; (80007ac <main+0x2e0>)
 8000658:	4b55      	ldr	r3, [pc, #340]	; (80007b0 <main+0x2e4>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800065a:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 800065c:	6023      	str	r3, [r4, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800065e:	4643      	mov	r3, r8
 8000660:	60a3      	str	r3, [r4, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000662:	4b54      	ldr	r3, [pc, #336]	; (80007b4 <main+0x2e8>)
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000664:	6066      	str	r6, [r4, #4]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000666:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	6123      	str	r3, [r4, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800066e:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000670:	61a6      	str	r6, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000672:	f003 f961 	bl	8003938 <HAL_TIM_PWM_Init>
 8000676:	2800      	cmp	r0, #0
 8000678:	d001      	beq.n	800067e <main+0x1b2>
 800067a:	b672      	cpsid	i
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x1b0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800067e:	2370      	movs	r3, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000680:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000682:	a905      	add	r1, sp, #20
 8000684:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000686:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000688:	f003 faee 	bl	8003c68 <HAL_TIMEx_MasterConfigSynchronization>
 800068c:	1e02      	subs	r2, r0, #0
 800068e:	d001      	beq.n	8000694 <main+0x1c8>
 8000690:	b672      	cpsid	i
  while (1)
 8000692:	e7fe      	b.n	8000692 <main+0x1c6>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000694:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 8000696:	9008      	str	r0, [sp, #32]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000698:	9009      	str	r0, [sp, #36]	; 0x24
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800069a:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800069c:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800069e:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006a0:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a2:	a907      	add	r1, sp, #28
 80006a4:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a6:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a8:	f003 f9be 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 80006ac:	2800      	cmp	r0, #0
 80006ae:	d001      	beq.n	80006b4 <main+0x1e8>
 80006b0:	b672      	cpsid	i
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <main+0x1e6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006b4:	2204      	movs	r2, #4
 80006b6:	0020      	movs	r0, r4
 80006b8:	a907      	add	r1, sp, #28
 80006ba:	f003 f9b5 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 80006be:	2800      	cmp	r0, #0
 80006c0:	d001      	beq.n	80006c6 <main+0x1fa>
 80006c2:	b672      	cpsid	i
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <main+0x1f8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80006c6:	2208      	movs	r2, #8
 80006c8:	0020      	movs	r0, r4
 80006ca:	a907      	add	r1, sp, #28
 80006cc:	f003 f9ac 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d001      	beq.n	80006d8 <main+0x20c>
 80006d4:	b672      	cpsid	i
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <main+0x20a>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006d8:	2370      	movs	r3, #112	; 0x70
 80006da:	9307      	str	r3, [sp, #28]
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80006dc:	4b36      	ldr	r3, [pc, #216]	; (80007b8 <main+0x2ec>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006de:	220c      	movs	r2, #12
 80006e0:	0020      	movs	r0, r4
 80006e2:	a907      	add	r1, sp, #28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80006e4:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006e6:	f003 f99f 	bl	8003a28 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x226>
 80006ee:	b672      	cpsid	i
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <main+0x224>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	011b      	lsls	r3, r3, #4
 80006f6:	930e      	str	r3, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	930f      	str	r3, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 80006fe:	2380      	movs	r3, #128	; 0x80
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	9310      	str	r3, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000704:	3bed      	subs	r3, #237	; 0xed
 8000706:	9311      	str	r3, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	015b      	lsls	r3, r3, #5
 800070c:	9312      	str	r3, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070e:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000710:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000712:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000714:	0020      	movs	r0, r4
 8000716:	a90e      	add	r1, sp, #56	; 0x38
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000718:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800071a:	f003 fad3 	bl	8003cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	1e05      	subs	r5, r0, #0
 8000720:	d001      	beq.n	8000726 <main+0x25a>
 8000722:	b672      	cpsid	i
  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x258>
  HAL_TIM_MspPostInit(&htim1);
 8000726:	0020      	movs	r0, r4
 8000728:	f001 fc64 	bl	8001ff4 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800072c:	4823      	ldr	r0, [pc, #140]	; (80007bc <main+0x2f0>)
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <main+0x2f4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000730:	6085      	str	r5, [r0, #8]
  huart1.Instance = USART1;
 8000732:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8000734:	2396      	movs	r3, #150	; 0x96
 8000736:	019b      	lsls	r3, r3, #6
 8000738:	6043      	str	r3, [r0, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800073a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	60c5      	str	r5, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073e:	6105      	str	r5, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	6185      	str	r5, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	61c5      	str	r5, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	6205      	str	r5, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000748:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800074a:	f003 fbcd 	bl	8003ee8 <HAL_UART_Init>
 800074e:	1e04      	subs	r4, r0, #0
 8000750:	d001      	beq.n	8000756 <main+0x28a>
 8000752:	b672      	cpsid	i
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x288>
  MX_MotorControl_Init();
 8000756:	f001 f969 	bl	8001a2c <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800075a:	0022      	movs	r2, r4
 800075c:	0021      	movs	r1, r4
 800075e:	200d      	movs	r0, #13
 8000760:	f002 fb46 	bl	8002df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000764:	200d      	movs	r0, #13
 8000766:	f002 fb75 	bl	8002e54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800076a:	0022      	movs	r2, r4
 800076c:	2101      	movs	r1, #1
 800076e:	2009      	movs	r0, #9
 8000770:	f002 fb3e 	bl	8002df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000774:	2009      	movs	r0, #9
 8000776:	f002 fb6d 	bl	8002e54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800077a:	0022      	movs	r2, r4
 800077c:	2103      	movs	r1, #3
 800077e:	201b      	movs	r0, #27
 8000780:	f002 fb36 	bl	8002df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000784:	201b      	movs	r0, #27
 8000786:	f002 fb65 	bl	8002e54 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 800078a:	2005      	movs	r0, #5
 800078c:	0022      	movs	r2, r4
 800078e:	2103      	movs	r1, #3
 8000790:	f002 fb2e 	bl	8002df0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000794:	2005      	movs	r0, #5
 8000796:	f002 fb5d 	bl	8002e54 <HAL_NVIC_EnableIRQ>
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x2ce>
 800079c:	40021000 	.word	0x40021000
 80007a0:	48001400 	.word	0x48001400
 80007a4:	2000073c 	.word	0x2000073c
 80007a8:	40012400 	.word	0x40012400
 80007ac:	200007c0 	.word	0x200007c0
 80007b0:	40012c00 	.word	0x40012c00
 80007b4:	00002ee0 	.word	0x00002ee0
 80007b8:	00002edf 	.word	0x00002edf
 80007bc:	20000808 	.word	0x20000808
 80007c0:	40013800 	.word	0x40013800

080007c4 <Error_Handler>:
 80007c4:	b672      	cpsid	i
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <Error_Handler+0x2>

080007c8 <MC_StartMotor1>:
  * check if it has reached the #RUN state. See MC_GetSTMStateMotor1() for more details.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
 80007c8:	b510      	push	{r4, lr}
	return MCI_StartMotor( pMCI[M1] );
 80007ca:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <MC_StartMotor1+0xc>)
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f000 f837 	bl	8000840 <MCI_StartMotor>
}
 80007d2:	bd10      	pop	{r4, pc}
 80007d4:	20000994 	.word	0x20000994

080007d8 <MC_StopMotor1>:
  * #IDLE state has been reached back.
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
 80007d8:	b510      	push	{r4, lr}
	return MCI_StopMotor( pMCI[M1] );
 80007da:	4b02      	ldr	r3, [pc, #8]	; (80007e4 <MC_StopMotor1+0xc>)
 80007dc:	6818      	ldr	r0, [r3, #0]
 80007de:	f000 f83b 	bl	8000858 <MCI_StopMotor>
}
 80007e2:	bd10      	pop	{r4, pc}
 80007e4:	20000994 	.word	0x20000994

080007e8 <MC_GetSTMStateMotor1>:

/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
 80007e8:	b510      	push	{r4, lr}
	return MCI_GetSTMState( pMCI[M1] );
 80007ea:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <MC_GetSTMStateMotor1+0xc>)
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	f000 f881 	bl	80008f4 <MCI_GetSTMState>
}
 80007f2:	bd10      	pop	{r4, pc}
 80007f4:	20000994 	.word	0x20000994

080007f8 <MCI_Init>:
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
 80007f8:	6083      	str	r3, [r0, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80007fa:	2300      	movs	r3, #0
  pHandle->pSTM = pSTM;
 80007fc:	6001      	str	r1, [r0, #0]
  pHandle->pSTC = pSTC;
 80007fe:	6042      	str	r2, [r0, #4]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000800:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8000802:	81c3      	strh	r3, [r0, #14]
  pHandle->hFinalTorque = 0;
 8000804:	8203      	strh	r3, [r0, #16]
  pHandle->hDurationms = 0;
 8000806:	82c3      	strh	r3, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000808:	7603      	strb	r3, [r0, #24]
}
 800080a:	4770      	bx	lr

0800080c <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800080c:	2301      	movs	r3, #1
 800080e:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000810:	2302      	movs	r3, #2
 8000812:	33ff      	adds	r3, #255	; 0xff
  pHandle->hFinalSpeed = hFinalSpeed;
 8000814:	81c1      	strh	r1, [r0, #14]
  pHandle->hDurationms = hDurationms;
 8000816:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000818:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 800081a:	4770      	bx	lr

0800081c <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800081c:	2302      	movs	r3, #2
 800081e:	7303      	strb	r3, [r0, #12]
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000820:	3b01      	subs	r3, #1
  pHandle->hFinalTorque = hFinalTorque;
 8000822:	8201      	strh	r1, [r0, #16]
  pHandle->hDurationms = hDurationms;
 8000824:	82c2      	strh	r2, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000826:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000828:	4770      	bx	lr
 800082a:	46c0      	nop			; (mov r8, r8)

0800082c <MCI_SetCurrentReferences>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800082c:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800082e:	2301      	movs	r3, #1
{
 8000830:	b082      	sub	sp, #8
  pHandle->Iqdref.q = Iqdref.q;
 8000832:	8241      	strh	r1, [r0, #18]
  pHandle->Iqdref.d = Iqdref.d;
 8000834:	0c09      	lsrs	r1, r1, #16
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000836:	7302      	strb	r2, [r0, #12]
  pHandle->Iqdref.d = Iqdref.d;
 8000838:	8281      	strh	r1, [r0, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800083a:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800083c:	b002      	add	sp, #8
 800083e:	4770      	bx	lr

08000840 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000840:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000842:	2103      	movs	r1, #3
{
 8000844:	0004      	movs	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000846:	6800      	ldr	r0, [r0, #0]
 8000848:	f004 feb6 	bl	80055b8 <STM_NextState>

  if ( RetVal == true )
 800084c:	2800      	cmp	r0, #0
 800084e:	d001      	beq.n	8000854 <MCI_StartMotor+0x14>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000850:	2301      	movs	r3, #1
 8000852:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8000854:	bd10      	pop	{r4, pc}
 8000856:	46c0      	nop			; (mov r8, r8)

08000858 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 8000858:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 800085a:	2107      	movs	r1, #7
 800085c:	6800      	ldr	r0, [r0, #0]
 800085e:	f004 feab 	bl	80055b8 <STM_NextState>
}
 8000862:	bd10      	pop	{r4, pc}

08000864 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 8000864:	b510      	push	{r4, lr}
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000866:	6800      	ldr	r0, [r0, #0]
 8000868:	f004 ff1c 	bl	80056a4 <STM_FaultAcknowledged>
}
 800086c:	bd10      	pop	{r4, pc}
 800086e:	46c0      	nop			; (mov r8, r8)

08000870 <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8000870:	b510      	push	{r4, lr}
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000872:	2101      	movs	r1, #1
 8000874:	6800      	ldr	r0, [r0, #0]
 8000876:	f004 fe9f 	bl	80055b8 <STM_NextState>
}
 800087a:	bd10      	pop	{r4, pc}

0800087c <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 800087c:	b510      	push	{r4, lr}
 800087e:	1e04      	subs	r4, r0, #0
  if ( pHandle != MC_NULL )
 8000880:	d002      	beq.n	8000888 <MCI_ExecBufferedCommands+0xc>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000882:	7e03      	ldrb	r3, [r0, #24]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d000      	beq.n	800088a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000888:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 800088a:	7b02      	ldrb	r2, [r0, #12]
 800088c:	2a02      	cmp	r2, #2
 800088e:	d023      	beq.n	80008d8 <MCI_ExecBufferedCommands+0x5c>
 8000890:	2a03      	cmp	r2, #3
 8000892:	d004      	beq.n	800089e <MCI_ExecBufferedCommands+0x22>
 8000894:	2a01      	cmp	r2, #1
 8000896:	d00e      	beq.n	80008b6 <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000898:	2303      	movs	r3, #3
 800089a:	7623      	strb	r3, [r4, #24]
}
 800089c:	e7f4      	b.n	8000888 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800089e:	2224      	movs	r2, #36	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80008a0:	0021      	movs	r1, r4
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80008a2:	6880      	ldr	r0, [r0, #8]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80008a4:	3112      	adds	r1, #18
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80008a6:	5483      	strb	r3, [r0, r2]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80008a8:	3010      	adds	r0, #16
 80008aa:	3a20      	subs	r2, #32
 80008ac:	f005 fcb2 	bl	8006214 <memcpy>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80008b0:	2302      	movs	r3, #2
 80008b2:	7623      	strb	r3, [r4, #24]
 80008b4:	e7e8      	b.n	8000888 <MCI_ExecBufferedCommands+0xc>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80008b6:	2100      	movs	r1, #0
 80008b8:	6882      	ldr	r2, [r0, #8]
 80008ba:	3323      	adds	r3, #35	; 0x23
 80008bc:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80008be:	6840      	ldr	r0, [r0, #4]
 80008c0:	3101      	adds	r1, #1
 80008c2:	f004 fdbb 	bl	800543c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80008c6:	8ae2      	ldrh	r2, [r4, #22]
 80008c8:	230e      	movs	r3, #14
 80008ca:	5ee1      	ldrsh	r1, [r4, r3]
 80008cc:	6860      	ldr	r0, [r4, #4]
 80008ce:	f004 fdb9 	bl	8005444 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d0e0      	beq.n	8000898 <MCI_ExecBufferedCommands+0x1c>
 80008d6:	e7eb      	b.n	80008b0 <MCI_ExecBufferedCommands+0x34>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80008d8:	2324      	movs	r3, #36	; 0x24
 80008da:	2100      	movs	r1, #0
 80008dc:	6882      	ldr	r2, [r0, #8]
 80008de:	54d1      	strb	r1, [r2, r3]
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80008e0:	6840      	ldr	r0, [r0, #4]
 80008e2:	f004 fdab 	bl	800543c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80008e6:	8ae2      	ldrh	r2, [r4, #22]
 80008e8:	2310      	movs	r3, #16
 80008ea:	5ee1      	ldrsh	r1, [r4, r3]
 80008ec:	6860      	ldr	r0, [r4, #4]
 80008ee:	f004 fda9 	bl	8005444 <STC_ExecRamp>
        break;
 80008f2:	e7ee      	b.n	80008d2 <MCI_ExecBufferedCommands+0x56>

080008f4 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 80008f4:	b510      	push	{r4, lr}
  return STM_GetState( pHandle->pSTM );
 80008f6:	6800      	ldr	r0, [r0, #0]
 80008f8:	f004 fed2 	bl	80056a0 <STM_GetState>
}
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)

08000900 <MCI_GetControlMode>:
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
 8000900:	7e40      	ldrb	r0, [r0, #25]
}
 8000902:	4770      	bx	lr

08000904 <MCI_GetImposedMotorDirection>:
  */
__weak int16_t MCI_GetImposedMotorDirection( MCI_Handle_t * pHandle )
{
  int16_t retVal = 1;

  switch ( pHandle->lastCommand )
 8000904:	7b02      	ldrb	r2, [r0, #12]
{
 8000906:	0003      	movs	r3, r0
  switch ( pHandle->lastCommand )
 8000908:	2a02      	cmp	r2, #2
 800090a:	d005      	beq.n	8000918 <MCI_GetImposedMotorDirection+0x14>
 800090c:	2a03      	cmp	r2, #3
 800090e:	d012      	beq.n	8000936 <MCI_GetImposedMotorDirection+0x32>
 8000910:	2001      	movs	r0, #1
 8000912:	2a01      	cmp	r2, #1
 8000914:	d007      	beq.n	8000926 <MCI_GetImposedMotorDirection+0x22>
      break;
    default:
      break;
  }
  return retVal;
}
 8000916:	4770      	bx	lr
      if ( pHandle->hFinalTorque < 0 )
 8000918:	2010      	movs	r0, #16
 800091a:	5e18      	ldrsh	r0, [r3, r0]
        retVal = -1;
 800091c:	43c0      	mvns	r0, r0
 800091e:	17c0      	asrs	r0, r0, #31
 8000920:	4010      	ands	r0, r2
 8000922:	3801      	subs	r0, #1
 8000924:	e7f7      	b.n	8000916 <MCI_GetImposedMotorDirection+0x12>
      if ( pHandle->hFinalSpeed < 0 )
 8000926:	200e      	movs	r0, #14
 8000928:	5e18      	ldrsh	r0, [r3, r0]
        retVal = -1;
 800092a:	43c0      	mvns	r0, r0
 800092c:	2302      	movs	r3, #2
 800092e:	17c0      	asrs	r0, r0, #31
 8000930:	4018      	ands	r0, r3
 8000932:	3801      	subs	r0, #1
 8000934:	e7ef      	b.n	8000916 <MCI_GetImposedMotorDirection+0x12>
      if ( pHandle->Iqdref.q < 0 )
 8000936:	2012      	movs	r0, #18
 8000938:	5e18      	ldrsh	r0, [r3, r0]
 800093a:	e7f6      	b.n	800092a <MCI_GetImposedMotorDirection+0x26>

0800093c <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 800093c:	7b02      	ldrb	r2, [r0, #12]
{
 800093e:	0003      	movs	r3, r0
  int16_t hRetVal = 0;
 8000940:	2000      	movs	r0, #0
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000942:	2a01      	cmp	r2, #1
 8000944:	d101      	bne.n	800094a <MCI_GetLastRampFinalSpeed+0xe>
  {
    hRetVal = pHandle->hFinalSpeed;
 8000946:	200e      	movs	r0, #14
 8000948:	5e18      	ldrsh	r0, [r3, r0]
  }
  return hRetVal;
}
 800094a:	4770      	bx	lr

0800094c <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 800094c:	b510      	push	{r4, lr}
   STC_StopRamp( pHandle->pSTC );
 800094e:	6840      	ldr	r0, [r0, #4]
 8000950:	f004 fdbe 	bl	80054d0 <STC_StopRamp>
}
 8000954:	bd10      	pop	{r4, pc}
 8000956:	46c0      	nop			; (mov r8, r8)

08000958 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000958:	b510      	push	{r4, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 800095a:	6840      	ldr	r0, [r0, #4]
 800095c:	f004 fd52 	bl	8005404 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000960:	f004 fcf8 	bl	8005354 <SPD_GetAvrgMecSpeedUnit>
}
 8000964:	bd10      	pop	{r4, pc}
 8000966:	46c0      	nop			; (mov r8, r8)

08000968 <MCI_GetMecSpeedRefUnit>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8000968:	b510      	push	{r4, lr}
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 800096a:	6840      	ldr	r0, [r0, #4]
 800096c:	f004 fd56 	bl	800541c <STC_GetMecSpeedRefUnit>
}
 8000970:	bd10      	pop	{r4, pc}
 8000972:	46c0      	nop			; (mov r8, r8)

08000974 <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 8000974:	b500      	push	{lr}
 8000976:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iab );
 8000978:	6881      	ldr	r1, [r0, #8]
 800097a:	2204      	movs	r2, #4
 800097c:	a801      	add	r0, sp, #4
 800097e:	f005 fc49 	bl	8006214 <memcpy>
 8000982:	466b      	mov	r3, sp
 8000984:	466a      	mov	r2, sp
 8000986:	88db      	ldrh	r3, [r3, #6]
 8000988:	8890      	ldrh	r0, [r2, #4]
 800098a:	041b      	lsls	r3, r3, #16
 800098c:	4318      	orrs	r0, r3
}
 800098e:	b003      	add	sp, #12
 8000990:	bd00      	pop	{pc}
 8000992:	46c0      	nop			; (mov r8, r8)

08000994 <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 8000994:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Ialphabeta );
 8000996:	6881      	ldr	r1, [r0, #8]
{
 8000998:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Ialphabeta );
 800099a:	2204      	movs	r2, #4
 800099c:	3104      	adds	r1, #4
 800099e:	a801      	add	r0, sp, #4
 80009a0:	f005 fc38 	bl	8006214 <memcpy>
 80009a4:	466b      	mov	r3, sp
 80009a6:	466a      	mov	r2, sp
 80009a8:	88db      	ldrh	r3, [r3, #6]
 80009aa:	8890      	ldrh	r0, [r2, #4]
 80009ac:	041b      	lsls	r3, r3, #16
 80009ae:	4318      	orrs	r0, r3
}
 80009b0:	b003      	add	sp, #12
 80009b2:	bd00      	pop	{pc}

080009b4 <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 80009b4:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Iqd );
 80009b6:	6881      	ldr	r1, [r0, #8]
{
 80009b8:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iqd );
 80009ba:	2204      	movs	r2, #4
 80009bc:	310c      	adds	r1, #12
 80009be:	a801      	add	r0, sp, #4
 80009c0:	f005 fc28 	bl	8006214 <memcpy>
 80009c4:	466b      	mov	r3, sp
 80009c6:	466a      	mov	r2, sp
 80009c8:	88db      	ldrh	r3, [r3, #6]
 80009ca:	8890      	ldrh	r0, [r2, #4]
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	4318      	orrs	r0, r3
}
 80009d0:	b003      	add	sp, #12
 80009d2:	bd00      	pop	{pc}

080009d4 <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 80009d4:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Iqdref );
 80009d6:	6881      	ldr	r1, [r0, #8]
{
 80009d8:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Iqdref );
 80009da:	2204      	movs	r2, #4
 80009dc:	3110      	adds	r1, #16
 80009de:	a801      	add	r0, sp, #4
 80009e0:	f005 fc18 	bl	8006214 <memcpy>
 80009e4:	466b      	mov	r3, sp
 80009e6:	466a      	mov	r2, sp
 80009e8:	88db      	ldrh	r3, [r3, #6]
 80009ea:	8890      	ldrh	r0, [r2, #4]
 80009ec:	041b      	lsls	r3, r3, #16
 80009ee:	4318      	orrs	r0, r3
}
 80009f0:	b003      	add	sp, #12
 80009f2:	bd00      	pop	{pc}

080009f4 <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 80009f4:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Vqd );
 80009f6:	6881      	ldr	r1, [r0, #8]
{
 80009f8:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Vqd );
 80009fa:	2204      	movs	r2, #4
 80009fc:	3116      	adds	r1, #22
 80009fe:	a801      	add	r0, sp, #4
 8000a00:	f005 fc08 	bl	8006214 <memcpy>
 8000a04:	466b      	mov	r3, sp
 8000a06:	466a      	mov	r2, sp
 8000a08:	88db      	ldrh	r3, [r3, #6]
 8000a0a:	8890      	ldrh	r0, [r2, #4]
 8000a0c:	041b      	lsls	r3, r3, #16
 8000a0e:	4318      	orrs	r0, r3
}
 8000a10:	b003      	add	sp, #12
 8000a12:	bd00      	pop	{pc}

08000a14 <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 8000a14:	b500      	push	{lr}
  return ( pHandle->pFOCVars->Valphabeta );
 8000a16:	6881      	ldr	r1, [r0, #8]
{
 8000a18:	b083      	sub	sp, #12
  return ( pHandle->pFOCVars->Valphabeta );
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	311a      	adds	r1, #26
 8000a1e:	a801      	add	r0, sp, #4
 8000a20:	f005 fbf8 	bl	8006214 <memcpy>
 8000a24:	466b      	mov	r3, sp
 8000a26:	466a      	mov	r2, sp
 8000a28:	88db      	ldrh	r3, [r3, #6]
 8000a2a:	8890      	ldrh	r0, [r2, #4]
 8000a2c:	041b      	lsls	r3, r3, #16
 8000a2e:	4318      	orrs	r0, r3
}
 8000a30:	b003      	add	sp, #12
 8000a32:	bd00      	pop	{pc}

08000a34 <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000a34:	6883      	ldr	r3, [r0, #8]
 8000a36:	201e      	movs	r0, #30
 8000a38:	5e18      	ldrsh	r0, [r3, r0]
}
 8000a3a:	4770      	bx	lr

08000a3c <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000a3c:	6883      	ldr	r3, [r0, #8]
 8000a3e:	8259      	strh	r1, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 8000a40:	8299      	strh	r1, [r3, #20]
}
 8000a42:	4770      	bx	lr

08000a44 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000a44:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000a46:	6884      	ldr	r4, [r0, #8]
 8000a48:	6840      	ldr	r0, [r0, #4]
 8000a4a:	f004 fd85 	bl	8005558 <STC_GetDefaultIqdref>
 8000a4e:	8220      	strh	r0, [r4, #16]
 8000a50:	0c00      	lsrs	r0, r0, #16
 8000a52:	8260      	strh	r0, [r4, #18]
}
 8000a54:	bd10      	pop	{r4, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)

08000a58 <MCM_Clarke>:
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000a58:	2180      	movs	r1, #128	; 0x80
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MCM_Clarke+0x48>)
 8000a5c:	b202      	sxth	r2, r0
 8000a5e:	1400      	asrs	r0, r0, #16
 8000a60:	4358      	muls	r0, r3
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000a62:	4353      	muls	r3, r2
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000a64:	425b      	negs	r3, r3
 8000a66:	1a1b      	subs	r3, r3, r0
 8000a68:	1a1b      	subs	r3, r3, r0
{
 8000a6a:	b084      	sub	sp, #16
  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000a6c:	13db      	asrs	r3, r3, #15
  if ( wbeta_tmp > INT16_MAX )
 8000a6e:	0209      	lsls	r1, r1, #8
 8000a70:	428b      	cmp	r3, r1
 8000a72:	da04      	bge.n	8000a7e <MCM_Clarke+0x26>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000a74:	490b      	ldr	r1, [pc, #44]	; (8000aa4 <MCM_Clarke+0x4c>)
 8000a76:	428b      	cmp	r3, r1
 8000a78:	da08      	bge.n	8000a8c <MCM_Clarke+0x34>
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MCM_Clarke+0x50>)
 8000a7c:	e000      	b.n	8000a80 <MCM_Clarke+0x28>
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <MCM_Clarke+0x54>)
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000a80:	0410      	lsls	r0, r2, #16
 8000a82:	041b      	lsls	r3, r3, #16
 8000a84:	0c00      	lsrs	r0, r0, #16
 8000a86:	4318      	orrs	r0, r3
}
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MCM_Clarke+0x50>)
 8000a8e:	1c19      	adds	r1, r3, #0
 8000a90:	b21b      	sxth	r3, r3
 8000a92:	4283      	cmp	r3, r0
 8000a94:	db01      	blt.n	8000a9a <MCM_Clarke+0x42>
 8000a96:	b20b      	sxth	r3, r1
 8000a98:	e7f2      	b.n	8000a80 <MCM_Clarke+0x28>
 8000a9a:	1c01      	adds	r1, r0, #0
 8000a9c:	b20b      	sxth	r3, r1
 8000a9e:	e7ef      	b.n	8000a80 <MCM_Clarke+0x28>
 8000aa0:	000049e6 	.word	0x000049e6
 8000aa4:	ffff8000 	.word	0xffff8000
 8000aa8:	ffff8001 	.word	0xffff8001
 8000aac:	00007fff 	.word	0x00007fff

08000ab0 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	469c      	mov	ip, r3
 8000ab6:	4460      	add	r0, ip
  uhindex = ( uint16_t )shindex;
 8000ab8:	b283      	uxth	r3, r0
{
 8000aba:	b530      	push	{r4, r5, lr}
  uhindex /= ( uint16_t )64;
 8000abc:	099b      	lsrs	r3, r3, #6

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000abe:	24c0      	movs	r4, #192	; 0xc0
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	2580      	movs	r5, #128	; 0x80
 8000ac4:	00a4      	lsls	r4, r4, #2
{
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2200      	movs	r2, #0
 8000aca:	b083      	sub	sp, #12
 8000acc:	4020      	ands	r0, r4
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000ace:	00ad      	lsls	r5, r5, #2
 8000ad0:	42a8      	cmp	r0, r5
 8000ad2:	d023      	beq.n	8000b1c <MCM_Trig_Functions+0x6c>
 8000ad4:	d815      	bhi.n	8000b02 <MCM_Trig_Functions+0x52>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	d029      	beq.n	8000b2e <MCM_Trig_Functions+0x7e>
 8000ada:	2480      	movs	r4, #128	; 0x80
 8000adc:	0064      	lsls	r4, r4, #1
 8000ade:	42a0      	cmp	r0, r4
 8000ae0:	d109      	bne.n	8000af6 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	43da      	mvns	r2, r3
 8000ae6:	4918      	ldr	r1, [pc, #96]	; (8000b48 <MCM_Trig_Functions+0x98>)
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	0052      	lsls	r2, r2, #1
 8000aec:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000aee:	005b      	lsls	r3, r3, #1
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000af0:	4252      	negs	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8000af2:	5e59      	ldrsh	r1, [r3, r1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000af4:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8000af6:	0408      	lsls	r0, r1, #16
 8000af8:	0412      	lsls	r2, r2, #16
 8000afa:	0c00      	lsrs	r0, r0, #16
 8000afc:	4310      	orrs	r0, r2
}
 8000afe:	b003      	add	sp, #12
 8000b00:	bd30      	pop	{r4, r5, pc}
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8000b02:	42a0      	cmp	r0, r4
 8000b04:	d1f7      	bne.n	8000af6 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	43da      	mvns	r2, r3
 8000b0a:	490f      	ldr	r1, [pc, #60]	; (8000b48 <MCM_Trig_Functions+0x98>)
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	0052      	lsls	r2, r2, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b10:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b12:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b14:	5a59      	ldrh	r1, [r3, r1]
 8000b16:	4249      	negs	r1, r1
 8000b18:	b209      	sxth	r1, r1
      break;
 8000b1a:	e7ec      	b.n	8000af6 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b20:	43db      	mvns	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b22:	4909      	ldr	r1, [pc, #36]	; (8000b48 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b28:	5e52      	ldrsh	r2, [r2, r1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b2a:	5e59      	ldrsh	r1, [r3, r1]
      break;
 8000b2c:	e7e3      	b.n	8000af6 <MCM_Trig_Functions+0x46>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	005a      	lsls	r2, r3, #1
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b32:	43db      	mvns	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b34:	4904      	ldr	r1, [pc, #16]	; (8000b48 <MCM_Trig_Functions+0x98>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	005b      	lsls	r3, r3, #1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b3a:	5a52      	ldrh	r2, [r2, r1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b3c:	5a59      	ldrh	r1, [r3, r1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b3e:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b40:	4249      	negs	r1, r1
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8000b42:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8000b44:	b209      	sxth	r1, r1
      break;
 8000b46:	e7d6      	b.n	8000af6 <MCM_Trig_Functions+0x46>
 8000b48:	08006240 	.word	0x08006240

08000b4c <MCM_Park>:
{
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	9001      	str	r0, [sp, #4]
 8000b52:	b205      	sxth	r5, r0
 8000b54:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000b56:	0008      	movs	r0, r1
 8000b58:	f7ff ffaa 	bl	8000ab0 <MCM_Trig_Functions>
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000b5c:	b201      	sxth	r1, r0
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000b5e:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000b60:	000a      	movs	r2, r1
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000b62:	0018      	movs	r0, r3
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000b64:	436a      	muls	r2, r5
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8000b66:	4360      	muls	r0, r4
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000b68:	1a12      	subs	r2, r2, r0
  if ( wqd_tmp > INT16_MAX )
 8000b6a:	2080      	movs	r0, #128	; 0x80
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000b6c:	13d2      	asrs	r2, r2, #15
  if ( wqd_tmp > INT16_MAX )
 8000b6e:	0200      	lsls	r0, r0, #8
 8000b70:	4282      	cmp	r2, r0
 8000b72:	da12      	bge.n	8000b9a <MCM_Park+0x4e>
  else if ( wqd_tmp < ( -32768 ) )
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <MCM_Park+0x94>)
 8000b76:	4282      	cmp	r2, r0
 8000b78:	da24      	bge.n	8000bc4 <MCM_Park+0x78>
  if ( wqd_tmp > INT16_MAX )
 8000b7a:	2280      	movs	r2, #128	; 0x80
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000b7c:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000b7e:	4361      	muls	r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000b80:	185b      	adds	r3, r3, r1
 8000b82:	4818      	ldr	r0, [pc, #96]	; (8000be4 <MCM_Park+0x98>)
 8000b84:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000b86:	0212      	lsls	r2, r2, #8
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	db0f      	blt.n	8000bac <MCM_Park+0x60>
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MCM_Park+0x9c>)
  return ( Output );
 8000b8e:	0400      	lsls	r0, r0, #16
 8000b90:	041b      	lsls	r3, r3, #16
 8000b92:	0c00      	lsrs	r0, r0, #16
 8000b94:	4318      	orrs	r0, r3
}
 8000b96:	b004      	add	sp, #16
 8000b98:	bd70      	pop	{r4, r5, r6, pc}
 8000b9a:	4813      	ldr	r0, [pc, #76]	; (8000be8 <MCM_Park+0x9c>)
  if ( wqd_tmp > INT16_MAX )
 8000b9c:	2280      	movs	r2, #128	; 0x80
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8000b9e:	436b      	muls	r3, r5
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000ba0:	4361      	muls	r1, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000ba2:	185b      	adds	r3, r3, r1
 8000ba4:	13db      	asrs	r3, r3, #15
  if ( wqd_tmp > INT16_MAX )
 8000ba6:	0212      	lsls	r2, r2, #8
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	daef      	bge.n	8000b8c <MCM_Park+0x40>
  else if ( wqd_tmp < ( -32768 ) )
 8000bac:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <MCM_Park+0x94>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	da01      	bge.n	8000bb6 <MCM_Park+0x6a>
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MCM_Park+0x98>)
 8000bb4:	e7eb      	b.n	8000b8e <MCM_Park+0x42>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000bb6:	490b      	ldr	r1, [pc, #44]	; (8000be4 <MCM_Park+0x98>)
 8000bb8:	1c1a      	adds	r2, r3, #0
 8000bba:	b21b      	sxth	r3, r3
 8000bbc:	428b      	cmp	r3, r1
 8000bbe:	db0b      	blt.n	8000bd8 <MCM_Park+0x8c>
 8000bc0:	b213      	sxth	r3, r2
 8000bc2:	e7e4      	b.n	8000b8e <MCM_Park+0x42>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000bc4:	4e07      	ldr	r6, [pc, #28]	; (8000be4 <MCM_Park+0x98>)
 8000bc6:	1c10      	adds	r0, r2, #0
 8000bc8:	b212      	sxth	r2, r2
 8000bca:	42b2      	cmp	r2, r6
 8000bcc:	db01      	blt.n	8000bd2 <MCM_Park+0x86>
 8000bce:	b200      	sxth	r0, r0
 8000bd0:	e7e4      	b.n	8000b9c <MCM_Park+0x50>
 8000bd2:	1c30      	adds	r0, r6, #0
 8000bd4:	b200      	sxth	r0, r0
 8000bd6:	e7e1      	b.n	8000b9c <MCM_Park+0x50>
 8000bd8:	1c0a      	adds	r2, r1, #0
 8000bda:	b213      	sxth	r3, r2
 8000bdc:	e7d7      	b.n	8000b8e <MCM_Park+0x42>
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	ffff8000 	.word	0xffff8000
 8000be4:	ffff8001 	.word	0xffff8001
 8000be8:	00007fff 	.word	0x00007fff

08000bec <MCM_Rev_Park>:
{
 8000bec:	b530      	push	{r4, r5, lr}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	b205      	sxth	r5, r0
 8000bf2:	9001      	str	r0, [sp, #4]
 8000bf4:	1404      	asrs	r4, r0, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000bf6:	0008      	movs	r0, r1
 8000bf8:	f7ff ff5a 	bl	8000ab0 <MCM_Trig_Functions>
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000bfc:	b202      	sxth	r2, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000bfe:	1403      	asrs	r3, r0, #16
 8000c00:	0019      	movs	r1, r3
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c02:	0010      	movs	r0, r2
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8000c04:	4361      	muls	r1, r4
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8000c06:	4368      	muls	r0, r5
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8000c08:	4354      	muls	r4, r2
  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8000c0a:	436b      	muls	r3, r5
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8000c0c:	1840      	adds	r0, r0, r1
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8000c0e:	1ae4      	subs	r4, r4, r3
 8000c10:	13e4      	asrs	r4, r4, #15
  return ( Output );
 8000c12:	0040      	lsls	r0, r0, #1
 8000c14:	0424      	lsls	r4, r4, #16
 8000c16:	0c00      	lsrs	r0, r0, #16
 8000c18:	4320      	orrs	r0, r4
}
 8000c1a:	b005      	add	sp, #20
 8000c1c:	bd30      	pop	{r4, r5, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <FOC_Clear>:
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8000c20:	2126      	movs	r1, #38	; 0x26
 8000c22:	2200      	movs	r2, #0
 8000c24:	4341      	muls	r1, r0
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <FOC_Clear+0x50>)
{
 8000c28:	b510      	push	{r4, lr}
  FOCVars[bMotor].Iab = NULL_ab;
 8000c2a:	52ca      	strh	r2, [r1, r3]
 8000c2c:	185b      	adds	r3, r3, r1
 8000c2e:	805a      	strh	r2, [r3, #2]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8000c30:	809a      	strh	r2, [r3, #4]
 8000c32:	80da      	strh	r2, [r3, #6]
  FOCVars[bMotor].Iqd = NULL_qd;
 8000c34:	819a      	strh	r2, [r3, #12]
 8000c36:	81da      	strh	r2, [r3, #14]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8000c38:	821a      	strh	r2, [r3, #16]
 8000c3a:	825a      	strh	r2, [r3, #18]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8000c3c:	83da      	strh	r2, [r3, #30]
  FOCVars[bMotor].Vqd = NULL_qd;
 8000c3e:	82da      	strh	r2, [r3, #22]
 8000c40:	831a      	strh	r2, [r3, #24]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8000c42:	835a      	strh	r2, [r3, #26]
 8000c44:	839a      	strh	r2, [r3, #28]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8000c46:	841a      	strh	r2, [r3, #32]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <FOC_Clear+0x54>)
 8000c4a:	0084      	lsls	r4, r0, #2
 8000c4c:	58e0      	ldr	r0, [r4, r3]
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f003 fc1a 	bl	8004488 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <FOC_Clear+0x58>)
 8000c56:	2100      	movs	r1, #0
 8000c58:	58e0      	ldr	r0, [r4, r3]
 8000c5a:	f003 fc15 	bl	8004488 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <FOC_Clear+0x5c>)
 8000c60:	58e0      	ldr	r0, [r4, r3]
 8000c62:	f004 fbd1 	bl	8005408 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <FOC_Clear+0x60>)
 8000c68:	58e0      	ldr	r0, [r4, r3]
 8000c6a:	f003 fdb3 	bl	80047d4 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8000c6e:	bd10      	pop	{r4, pc}
 8000c70:	200008b8 	.word	0x200008b8
 8000c74:	20000974 	.word	0x20000974
 8000c78:	20000970 	.word	0x20000970
 8000c7c:	20000980 	.word	0x20000980
 8000c80:	20000988 	.word	0x20000988

08000c84 <MCboot>:
{
 8000c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c86:	46de      	mov	lr, fp
 8000c88:	4657      	mov	r7, sl
 8000c8a:	464e      	mov	r6, r9
 8000c8c:	4645      	mov	r5, r8
  bMCBootCompleted = 0;
 8000c8e:	2400      	movs	r4, #0
{
 8000c90:	b5e0      	push	{r5, r6, r7, lr}
  STM_Init(&STM[M1]);
 8000c92:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <MCboot+0x198>)
{
 8000c94:	b08f      	sub	sp, #60	; 0x3c
 8000c96:	9003      	str	r0, [sp, #12]
  STM_Init(&STM[M1]);
 8000c98:	0018      	movs	r0, r3
{
 8000c9a:	9104      	str	r1, [sp, #16]
  STM_Init(&STM[M1]);
 8000c9c:	9302      	str	r3, [sp, #8]
 8000c9e:	f004 fc6b 	bl	8005578 <STM_Init>
  bMCBootCompleted = 0;
 8000ca2:	4b5f      	ldr	r3, [pc, #380]	; (8000e20 <MCboot+0x19c>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000ca4:	4f5f      	ldr	r7, [pc, #380]	; (8000e24 <MCboot+0x1a0>)
  pCLM[M1] = &CircleLimitationM1;
 8000ca6:	4a60      	ldr	r2, [pc, #384]	; (8000e28 <MCboot+0x1a4>)
  bMCBootCompleted = 0;
 8000ca8:	701c      	strb	r4, [r3, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000caa:	4860      	ldr	r0, [pc, #384]	; (8000e2c <MCboot+0x1a8>)
  bMCBootCompleted = 0;
 8000cac:	9305      	str	r3, [sp, #20]
  pCLM[M1] = &CircleLimitationM1;
 8000cae:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <MCboot+0x1ac>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8000cb0:	6038      	str	r0, [r7, #0]
  pCLM[M1] = &CircleLimitationM1;
 8000cb2:	601a      	str	r2, [r3, #0]
  R3_1_Init(&PWM_Handle_M1);
 8000cb4:	f003 feb6 	bl	8004a24 <R3_1_Init>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8000cb8:	4d5e      	ldr	r5, [pc, #376]	; (8000e34 <MCboot+0x1b0>)
 8000cba:	0028      	movs	r0, r5
 8000cbc:	f003 fbd0 	bl	8004460 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000cc0:	4a5d      	ldr	r2, [pc, #372]	; (8000e38 <MCboot+0x1b4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000cc2:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <MCboot+0x1b8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8000cc4:	4692      	mov	sl, r2
 8000cc6:	6015      	str	r5, [r2, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8000cc8:	4a5d      	ldr	r2, [pc, #372]	; (8000e40 <MCboot+0x1bc>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000cca:	4d5e      	ldr	r5, [pc, #376]	; (8000e44 <MCboot+0x1c0>)
  STO_PLL_Init (&STO_PLL_M1);
 8000ccc:	4690      	mov	r8, r2
 8000cce:	0010      	movs	r0, r2
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000cd0:	4656      	mov	r6, sl
  pSTC[M1] = &SpeednTorqCtrlM1;
 8000cd2:	602b      	str	r3, [r5, #0]
  STO_PLL_Init (&STO_PLL_M1);
 8000cd4:	f004 ff18 	bl	8005b08 <STO_PLL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &STO_PLL_M1._Super);
 8000cd8:	4643      	mov	r3, r8
 8000cda:	4642      	mov	r2, r8
 8000cdc:	6831      	ldr	r1, [r6, #0]
 8000cde:	6828      	ldr	r0, [r5, #0]
 8000ce0:	9306      	str	r3, [sp, #24]
 8000ce2:	f004 fb7b 	bl	80053dc <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 8000ce6:	4e58      	ldr	r6, [pc, #352]	; (8000e48 <MCboot+0x1c4>)
 8000ce8:	0030      	movs	r0, r6
 8000cea:	f005 f94f 	bl	8005f8c <VSS_Init>
  RUC_Init(&RevUpControlM1,pSTC[M1],&VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8000cee:	683a      	ldr	r2, [r7, #0]
 8000cf0:	4856      	ldr	r0, [pc, #344]	; (8000e4c <MCboot+0x1c8>)
 8000cf2:	6829      	ldr	r1, [r5, #0]
 8000cf4:	4b56      	ldr	r3, [pc, #344]	; (8000e50 <MCboot+0x1cc>)
 8000cf6:	9200      	str	r2, [sp, #0]
 8000cf8:	0032      	movs	r2, r6
 8000cfa:	9607      	str	r6, [sp, #28]
 8000cfc:	9008      	str	r0, [sp, #32]
 8000cfe:	f004 fa43 	bl	8005188 <RUC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8000d02:	4e54      	ldr	r6, [pc, #336]	; (8000e54 <MCboot+0x1d0>)
 8000d04:	46b0      	mov	r8, r6
 8000d06:	0030      	movs	r0, r6
 8000d08:	f003 fbaa 	bl	8004460 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8000d0c:	4e52      	ldr	r6, [pc, #328]	; (8000e58 <MCboot+0x1d4>)
 8000d0e:	0030      	movs	r0, r6
 8000d10:	f003 fba6 	bl	8004460 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d14:	4642      	mov	r2, r8
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d16:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <MCboot+0x1d8>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d18:	4951      	ldr	r1, [pc, #324]	; (8000e60 <MCboot+0x1dc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d1a:	4852      	ldr	r0, [pc, #328]	; (8000e64 <MCboot+0x1e0>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d1c:	601e      	str	r6, [r3, #0]
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d1e:	4e52      	ldr	r6, [pc, #328]	; (8000e68 <MCboot+0x1e4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8000d20:	600a      	str	r2, [r1, #0]
 8000d22:	9109      	str	r1, [sp, #36]	; 0x24
  pPIDId[M1] = &PIDIdHandle_M1;
 8000d24:	930a      	str	r3, [sp, #40]	; 0x28
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8000d26:	6030      	str	r0, [r6, #0]
  RVBS_Init(pBusSensorM1);
 8000d28:	f004 f95a 	bl	8004fe0 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d2c:	4b4f      	ldr	r3, [pc, #316]	; (8000e6c <MCboot+0x1e8>)
 8000d2e:	4a50      	ldr	r2, [pc, #320]	; (8000e70 <MCboot+0x1ec>)
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d30:	6831      	ldr	r1, [r6, #0]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8000d32:	920b      	str	r2, [sp, #44]	; 0x2c
 8000d34:	6013      	str	r3, [r2, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8000d36:	2288      	movs	r2, #136	; 0x88
 8000d38:	0052      	lsls	r2, r2, #1
 8000d3a:	5099      	str	r1, [r3, r2]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8000d3c:	494d      	ldr	r1, [pc, #308]	; (8000e74 <MCboot+0x1f0>)
 8000d3e:	3a04      	subs	r2, #4
 8000d40:	4689      	mov	r9, r1
 8000d42:	5099      	str	r1, [r3, r2]
  NTC_Init(&TempSensorParamsM1);
 8000d44:	494c      	ldr	r1, [pc, #304]	; (8000e78 <MCboot+0x1f4>)
 8000d46:	4688      	mov	r8, r1
 8000d48:	0008      	movs	r0, r1
 8000d4a:	f003 fb43 	bl	80043d4 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d4e:	4642      	mov	r2, r8
 8000d50:	494a      	ldr	r1, [pc, #296]	; (8000e7c <MCboot+0x1f8>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d52:	4b4b      	ldr	r3, [pc, #300]	; (8000e80 <MCboot+0x1fc>)
 8000d54:	484b      	ldr	r0, [pc, #300]	; (8000e84 <MCboot+0x200>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d56:	600a      	str	r2, [r1, #0]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8000d58:	6018      	str	r0, [r3, #0]
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8000d5a:	468b      	mov	fp, r1
  REMNG_Init(pREMNG[M1]);
 8000d5c:	f004 f98c 	bl	8005078 <REMNG_Init>
  FOC_Clear(M1);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff5d 	bl	8000c20 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000d66:	2324      	movs	r3, #36	; 0x24
 8000d68:	464a      	mov	r2, r9
 8000d6a:	2101      	movs	r1, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000d6c:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8000d6e:	54d1      	strb	r1, [r2, r3]
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8000d70:	f004 fbf2 	bl	8005558 <STC_GetDefaultIqdref>
 8000d74:	464a      	mov	r2, r9
 8000d76:	6110      	str	r0, [r2, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d78:	6828      	ldr	r0, [r5, #0]
 8000d7a:	f004 fbed 	bl	8005558 <STC_GetDefaultIqdref>
 8000d7e:	464a      	mov	r2, r9
  oMCInterface[M1] = & Mci[M1];
 8000d80:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <MCboot+0x204>)
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d82:	0c00      	lsrs	r0, r0, #16
  oMCInterface[M1] = & Mci[M1];
 8000d84:	4698      	mov	r8, r3
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8000d86:	8290      	strh	r0, [r2, #20]
  oMCInterface[M1] = & Mci[M1];
 8000d88:	4840      	ldr	r0, [pc, #256]	; (8000e8c <MCboot+0x208>)
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000d8a:	682a      	ldr	r2, [r5, #0]
 8000d8c:	9902      	ldr	r1, [sp, #8]
  oMCInterface[M1] = & Mci[M1];
 8000d8e:	6018      	str	r0, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8000d90:	464b      	mov	r3, r9
 8000d92:	f7ff fd31 	bl	80007f8 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8000d96:	4640      	mov	r0, r8
 8000d98:	6800      	ldr	r0, [r0, #0]
 8000d9a:	4681      	mov	r9, r0
 8000d9c:	6828      	ldr	r0, [r5, #0]
 8000d9e:	f004 fbd1 	bl	8005544 <STC_GetMecSpeedRefUnitDefault>
 8000da2:	2200      	movs	r2, #0
 8000da4:	0001      	movs	r1, r0
 8000da6:	4648      	mov	r0, r9
 8000da8:	f7ff fd30 	bl	800080c <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8000dac:	4640      	mov	r0, r8
 8000dae:	6803      	ldr	r3, [r0, #0]
 8000db0:	9803      	ldr	r0, [sp, #12]
  bMCBootCompleted = 1;
 8000db2:	2101      	movs	r1, #1
  pMCIList[M1] = oMCInterface[M1];
 8000db4:	6003      	str	r3, [r0, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000db6:	4650      	mov	r0, sl
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MCboot+0x20c>)
 8000dba:	6802      	ldr	r2, [r0, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8000dbe:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000dc0:	6802      	ldr	r2, [r0, #0]
  MCT[M1].pPIDId = pPIDId[M1];
 8000dc2:	980a      	ldr	r0, [sp, #40]	; 0x28
  MCT[M1].pPIDIq = pPIDIq[M1];
 8000dc4:	605a      	str	r2, [r3, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8000dc6:	6802      	ldr	r2, [r0, #0]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000dc8:	9808      	ldr	r0, [sp, #32]
  MCT[M1].pPIDId = pPIDId[M1];
 8000dca:	609a      	str	r2, [r3, #8]
  MCT[M1].pRevupCtrl = &RevUpControlM1;              /* only if M1 is sensorless*/
 8000dcc:	6158      	str	r0, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000dce:	9806      	ldr	r0, [sp, #24]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000dd0:	683a      	ldr	r2, [r7, #0]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &STO_PLL_M1;
 8000dd2:	6198      	str	r0, [r3, #24]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000dd4:	9807      	ldr	r0, [sp, #28]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8000dd6:	611a      	str	r2, [r3, #16]
  MCT[M1].pSpeedSensorVirtual = &VirtualSpeedSensorM1;  /* only if M1 is sensorless*/
 8000dd8:	6218      	str	r0, [r3, #32]
  MCT[M1].pStateMachine = &STM[M1];
 8000dda:	9802      	ldr	r0, [sp, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000ddc:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pStateMachine = &STM[M1];
 8000dde:	6298      	str	r0, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000de0:	4658      	mov	r0, fp
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000de4:	6802      	ldr	r2, [r0, #0]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8000de6:	60dc      	str	r4, [r3, #12]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000dea:	6832      	ldr	r2, [r6, #0]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8000dec:	61dc      	str	r4, [r3, #28]
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8000dee:	635c      	str	r4, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8000df0:	639c      	str	r4, [r3, #56]	; 0x38
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8000df2:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000df4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  MCT[M1].pFW = MC_NULL;
 8000df6:	641c      	str	r4, [r3, #64]	; 0x40
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000df8:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pFF = MC_NULL;
 8000dfa:	645c      	str	r4, [r3, #68]	; 0x44
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8000dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  pMCTList[M1] = &MCT[M1];
 8000dfe:	9a04      	ldr	r2, [sp, #16]
  MCT[M1].pPosCtrl = MC_NULL;
 8000e00:	649c      	str	r4, [r3, #72]	; 0x48
  MCT[M1].pSCC = MC_NULL;
 8000e02:	64dc      	str	r4, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8000e04:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8000e06:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8000e08:	9b05      	ldr	r3, [sp, #20]
 8000e0a:	7019      	strb	r1, [r3, #0]
}
 8000e0c:	b00f      	add	sp, #60	; 0x3c
 8000e0e:	bcf0      	pop	{r4, r5, r6, r7}
 8000e10:	46bb      	mov	fp, r7
 8000e12:	46b2      	mov	sl, r6
 8000e14:	46a9      	mov	r9, r5
 8000e16:	46a0      	mov	r8, r4
 8000e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000950 	.word	0x20000950
 8000e20:	20000956 	.word	0x20000956
 8000e24:	20000988 	.word	0x20000988
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	2000024c 	.word	0x2000024c
 8000e30:	20000968 	.word	0x20000968
 8000e34:	2000010c 	.word	0x2000010c
 8000e38:	20000978 	.word	0x20000978
 8000e3c:	200004fc 	.word	0x200004fc
 8000e40:	200003d4 	.word	0x200003d4
 8000e44:	20000980 	.word	0x20000980
 8000e48:	20000558 	.word	0x20000558
 8000e4c:	20000348 	.word	0x20000348
 8000e50:	200003c0 	.word	0x200003c0
 8000e54:	200000e0 	.word	0x200000e0
 8000e58:	200000b4 	.word	0x200000b4
 8000e5c:	20000970 	.word	0x20000970
 8000e60:	20000974 	.word	0x20000974
 8000e64:	20000320 	.word	0x20000320
 8000e68:	20000964 	.word	0x20000964
 8000e6c:	20000138 	.word	0x20000138
 8000e70:	2000096c 	.word	0x2000096c
 8000e74:	200008b8 	.word	0x200008b8
 8000e78:	20000530 	.word	0x20000530
 8000e7c:	20000984 	.word	0x20000984
 8000e80:	2000097c 	.word	0x2000097c
 8000e84:	200002c8 	.word	0x200002c8
 8000e88:	20000960 	.word	0x20000960
 8000e8c:	20000934 	.word	0x20000934
 8000e90:	200008e0 	.word	0x200008e0

08000e94 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8000e94:	4770      	bx	lr
 8000e96:	46c0      	nop			; (mov r8, r8)

08000e98 <FOC_CalcCurrRef>:
{

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e98:	2326      	movs	r3, #38	; 0x26
 8000e9a:	4343      	muls	r3, r0
{
 8000e9c:	b510      	push	{r4, lr}
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8000e9e:	4c08      	ldr	r4, [pc, #32]	; (8000ec0 <FOC_CalcCurrRef+0x28>)
 8000ea0:	18e4      	adds	r4, r4, r3
 8000ea2:	0023      	movs	r3, r4
 8000ea4:	3324      	adds	r3, #36	; 0x24
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d000      	beq.n	8000eae <FOC_CalcCurrRef+0x16>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8000eac:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <FOC_CalcCurrRef+0x2c>)
 8000eb0:	0080      	lsls	r0, r0, #2
 8000eb2:	58c0      	ldr	r0, [r0, r3]
 8000eb4:	f004 fb10 	bl	80054d8 <STC_CalcTorqueReference>
 8000eb8:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8000eba:	8220      	strh	r0, [r4, #16]
}
 8000ebc:	e7f6      	b.n	8000eac <FOC_CalcCurrRef+0x14>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	200008b8 	.word	0x200008b8
 8000ec4:	20000980 	.word	0x20000980

08000ec8 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8000ec8:	4b01      	ldr	r3, [pc, #4]	; (8000ed0 <TSK_SetChargeBootCapDelayM1+0x8>)
 8000eca:	8018      	strh	r0, [r3, #0]
}
 8000ecc:	4770      	bx	lr
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	20000958 	.word	0x20000958

08000ed4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <TSK_ChargeBootCapDelayHasElapsedM1+0xc>)
 8000ed6:	8818      	ldrh	r0, [r3, #0]
 8000ed8:	4243      	negs	r3, r0
 8000eda:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000edc:	b2c0      	uxtb	r0, r0
}
 8000ede:	4770      	bx	lr
 8000ee0:	20000958 	.word	0x20000958

08000ee4 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8000ee4:	4b01      	ldr	r3, [pc, #4]	; (8000eec <TSK_SetStopPermanencyTimeM1+0x8>)
 8000ee6:	8018      	strh	r0, [r3, #0]
}
 8000ee8:	4770      	bx	lr
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	2000095c 	.word	0x2000095c

08000ef0 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <TSK_StopPermanencyTimeHasElapsedM1+0xc>)
 8000ef2:	8818      	ldrh	r0, [r3, #0]
 8000ef4:	4243      	negs	r3, r0
 8000ef6:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return (retVal);
 8000ef8:	b2c0      	uxtb	r0, r0
}
 8000efa:	4770      	bx	lr
 8000efc:	2000095c 	.word	0x2000095c

08000f00 <TSK_MediumFrequencyTaskM1>:
{
 8000f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f02:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	466a      	mov	r2, sp
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000f08:	4e9a      	ldr	r6, [pc, #616]	; (8001174 <TSK_MediumFrequencyTaskM1+0x274>)
 8000f0a:	4669      	mov	r1, sp
 8000f0c:	0030      	movs	r0, r6
  int16_t wAux = 0;
 8000f0e:	8013      	strh	r3, [r2, #0]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000f10:	f004 fce8 	bl	80058e4 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8000f14:	4f98      	ldr	r7, [pc, #608]	; (8001178 <TSK_MediumFrequencyTaskM1+0x278>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit( &STO_PLL_M1, &wAux );
 8000f16:	0004      	movs	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8000f18:	6838      	ldr	r0, [r7, #0]
 8000f1a:	f003 fb01 	bl	8004520 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8000f1e:	4d97      	ldr	r5, [pc, #604]	; (800117c <TSK_MediumFrequencyTaskM1+0x27c>)
 8000f20:	0028      	movs	r0, r5
 8000f22:	f004 fbbd 	bl	80056a0 <STM_GetState>
  switch ( StateM1 )
 8000f26:	3803      	subs	r0, #3
 8000f28:	b2c0      	uxtb	r0, r0
 8000f2a:	2810      	cmp	r0, #16
 8000f2c:	d810      	bhi.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
 8000f2e:	4a94      	ldr	r2, [pc, #592]	; (8001180 <TSK_MediumFrequencyTaskM1+0x280>)
 8000f30:	0083      	lsls	r3, r0, #2
 8000f32:	58d3      	ldr	r3, [r2, r3]
 8000f34:	469f      	mov	pc, r3
    STC_SetSpeedSensor( pSTC[M1],&VirtualSpeedSensorM1._Super );  	/*  sensor-less */
 8000f36:	4c93      	ldr	r4, [pc, #588]	; (8001184 <TSK_MediumFrequencyTaskM1+0x284>)
 8000f38:	4b93      	ldr	r3, [pc, #588]	; (8001188 <TSK_MediumFrequencyTaskM1+0x288>)
 8000f3a:	0021      	movs	r1, r4
 8000f3c:	6818      	ldr	r0, [r3, #0]
 8000f3e:	f004 fa5f 	bl	8005400 <STC_SetSpeedSensor>
    VSS_Clear( &VirtualSpeedSensorM1 ); /* Reset measured speed in IDLE */
 8000f42:	0020      	movs	r0, r4
 8000f44:	f005 f806 	bl	8005f54 <VSS_Clear>
    STM_NextState( &STM[M1], IDLE );
 8000f48:	2100      	movs	r1, #0
 8000f4a:	0028      	movs	r0, r5
 8000f4c:	f004 fb34 	bl	80055b8 <STM_NextState>
}
 8000f50:	b003      	add	sp, #12
 8000f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000f54:	488d      	ldr	r0, [pc, #564]	; (800118c <TSK_MediumFrequencyTaskM1+0x28c>)
 8000f56:	f004 f98f 	bl	8005278 <RUC_Exec>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	d100      	bne.n	8000f60 <TSK_MediumFrequencyTaskM1+0x60>
 8000f5e:	e103      	b.n	8001168 <TSK_MediumFrequencyTaskM1+0x268>
        LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1,&hForcedMecSpeedUnit);
 8000f60:	4c88      	ldr	r4, [pc, #544]	; (8001184 <TSK_MediumFrequencyTaskM1+0x284>)
 8000f62:	a901      	add	r1, sp, #4
 8000f64:	0020      	movs	r0, r4
 8000f66:	f005 f879 	bl	800605c <VSS_CalcAvrgMecSpeedUnit>
 8000f6a:	0006      	movs	r6, r0
        LoopClosed |= VSS_TransitionEnded( &VirtualSpeedSensorM1 );
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f005 f921 	bl	80061b4 <VSS_TransitionEnded>
        if ( LoopClosed == true )
 8000f72:	2e00      	cmp	r6, #0
 8000f74:	d101      	bne.n	8000f7a <TSK_MediumFrequencyTaskM1+0x7a>
 8000f76:	2800      	cmp	r0, #0
 8000f78:	d0ea      	beq.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000f7a:	4b85      	ldr	r3, [pc, #532]	; (8001190 <TSK_MediumFrequencyTaskM1+0x290>)
 8000f7c:	681e      	ldr	r6, [r3, #0]
                               (int32_t) ( FOCVars[M1].Iqdref.q * PID_GetKIDivisor(pPIDSpeed[M1]) /
 8000f7e:	4b85      	ldr	r3, [pc, #532]	; (8001194 <TSK_MediumFrequencyTaskM1+0x294>)
 8000f80:	0030      	movs	r0, r6
 8000f82:	2410      	movs	r4, #16
 8000f84:	5f1c      	ldrsh	r4, [r3, r4]
 8000f86:	f003 fa83 	bl	8004490 <PID_GetKIDivisor>
 8000f8a:	0021      	movs	r1, r4
 8000f8c:	4341      	muls	r1, r0
          PID_SetIntegralTerm( pPIDSpeed[M1],
 8000f8e:	0030      	movs	r0, r6
 8000f90:	f003 fa7a 	bl	8004488 <PID_SetIntegralTerm>
          STM_NextState( &STM[M1], START_RUN );
 8000f94:	2105      	movs	r1, #5
 8000f96:	0028      	movs	r0, r5
 8000f98:	f004 fb0e 	bl	80055b8 <STM_NextState>
    break;
 8000f9c:	e7d8      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    RUC_Clear( &RevUpControlM1, MCI_GetImposedMotorDirection( oMCInterface[M1] ) );
 8000f9e:	4b7e      	ldr	r3, [pc, #504]	; (8001198 <TSK_MediumFrequencyTaskM1+0x298>)
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	f7ff fcaf 	bl	8000904 <MCI_GetImposedMotorDirection>
 8000fa6:	4b79      	ldr	r3, [pc, #484]	; (800118c <TSK_MediumFrequencyTaskM1+0x28c>)
 8000fa8:	0001      	movs	r1, r0
 8000faa:	0018      	movs	r0, r3
 8000fac:	f004 f926 	bl	80051fc <RUC_Clear>
    R3_1_TurnOnLowSides( pwmcHandle[M1] );
 8000fb0:	4b7a      	ldr	r3, [pc, #488]	; (800119c <TSK_MediumFrequencyTaskM1+0x29c>)
 8000fb2:	6818      	ldr	r0, [r3, #0]
 8000fb4:	f003 fe10 	bl	8004bd8 <R3_1_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8000fb8:	2014      	movs	r0, #20
 8000fba:	f7ff ff85 	bl	8000ec8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8000fbe:	2110      	movs	r1, #16
 8000fc0:	0028      	movs	r0, r5
 8000fc2:	f004 faf9 	bl	80055b8 <STM_NextState>
    break;
 8000fc6:	e7c3      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
      if( ! RUC_Exec( &RevUpControlM1 ) )
 8000fc8:	4c70      	ldr	r4, [pc, #448]	; (800118c <TSK_MediumFrequencyTaskM1+0x28c>)
 8000fca:	0020      	movs	r0, r4
 8000fcc:	f004 f954 	bl	8005278 <RUC_Exec>
 8000fd0:	2800      	cmp	r0, #0
 8000fd2:	d100      	bne.n	8000fd6 <TSK_MediumFrequencyTaskM1+0xd6>
 8000fd4:	e0c2      	b.n	800115c <TSK_MediumFrequencyTaskM1+0x25c>
        IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8000fd6:	4b6c      	ldr	r3, [pc, #432]	; (8001188 <TSK_MediumFrequencyTaskM1+0x288>)
 8000fd8:	6818      	ldr	r0, [r3, #0]
 8000fda:	f004 fa7d 	bl	80054d8 <STC_CalcTorqueReference>
        IqdRef.d = FOCVars[M1].UserIdref;
 8000fde:	4b6d      	ldr	r3, [pc, #436]	; (8001194 <TSK_MediumFrequencyTaskM1+0x294>)
 8000fe0:	2114      	movs	r1, #20
 8000fe2:	5e5a      	ldrsh	r2, [r3, r1]
        FOCVars[M1].Iqdref = IqdRef;
 8000fe4:	8218      	strh	r0, [r3, #16]
 8000fe6:	825a      	strh	r2, [r3, #18]
      (void) VSS_CalcAvrgMecSpeedUnit( &VirtualSpeedSensorM1, &hForcedMecSpeedUnit );
 8000fe8:	466b      	mov	r3, sp
 8000fea:	4f66      	ldr	r7, [pc, #408]	; (8001184 <TSK_MediumFrequencyTaskM1+0x284>)
 8000fec:	1c99      	adds	r1, r3, #2
 8000fee:	0038      	movs	r0, r7
 8000ff0:	f005 f834 	bl	800605c <VSS_CalcAvrgMecSpeedUnit>
      if (RUC_FirstAccelerationStageReached(&RevUpControlM1) == true)
 8000ff4:	0020      	movs	r0, r4
 8000ff6:	f004 f973 	bl	80052e0 <RUC_FirstAccelerationStageReached>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d0a8      	beq.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
        ObserverConverged = STO_PLL_IsObserverConverged( &STO_PLL_M1,hForcedMecSpeedUnit );
 8000ffe:	466b      	mov	r3, sp
 8001000:	0030      	movs	r0, r6
 8001002:	2102      	movs	r1, #2
 8001004:	5e59      	ldrsh	r1, [r3, r1]
 8001006:	f004 fdb9 	bl	8005b7c <STO_PLL_IsObserverConverged>
 800100a:	0004      	movs	r4, r0
        STO_SetDirection(&STO_PLL_M1, MCI_GetImposedMotorDirection( &Mci[M1]));
 800100c:	4864      	ldr	r0, [pc, #400]	; (80011a0 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800100e:	f7ff fc79 	bl	8000904 <MCI_GetImposedMotorDirection>
 8001012:	b2c1      	uxtb	r1, r0
 8001014:	0030      	movs	r0, r6
 8001016:	f004 fe6d 	bl	8005cf4 <STO_SetDirection>
        (void) VSS_SetStartTransition( &VirtualSpeedSensorM1, ObserverConverged );
 800101a:	0021      	movs	r1, r4
 800101c:	0038      	movs	r0, r7
 800101e:	f005 f8b9 	bl	8006194 <VSS_SetStartTransition>
      if ( ObserverConverged )
 8001022:	2c00      	cmp	r4, #0
 8001024:	d100      	bne.n	8001028 <TSK_MediumFrequencyTaskM1+0x128>
 8001026:	e793      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 8001028:	0030      	movs	r0, r6
 800102a:	f004 f98f 	bl	800534c <SPD_GetElAngle>
 800102e:	4c59      	ldr	r4, [pc, #356]	; (8001194 <TSK_MediumFrequencyTaskM1+0x294>)
 8001030:	0001      	movs	r1, r0
 8001032:	6860      	ldr	r0, [r4, #4]
 8001034:	f7ff fd8a 	bl	8000b4c <MCM_Park>
        REMNG_Init( pREMNG[M1] );
 8001038:	4e5a      	ldr	r6, [pc, #360]	; (80011a4 <TSK_MediumFrequencyTaskM1+0x2a4>)
        qd_t StatorCurrent = MCM_Park( FOCVars[M1].Ialphabeta, SPD_GetElAngle( &STO_PLL_M1._Super ) );
 800103a:	9001      	str	r0, [sp, #4]
        REMNG_Init( pREMNG[M1] );
 800103c:	6830      	ldr	r0, [r6, #0]
 800103e:	f004 f81b 	bl	8005078 <REMNG_Init>
        REMNG_ExecRamp( pREMNG[M1], FOCVars[M1].Iqdref.q, 0 );
 8001042:	2310      	movs	r3, #16
 8001044:	5ee1      	ldrsh	r1, [r4, r3]
 8001046:	2200      	movs	r2, #0
 8001048:	6830      	ldr	r0, [r6, #0]
 800104a:	f004 f855 	bl	80050f8 <REMNG_ExecRamp>
        REMNG_ExecRamp( pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION );
 800104e:	ab01      	add	r3, sp, #4
 8001050:	2100      	movs	r1, #0
 8001052:	5e59      	ldrsh	r1, [r3, r1]
 8001054:	2219      	movs	r2, #25
 8001056:	6830      	ldr	r0, [r6, #0]
 8001058:	f004 f84e 	bl	80050f8 <REMNG_ExecRamp>
        STM_NextState( &STM[M1], SWITCH_OVER );
 800105c:	2113      	movs	r1, #19
 800105e:	0028      	movs	r0, r5
 8001060:	f004 faaa 	bl	80055b8 <STM_NextState>
    break;
 8001064:	e774      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001066:	4c48      	ldr	r4, [pc, #288]	; (8001188 <TSK_MediumFrequencyTaskM1+0x288>)
 8001068:	0031      	movs	r1, r6
 800106a:	6820      	ldr	r0, [r4, #0]
 800106c:	f004 f9c8 	bl	8005400 <STC_SetSpeedSensor>
	  FOC_InitAdditionalMethods(M1);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff ff0f 	bl	8000e94 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ff0e 	bl	8000e98 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 800107c:	2106      	movs	r1, #6
 800107e:	0028      	movs	r0, r5
 8001080:	f004 fa9a 	bl	80055b8 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001084:	6820      	ldr	r0, [r4, #0]
 8001086:	f004 fa6f 	bl	8005568 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 800108a:	4b43      	ldr	r3, [pc, #268]	; (8001198 <TSK_MediumFrequencyTaskM1+0x298>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	f7ff fbf5 	bl	800087c <MCI_ExecBufferedCommands>
    break;
 8001092:	e75d      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <TSK_MediumFrequencyTaskM1+0x298>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	f7ff fbf0 	bl	800087c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fefb 	bl	8000e98 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d000      	beq.n	80010a8 <TSK_MediumFrequencyTaskM1+0x1a8>
 80010a6:	e753      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 80010a8:	2200      	movs	r2, #0
 80010aa:	2120      	movs	r1, #32
 80010ac:	0028      	movs	r0, r5
 80010ae:	f004 fa69 	bl	8005584 <STM_FaultProcessing>
 80010b2:	e74d      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80010b4:	4b39      	ldr	r3, [pc, #228]	; (800119c <TSK_MediumFrequencyTaskM1+0x29c>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	f003 fe28 	bl	8004d0c <R3_1_SwitchOffPWM>
    FOC_Clear( M1 );
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff fdaf 	bl	8000c20 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f003 f93c 	bl	8004340 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80010c8:	20c8      	movs	r0, #200	; 0xc8
 80010ca:	0080      	lsls	r0, r0, #2
 80010cc:	f7ff ff0a 	bl	8000ee4 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80010d0:	2108      	movs	r1, #8
 80010d2:	0028      	movs	r0, r5
 80010d4:	f004 fa70 	bl	80055b8 <STM_NextState>
    break;
 80010d8:	e73a      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80010da:	f7ff ff09 	bl	8000ef0 <TSK_StopPermanencyTimeHasElapsedM1>
 80010de:	2800      	cmp	r0, #0
 80010e0:	d100      	bne.n	80010e4 <TSK_MediumFrequencyTaskM1+0x1e4>
 80010e2:	e735      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
      STM_NextState( &STM[M1], STOP_IDLE );
 80010e4:	2109      	movs	r1, #9
 80010e6:	0028      	movs	r0, r5
 80010e8:	f004 fa66 	bl	80055b8 <STM_NextState>
 80010ec:	e730      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80010ee:	f7ff fef1 	bl	8000ed4 <TSK_ChargeBootCapDelayHasElapsedM1>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d100      	bne.n	80010f8 <TSK_MediumFrequencyTaskM1+0x1f8>
 80010f6:	e72b      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <TSK_MediumFrequencyTaskM1+0x29c>)
 80010fa:	2100      	movs	r1, #0
 80010fc:	6818      	ldr	r0, [r3, #0]
 80010fe:	f003 fb6d 	bl	80047dc <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001102:	2111      	movs	r1, #17
 8001104:	0028      	movs	r0, r5
 8001106:	f004 fa57 	bl	80055b8 <STM_NextState>
 800110a:	e721      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <TSK_MediumFrequencyTaskM1+0x29c>)
 800110e:	2101      	movs	r1, #1
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f003 fb63 	bl	80047dc <PWMC_CurrentReadingCalibr>
 8001116:	2800      	cmp	r0, #0
 8001118:	d100      	bne.n	800111c <TSK_MediumFrequencyTaskM1+0x21c>
 800111a:	e719      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
      STM_NextState( &STM[M1], CLEAR );
 800111c:	2112      	movs	r1, #18
 800111e:	0028      	movs	r0, r5
 8001120:	f004 fa4a 	bl	80055b8 <STM_NextState>
 8001124:	e714      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001126:	2224      	movs	r2, #36	; 0x24
 8001128:	2101      	movs	r1, #1
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <TSK_MediumFrequencyTaskM1+0x294>)
 800112c:	5499      	strb	r1, [r3, r2]
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <TSK_MediumFrequencyTaskM1+0x288>)
 8001130:	4914      	ldr	r1, [pc, #80]	; (8001184 <TSK_MediumFrequencyTaskM1+0x284>)
 8001132:	6818      	ldr	r0, [r3, #0]
 8001134:	f004 f964 	bl	8005400 <STC_SetSpeedSensor>
    STO_PLL_Clear( &STO_PLL_M1 );
 8001138:	0030      	movs	r0, r6
 800113a:	f004 fcbb 	bl	8005ab4 <STO_PLL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 800113e:	2104      	movs	r1, #4
 8001140:	0028      	movs	r0, r5
 8001142:	f004 fa39 	bl	80055b8 <STM_NextState>
 8001146:	2800      	cmp	r0, #0
 8001148:	d100      	bne.n	800114c <TSK_MediumFrequencyTaskM1+0x24c>
 800114a:	e701      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
      FOC_Clear( M1 );
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fd67 	bl	8000c20 <FOC_Clear>
      R3_1_SwitchOnPWM( pwmcHandle[M1] );
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <TSK_MediumFrequencyTaskM1+0x29c>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f003 fd63 	bl	8004c20 <R3_1_SwitchOnPWM>
 800115a:	e6f9      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
        STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 800115c:	2200      	movs	r2, #0
 800115e:	2110      	movs	r1, #16
 8001160:	0028      	movs	r0, r5
 8001162:	f004 fa0f 	bl	8005584 <STM_FaultProcessing>
 8001166:	e73f      	b.n	8000fe8 <TSK_MediumFrequencyTaskM1+0xe8>
          STM_FaultProcessing( &STM[M1], MC_START_UP, 0 );
 8001168:	2200      	movs	r2, #0
 800116a:	2110      	movs	r1, #16
 800116c:	0028      	movs	r0, r5
 800116e:	f004 fa09 	bl	8005584 <STM_FaultProcessing>
 8001172:	e6ed      	b.n	8000f50 <TSK_MediumFrequencyTaskM1+0x50>
 8001174:	200003d4 	.word	0x200003d4
 8001178:	2000096c 	.word	0x2000096c
 800117c:	20000950 	.word	0x20000950
 8001180:	080064b4 	.word	0x080064b4
 8001184:	20000558 	.word	0x20000558
 8001188:	20000980 	.word	0x20000980
 800118c:	20000348 	.word	0x20000348
 8001190:	20000978 	.word	0x20000978
 8001194:	200008b8 	.word	0x200008b8
 8001198:	20000960 	.word	0x20000960
 800119c:	20000988 	.word	0x20000988
 80011a0:	20000934 	.word	0x20000934
 80011a4:	2000097c 	.word	0x2000097c

080011a8 <MC_Scheduler>:
{
 80011a8:	b570      	push	{r4, r5, r6, lr}
  if (bMCBootCompleted == 1)
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MC_Scheduler+0x48>)
 80011ac:	781c      	ldrb	r4, [r3, #0]
 80011ae:	2c01      	cmp	r4, #1
 80011b0:	d000      	beq.n	80011b4 <MC_Scheduler+0xc>
}
 80011b2:	bd70      	pop	{r4, r5, r6, pc}
    if(hMFTaskCounterM1 > 0u)
 80011b4:	4d0f      	ldr	r5, [pc, #60]	; (80011f4 <MC_Scheduler+0x4c>)
 80011b6:	882b      	ldrh	r3, [r5, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d014      	beq.n	80011e6 <MC_Scheduler+0x3e>
      hMFTaskCounterM1--;
 80011bc:	882b      	ldrh	r3, [r5, #0]
 80011be:	3b01      	subs	r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MC_Scheduler+0x50>)
 80011c6:	881a      	ldrh	r2, [r3, #0]
 80011c8:	2a00      	cmp	r2, #0
 80011ca:	d003      	beq.n	80011d4 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	3a01      	subs	r2, #1
 80011d0:	b292      	uxth	r2, r2
 80011d2:	801a      	strh	r2, [r3, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MC_Scheduler+0x54>)
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	2a00      	cmp	r2, #0
 80011da:	d0ea      	beq.n	80011b2 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80011dc:	881a      	ldrh	r2, [r3, #0]
 80011de:	3a01      	subs	r2, #1
 80011e0:	b292      	uxth	r2, r2
 80011e2:	801a      	strh	r2, [r3, #0]
}
 80011e4:	e7e5      	b.n	80011b2 <MC_Scheduler+0xa>
      TSK_MediumFrequencyTaskM1();
 80011e6:	f7ff fe8b 	bl	8000f00 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80011ea:	802c      	strh	r4, [r5, #0]
 80011ec:	e7ea      	b.n	80011c4 <MC_Scheduler+0x1c>
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	20000956 	.word	0x20000956
 80011f4:	2000095a 	.word	0x2000095a
 80011f8:	20000958 	.word	0x20000958
 80011fc:	2000095c 	.word	0x2000095c

08001200 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	46d6      	mov	lr, sl
 8001204:	464f      	mov	r7, r9
 8001206:	4646      	mov	r6, r8
  uint16_t hFOCreturn;

  uint16_t hState;  /*  only if sensorless main*/
  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001208:	4c5c      	ldr	r4, [pc, #368]	; (800137c <TSK_HighFrequencyTask+0x17c>)
{
 800120a:	b5c0      	push	{r6, r7, lr}
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800120c:	0021      	movs	r1, r4
{
 800120e:	b088      	sub	sp, #32
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001210:	2204      	movs	r2, #4
 8001212:	311a      	adds	r1, #26
 8001214:	a805      	add	r0, sp, #20
 8001216:	f004 fffd 	bl	8006214 <memcpy>
  if ( STM[M1].bState == SWITCH_OVER )
 800121a:	4f59      	ldr	r7, [pc, #356]	; (8001380 <TSK_HighFrequencyTask+0x180>)
 800121c:	783b      	ldrb	r3, [r7, #0]
 800121e:	2b13      	cmp	r3, #19
 8001220:	d100      	bne.n	8001224 <TSK_HighFrequencyTask+0x24>
 8001222:	e09f      	b.n	8001364 <TSK_HighFrequencyTask+0x164>

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <TSK_HighFrequencyTask+0x184>)
 8001226:	6818      	ldr	r0, [r3, #0]
 8001228:	f004 f8ec 	bl	8005404 <STC_GetSpeedSensor>
 800122c:	0006      	movs	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800122e:	f004 f88d 	bl	800534c <SPD_GetElAngle>
 8001232:	0005      	movs	r5, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001234:	0030      	movs	r0, r6
 8001236:	f004 f891 	bl	800535c <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <TSK_HighFrequencyTask+0x188>)
 800123c:	a902      	add	r1, sp, #8
 800123e:	6818      	ldr	r0, [r3, #0]
 8001240:	4698      	mov	r8, r3
 8001242:	f003 f9c1 	bl	80045c8 <PWMC_GetPhaseCurrents>
  RCM_ExecNextConv();
 8001246:	f000 fdbf 	bl	8001dc8 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800124a:	9802      	ldr	r0, [sp, #8]
 800124c:	f7ff fc04 	bl	8000a58 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001250:	0029      	movs	r1, r5
  Ialphabeta = MCM_Clarke(Iab);
 8001252:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001254:	f7ff fc7a 	bl	8000b4c <MCM_Park>
 8001258:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800125a:	2310      	movs	r3, #16
 800125c:	5ee1      	ldrsh	r1, [r4, r3]
 800125e:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001260:	1ac9      	subs	r1, r1, r3
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <TSK_HighFrequencyTask+0x18c>)
 8001264:	6818      	ldr	r0, [r3, #0]
 8001266:	f003 f91b 	bl	80044a0 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800126a:	2312      	movs	r3, #18
 800126c:	5ee1      	ldrsh	r1, [r4, r3]
 800126e:	466b      	mov	r3, sp
  Vqd.q = PI_Controller(pPIDIq[M1],
 8001270:	4681      	mov	r9, r0
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001272:	2202      	movs	r2, #2
 8001274:	5e9b      	ldrsh	r3, [r3, r2]
  Vqd.d = PI_Controller(pPIDId[M1],
 8001276:	1ac9      	subs	r1, r1, r3
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <TSK_HighFrequencyTask+0x190>)
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f003 f910 	bl	80044a0 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001280:	4649      	mov	r1, r9
 8001282:	4b44      	ldr	r3, [pc, #272]	; (8001394 <TSK_HighFrequencyTask+0x194>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	ab01      	add	r3, sp, #4
 8001288:	8058      	strh	r0, [r3, #2]
 800128a:	8019      	strh	r1, [r3, #0]
 800128c:	0010      	movs	r0, r2
 800128e:	9901      	ldr	r1, [sp, #4]
 8001290:	f002 ff26 	bl	80040e0 <Circle_Limitation>
 8001294:	b203      	sxth	r3, r0
 8001296:	469a      	mov	sl, r3
 8001298:	9001      	str	r0, [sp, #4]
 800129a:	1403      	asrs	r3, r0, #16
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800129c:	0030      	movs	r0, r6
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800129e:	4699      	mov	r9, r3
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80012a0:	f004 f85c 	bl	800535c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80012a4:	0029      	movs	r1, r5
 80012a6:	9801      	ldr	r0, [sp, #4]
 80012a8:	f7ff fca0 	bl	8000bec <MCM_Rev_Park>
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80012ac:	4643      	mov	r3, r8
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80012ae:	0001      	movs	r1, r0
 80012b0:	9004      	str	r0, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f003 f98c 	bl	80045d0 <PWMC_SetPhaseVoltage>
 80012b8:	0006      	movs	r6, r0
  RCM_ReadOngoingConv();
 80012ba:	f000 fdc3 	bl	8001e44 <RCM_ReadOngoingConv>
  FOCVars[M1].Vqd = Vqd;
 80012be:	4653      	mov	r3, sl
 80012c0:	82e3      	strh	r3, [r4, #22]
 80012c2:	464b      	mov	r3, r9
  FOCVars[M1].Iab = Iab;
  FOCVars[M1].Ialphabeta = Ialphabeta;
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 80012c4:	0020      	movs	r0, r4
  FOCVars[M1].Vqd = Vqd;
 80012c6:	8323      	strh	r3, [r4, #24]
  FOCVars[M1].Iab = Iab;
 80012c8:	9b02      	ldr	r3, [sp, #8]
  FOCVars[M1].Valphabeta = Valphabeta;
 80012ca:	2204      	movs	r2, #4
  FOCVars[M1].Iab = Iab;
 80012cc:	6023      	str	r3, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80012ce:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80012d0:	301a      	adds	r0, #26
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80012d2:	6063      	str	r3, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80012d4:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 80012d6:	a904      	add	r1, sp, #16
  FOCVars[M1].Iqd = Iqd;
 80012d8:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80012da:	f004 ff9b 	bl	8006214 <memcpy>
  FOCVars[M1].hElAngle = hElAngle;
 80012de:	8425      	strh	r5, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80012e0:	2e01      	cmp	r6, #1
 80012e2:	d039      	beq.n	8001358 <TSK_HighFrequencyTask+0x158>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80012e4:	482c      	ldr	r0, [pc, #176]	; (8001398 <TSK_HighFrequencyTask+0x198>)
 80012e6:	f003 fffb 	bl	80052e0 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80012ea:	6863      	ldr	r3, [r4, #4]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80012ec:	0005      	movs	r5, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 80012ee:	9306      	str	r3, [sp, #24]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80012f0:	4b2a      	ldr	r3, [pc, #168]	; (800139c <TSK_HighFrequencyTask+0x19c>)
 80012f2:	6818      	ldr	r0, [r3, #0]
 80012f4:	f002 feec 	bl	80040d0 <VBS_GetAvBusVoltage_d>
 80012f8:	466b      	mov	r3, sp
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80012fa:	4c29      	ldr	r4, [pc, #164]	; (80013a0 <TSK_HighFrequencyTask+0x1a0>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(pBusSensorM1->_Super)); /*  only for sensorless*/
 80012fc:	8398      	strh	r0, [r3, #28]
    STO_PLL_CalcElAngle (&STO_PLL_M1, &STO_Inputs);
 80012fe:	a905      	add	r1, sp, #20
 8001300:	0020      	movs	r0, r4
 8001302:	f004 f9df 	bl	80056c4 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp (&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001306:	0020      	movs	r0, r4
 8001308:	f004 fb9e 	bl	8005a48 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (IsAccelerationStageReached == false)
 800130c:	2d00      	cmp	r5, #0
 800130e:	d00f      	beq.n	8001330 <TSK_HighFrequencyTask+0x130>
    hState = STM_GetState(&STM[M1]);
 8001310:	0038      	movs	r0, r7
 8001312:	f004 f9c5 	bl	80056a0 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 8001316:	1f03      	subs	r3, r0, #4
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b01      	cmp	r3, #1
 800131c:	d912      	bls.n	8001344 <TSK_HighFrequencyTask+0x144>
 800131e:	2813      	cmp	r0, #19
 8001320:	d010      	beq.n	8001344 <TSK_HighFrequencyTask+0x144>
}
 8001322:	2000      	movs	r0, #0
 8001324:	b008      	add	sp, #32
 8001326:	bce0      	pop	{r5, r6, r7}
 8001328:	46ba      	mov	sl, r7
 800132a:	46b1      	mov	r9, r6
 800132c:	46a8      	mov	r8, r5
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001330:	0020      	movs	r0, r4
 8001332:	f004 fcc1 	bl	8005cb8 <STO_ResetPLL>
    hState = STM_GetState(&STM[M1]);
 8001336:	0038      	movs	r0, r7
 8001338:	f004 f9b2 	bl	80056a0 <STM_GetState>
    if((hState == START) || (hState == SWITCH_OVER) || (hState == START_RUN)) /*  only for sensor-less*/
 800133c:	1f03      	subs	r3, r0, #4
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d8ec      	bhi.n	800131e <TSK_HighFrequencyTask+0x11e>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001344:	0020      	movs	r0, r4
 8001346:	f004 f801 	bl	800534c <SPD_GetElAngle>
 800134a:	466b      	mov	r3, sp
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 800134c:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800134e:	8218      	strh	r0, [r3, #16]
      VSS_CalcElAngle(&VirtualSpeedSensorM1,&hObsAngle);
 8001350:	4814      	ldr	r0, [pc, #80]	; (80013a4 <TSK_HighFrequencyTask+0x1a4>)
 8001352:	f004 fe25 	bl	8005fa0 <VSS_CalcElAngle>
 8001356:	e7e4      	b.n	8001322 <TSK_HighFrequencyTask+0x122>
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2101      	movs	r1, #1
 800135c:	0038      	movs	r0, r7
 800135e:	f004 f911 	bl	8005584 <STM_FaultProcessing>
 8001362:	e7de      	b.n	8001322 <TSK_HighFrequencyTask+0x122>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001364:	4d10      	ldr	r5, [pc, #64]	; (80013a8 <TSK_HighFrequencyTask+0x1a8>)
 8001366:	6828      	ldr	r0, [r5, #0]
 8001368:	f003 feaa 	bl	80050c0 <REMNG_RampCompleted>
 800136c:	2800      	cmp	r0, #0
 800136e:	d000      	beq.n	8001372 <TSK_HighFrequencyTask+0x172>
 8001370:	e758      	b.n	8001224 <TSK_HighFrequencyTask+0x24>
      FOCVars[M1].Iqdref.q = REMNG_Calc(pREMNG[M1]);
 8001372:	6828      	ldr	r0, [r5, #0]
 8001374:	f003 fe8c 	bl	8005090 <REMNG_Calc>
 8001378:	8220      	strh	r0, [r4, #16]
 800137a:	e753      	b.n	8001224 <TSK_HighFrequencyTask+0x24>
 800137c:	200008b8 	.word	0x200008b8
 8001380:	20000950 	.word	0x20000950
 8001384:	20000980 	.word	0x20000980
 8001388:	20000988 	.word	0x20000988
 800138c:	20000974 	.word	0x20000974
 8001390:	20000970 	.word	0x20000970
 8001394:	20000968 	.word	0x20000968
 8001398:	20000348 	.word	0x20000348
 800139c:	20000964 	.word	0x20000964
 80013a0:	200003d4 	.word	0x200003d4
 80013a4:	20000558 	.word	0x20000558
 80013a8:	2000097c 	.word	0x2000097c

080013ac <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	46ce      	mov	lr, r9
 80013b0:	4647      	mov	r7, r8
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <TSK_SafetyTask_PWMOFF+0x8c>)
{
 80013b4:	b580      	push	{r7, lr}
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80013b6:	0087      	lsls	r7, r0, #2
{
 80013b8:	0005      	movs	r5, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80013ba:	59d8      	ldr	r0, [r3, r7]
 80013bc:	f003 f81e 	bl	80043fc <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80013c2:	0006      	movs	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80013c4:	59d8      	ldr	r0, [r3, r7]
 80013c6:	4698      	mov	r8, r3
 80013c8:	f003 fa2c 	bl	8004824 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80013cc:	2308      	movs	r3, #8
 80013ce:	439e      	bics	r6, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80013d0:	4330      	orrs	r0, r6
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80013d2:	4699      	mov	r9, r3
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80013d4:	b284      	uxth	r4, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 80013d6:	2d00      	cmp	r5, #0
 80013d8:	d025      	beq.n	8001426 <TSK_SafetyTask_PWMOFF+0x7a>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 80013da:	43e2      	mvns	r2, r4
 80013dc:	006b      	lsls	r3, r5, #1
 80013de:	4e18      	ldr	r6, [pc, #96]	; (8001440 <TSK_SafetyTask_PWMOFF+0x94>)
 80013e0:	195b      	adds	r3, r3, r5
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	18f6      	adds	r6, r6, r3
 80013e6:	0021      	movs	r1, r4
 80013e8:	0030      	movs	r0, r6
 80013ea:	b292      	uxth	r2, r2
 80013ec:	f004 f8ca 	bl	8005584 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 80013f0:	0030      	movs	r0, r6
 80013f2:	f004 f955 	bl	80056a0 <STM_GetState>
 80013f6:	280a      	cmp	r0, #10
 80013f8:	d009      	beq.n	800140e <TSK_SafetyTask_PWMOFF+0x62>
 80013fa:	280b      	cmp	r0, #11
 80013fc:	d103      	bne.n	8001406 <TSK_SafetyTask_PWMOFF+0x5a>
    /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 1 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 1 */
    break;
  case FAULT_OVER:
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80013fe:	4643      	mov	r3, r8
 8001400:	59d8      	ldr	r0, [r3, r7]
 8001402:	f003 f9e7 	bl	80047d4 <PWMC_SwitchOffPWM>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001406:	bcc0      	pop	{r6, r7}
 8001408:	46b9      	mov	r9, r7
 800140a:	46b0      	mov	r8, r6
 800140c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800140e:	4643      	mov	r3, r8
 8001410:	59d8      	ldr	r0, [r3, r7]
 8001412:	f003 f9df 	bl	80047d4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001416:	0028      	movs	r0, r5
 8001418:	f7ff fc02 	bl	8000c20 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <TSK_SafetyTask_PWMOFF+0x98>)
 800141e:	59d8      	ldr	r0, [r3, r7]
 8001420:	f002 ff8e 	bl	8004340 <MPM_Clear>
    break;
 8001424:	e7ef      	b.n	8001406 <TSK_SafetyTask_PWMOFF+0x5a>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001428:	6818      	ldr	r0, [r3, #0]
 800142a:	f003 fdf1 	bl	8005010 <RVBS_CalcAvVbus>
 800142e:	464b      	mov	r3, r9
 8001430:	4398      	bics	r0, r3
 8001432:	4304      	orrs	r4, r0
 8001434:	b2a4      	uxth	r4, r4
 8001436:	e7d0      	b.n	80013da <TSK_SafetyTask_PWMOFF+0x2e>
 8001438:	20000984 	.word	0x20000984
 800143c:	20000988 	.word	0x20000988
 8001440:	20000950 	.word	0x20000950
 8001444:	2000096c 	.word	0x2000096c
 8001448:	20000964 	.word	0x20000964

0800144c <TSK_SafetyTask>:
{
 800144c:	b510      	push	{r4, lr}
  if (bMCBootCompleted == 1)
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <TSK_SafetyTask+0x18>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d000      	beq.n	8001458 <TSK_SafetyTask+0xc>
}
 8001456:	bd10      	pop	{r4, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff ffa7 	bl	80013ac <TSK_SafetyTask_PWMOFF>
    RCM_ExecUserConv ();
 800145e:	f000 fc85 	bl	8001d6c <RCM_ExecUserConv>
}
 8001462:	e7f8      	b.n	8001456 <TSK_SafetyTask+0xa>
 8001464:	20000956 	.word	0x20000956

08001468 <MC_RunMotorControlTasks>:
{
 8001468:	b510      	push	{r4, lr}
  if ( bMCBootCompleted ) {
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <MC_RunMotorControlTasks+0x1c>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d100      	bne.n	8001474 <MC_RunMotorControlTasks+0xc>
}
 8001472:	bd10      	pop	{r4, pc}
    MC_Scheduler();
 8001474:	f7ff fe98 	bl	80011a8 <MC_Scheduler>
    TSK_SafetyTask();
 8001478:	f7ff ffe8 	bl	800144c <TSK_SafetyTask>
    UI_Scheduler();
 800147c:	f000 ff34 	bl	80022e8 <UI_Scheduler>
}
 8001480:	e7f7      	b.n	8001472 <MC_RunMotorControlTasks+0xa>
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	20000956 	.word	0x20000956

08001488 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001488:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <TSK_HardwareFaultTask+0x18>)
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	f003 fc3d 	bl	8004d0c <R3_1_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	2180      	movs	r1, #128	; 0x80
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <TSK_HardwareFaultTask+0x1c>)
 8001498:	f004 f874 	bl	8005584 <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800149c:	bd10      	pop	{r4, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	20000988 	.word	0x20000988
 80014a4:	20000950 	.word	0x20000950

080014a8 <mc_lock_pins>:
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014a8:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014aa:	2108      	movs	r1, #8
 80014ac:	2002      	movs	r0, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <mc_lock_pins+0xd4>)
 80014b0:	05db      	lsls	r3, r3, #23
 80014b2:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014b4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014b6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014b8:	69da      	ldr	r2, [r3, #28]
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	920b      	str	r2, [sp, #44]	; 0x2c
  (void) temp;
 80014be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c0:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <mc_lock_pins+0xd8>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c2:	3118      	adds	r1, #24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014c8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ca:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014cc:	3910      	subs	r1, #16
  temp = READ_REG(GPIOx->LCKR);
 80014ce:	920a      	str	r2, [sp, #40]	; 0x28
  (void) temp;
 80014d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d2:	4a2c      	ldr	r2, [pc, #176]	; (8001584 <mc_lock_pins+0xdc>)
 80014d4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014d6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014d8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014da:	69da      	ldr	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014dc:	492a      	ldr	r1, [pc, #168]	; (8001588 <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 80014de:	9209      	str	r2, [sp, #36]	; 0x24
  (void) temp;
 80014e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e2:	4a2a      	ldr	r2, [pc, #168]	; (800158c <mc_lock_pins+0xe4>)
 80014e4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014e6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014e8:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014ea:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014ec:	30fe      	adds	r0, #254	; 0xfe
  temp = READ_REG(GPIOx->LCKR);
 80014ee:	9108      	str	r1, [sp, #32]
  (void) temp;
 80014f0:	9908      	ldr	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f2:	4927      	ldr	r1, [pc, #156]	; (8001590 <mc_lock_pins+0xe8>)
 80014f4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014f6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80014f8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80014fa:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80014fc:	3001      	adds	r0, #1
  temp = READ_REG(GPIOx->LCKR);
 80014fe:	9107      	str	r1, [sp, #28]
  (void) temp;
 8001500:	9907      	ldr	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001502:	2181      	movs	r1, #129	; 0x81
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001504:	30ff      	adds	r0, #255	; 0xff
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001506:	0249      	lsls	r1, r1, #9
 8001508:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800150a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800150c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800150e:	69d9      	ldr	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001510:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001512:	9106      	str	r1, [sp, #24]
  (void) temp;
 8001514:	9906      	ldr	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001516:	2188      	movs	r1, #136	; 0x88
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001518:	0140      	lsls	r0, r0, #5
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800151a:	0249      	lsls	r1, r1, #9
 800151c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800151e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001520:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001522:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001524:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001526:	9105      	str	r1, [sp, #20]
  (void) temp;
 8001528:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800152a:	21a0      	movs	r1, #160	; 0xa0
  WRITE_REG(GPIOx->LCKR, PinMask);
 800152c:	01c0      	lsls	r0, r0, #7
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800152e:	0249      	lsls	r1, r1, #9
 8001530:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001532:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001534:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001536:	69d1      	ldr	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001538:	2080      	movs	r0, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 800153a:	9104      	str	r1, [sp, #16]
  (void) temp;
 800153c:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800153e:	2182      	movs	r1, #130	; 0x82
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001540:	00c0      	lsls	r0, r0, #3
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001542:	0249      	lsls	r1, r1, #9
 8001544:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001546:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001548:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800154a:	69db      	ldr	r3, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800154c:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 800154e:	9303      	str	r3, [sp, #12]
  (void) temp;
 8001550:	9b03      	ldr	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001552:	23c0      	movs	r3, #192	; 0xc0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001554:	0209      	lsls	r1, r1, #8
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001556:	025b      	lsls	r3, r3, #9
 8001558:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800155a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800155c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800155e:	69d3      	ldr	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001560:	2180      	movs	r1, #128	; 0x80
  temp = READ_REG(GPIOx->LCKR);
 8001562:	9302      	str	r3, [sp, #8]
  (void) temp;
 8001564:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001566:	2390      	movs	r3, #144	; 0x90
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001568:	0189      	lsls	r1, r1, #6
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800156a:	025b      	lsls	r3, r3, #9
 800156c:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800156e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001570:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001572:	69d3      	ldr	r3, [r2, #28]
 8001574:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001576:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_OCP_GPIO_Port, M1_OCP_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8001578:	b00c      	add	sp, #48	; 0x30
 800157a:	4770      	bx	lr
 800157c:	00010008 	.word	0x00010008
 8001580:	00010020 	.word	0x00010020
 8001584:	00010010 	.word	0x00010010
 8001588:	00010002 	.word	0x00010002
 800158c:	48000400 	.word	0x48000400
 8001590:	00010100 	.word	0x00010100

08001594 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001596:	b08d      	sub	sp, #52	; 0x34
 8001598:	0016      	movs	r6, r2
 800159a:	001f      	movs	r7, r3
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800159c:	2200      	movs	r2, #0
 800159e:	466b      	mov	r3, sp
{
 80015a0:	0005      	movs	r5, r0
  bool bNoError = false; // Default is error
 80015a2:	725a      	strb	r2, [r3, #9]
{
 80015a4:	000c      	movs	r4, r1
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 80015a6:	094a      	lsrs	r2, r1, #5
  if (bMotorSelection != 0)
 80015a8:	d10f      	bne.n	80015ca <MCP_ReceivedFrame+0x36>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 80015aa:	2912      	cmp	r1, #18
 80015ac:	d82b      	bhi.n	8001606 <MCP_ReceivedFrame+0x72>
 80015ae:	4bc9      	ldr	r3, [pc, #804]	; (80018d4 <MCP_ReceivedFrame+0x340>)
 80015b0:	008c      	lsls	r4, r1, #2
 80015b2:	591b      	ldr	r3, [r3, r4]
 80015b4:	469f      	mov	pc, r3
 80015b6:	240e      	movs	r4, #14
 80015b8:	446c      	add	r4, sp
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80015ba:	69a8      	ldr	r0, [r5, #24]
 80015bc:	2301      	movs	r3, #1
 80015be:	0022      	movs	r2, r4
 80015c0:	21ff      	movs	r1, #255	; 0xff
 80015c2:	69ed      	ldr	r5, [r5, #28]
 80015c4:	47a8      	blx	r5
    }
  }
}
 80015c6:	b00d      	add	sp, #52	; 0x34
 80015c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80015ca:	2100      	movs	r1, #0
 80015cc:	3a01      	subs	r2, #1
 80015ce:	f000 fed5 	bl	800237c <UI_SetReg>
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d10e      	bne.n	80015f4 <MCP_ReceivedFrame+0x60>
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 80015d6:	240e      	movs	r4, #14
 80015d8:	230b      	movs	r3, #11
 80015da:	446c      	add	r4, sp
 80015dc:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 80015de:	466b      	mov	r3, sp
 80015e0:	7a58      	ldrb	r0, [r3, #9]
 80015e2:	2800      	cmp	r0, #0
 80015e4:	d0e7      	beq.n	80015b6 <MCP_ReceivedFrame+0x22>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	21f0      	movs	r1, #240	; 0xf0
 80015ec:	69a8      	ldr	r0, [r5, #24]
 80015ee:	69ec      	ldr	r4, [r5, #28]
 80015f0:	47a0      	blx	r4
 80015f2:	e7e8      	b.n	80015c6 <MCP_ReceivedFrame+0x32>
  switch (Code)
 80015f4:	231f      	movs	r3, #31
 80015f6:	4023      	ands	r3, r4
 80015f8:	2b12      	cmp	r3, #18
 80015fa:	d900      	bls.n	80015fe <MCP_ReceivedFrame+0x6a>
 80015fc:	e1b1      	b.n	8001962 <MCP_ReceivedFrame+0x3ce>
 80015fe:	4ab6      	ldr	r2, [pc, #728]	; (80018d8 <MCP_ReceivedFrame+0x344>)
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	58d3      	ldr	r3, [r2, r3]
 8001604:	469f      	mov	pc, r3
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001606:	240e      	movs	r4, #14
 8001608:	2301      	movs	r3, #1
 800160a:	446c      	add	r4, sp
 800160c:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 800160e:	e7d4      	b.n	80015ba <MCP_ReceivedFrame+0x26>
        outBuff[i] = 0;
 8001610:	ac04      	add	r4, sp, #16
 8001612:	2220      	movs	r2, #32
 8001614:	2100      	movs	r1, #0
 8001616:	0020      	movs	r0, r4
 8001618:	f004 fdd0 	bl	80061bc <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800161c:	23a8      	movs	r3, #168	; 0xa8
 800161e:	58e8      	ldr	r0, [r5, r3]
 8001620:	2300      	movs	r3, #0
 8001622:	e005      	b.n	8001630 <MCP_ReceivedFrame+0x9c>
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001624:	18e1      	adds	r1, r4, r3
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001626:	3301      	adds	r3, #1
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001628:	70ca      	strb	r2, [r1, #3]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 800162a:	2b1d      	cmp	r3, #29
 800162c:	d100      	bne.n	8001630 <MCP_ReceivedFrame+0x9c>
 800162e:	e1b6      	b.n	800199e <MCP_ReceivedFrame+0x40a>
 8001630:	5cc2      	ldrb	r2, [r0, r3]
 8001632:	2a09      	cmp	r2, #9
 8001634:	d1f6      	bne.n	8001624 <MCP_ReceivedFrame+0x90>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001636:	1d5a      	adds	r2, r3, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001638:	1dd9      	adds	r1, r3, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 800163a:	3309      	adds	r3, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 800163c:	5c82      	ldrb	r2, [r0, r2]
 800163e:	7022      	strb	r2, [r4, #0]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001640:	5c42      	ldrb	r2, [r0, r1]
 8001642:	7062      	strb	r2, [r4, #1]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001644:	5cc3      	ldrb	r3, [r0, r3]
 8001646:	70a3      	strb	r3, [r4, #2]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001648:	2320      	movs	r3, #32
 800164a:	0022      	movs	r2, r4
 800164c:	21f0      	movs	r1, #240	; 0xf0
 800164e:	69a8      	ldr	r0, [r5, #24]
 8001650:	69ee      	ldr	r6, [r5, #28]
 8001652:	47b0      	blx	r6
      bNoError = true;
 8001654:	2301      	movs	r3, #1
 8001656:	466a      	mov	r2, sp
 8001658:	7253      	strb	r3, [r2, #9]
  if (RequireAck)
 800165a:	e7c4      	b.n	80015e6 <MCP_ReceivedFrame+0x52>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 800165c:	7973      	ldrb	r3, [r6, #5]
 800165e:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001660:	7871      	ldrb	r1, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	18d2      	adds	r2, r2, r3
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001666:	7833      	ldrb	r3, [r6, #0]
 8001668:	0209      	lsls	r1, r1, #8
 800166a:	18c9      	adds	r1, r1, r3
 800166c:	78b3      	ldrb	r3, [r6, #2]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800166e:	0028      	movs	r0, r5
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001670:	041b      	lsls	r3, r3, #16
 8001672:	18c9      	adds	r1, r1, r3
 8001674:	78f3      	ldrb	r3, [r6, #3]
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001676:	b292      	uxth	r2, r2
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001678:	061b      	lsls	r3, r3, #24
 800167a:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 800167c:	f001 f9cc 	bl	8002a18 <UI_ExecSpeedRamp>
 8001680:	466b      	mov	r3, sp
 8001682:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001684:	e7ad      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001686:	240e      	movs	r4, #14
 8001688:	220a      	movs	r2, #10
 800168a:	446c      	add	r4, sp
 800168c:	af03      	add	r7, sp, #12
 800168e:	7831      	ldrb	r1, [r6, #0]
 8001690:	003b      	movs	r3, r7
 8001692:	9400      	str	r4, [sp, #0]
 8001694:	446a      	add	r2, sp
 8001696:	0028      	movs	r0, r5
 8001698:	f001 f9da 	bl	8002a50 <UI_GetRevupData>
      outBuff[6] = (uint8_t)(Durationms);
 800169c:	466b      	mov	r3, sp
 800169e:	895a      	ldrh	r2, [r3, #10]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	5ef9      	ldrsh	r1, [r7, r3]
      outBuff[0] = (uint8_t)(rpm);
 80016a4:	7820      	ldrb	r0, [r4, #0]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80016a6:	004b      	lsls	r3, r1, #1
 80016a8:	185b      	adds	r3, r3, r1
      outBuff[0] = (uint8_t)(rpm);
 80016aa:	4669      	mov	r1, sp
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 80016ac:	005b      	lsls	r3, r3, #1
      outBuff[0] = (uint8_t)(rpm);
 80016ae:	9304      	str	r3, [sp, #16]
 80016b0:	7863      	ldrb	r3, [r4, #1]
 80016b2:	7a89      	ldrb	r1, [r1, #10]
 80016b4:	021b      	lsls	r3, r3, #8
 80016b6:	0409      	lsls	r1, r1, #16
 80016b8:	4303      	orrs	r3, r0
 80016ba:	430b      	orrs	r3, r1
 80016bc:	0a12      	lsrs	r2, r2, #8
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	0612      	lsls	r2, r2, #24
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	4313      	orrs	r3, r2
 80016c6:	9305      	str	r3, [sp, #20]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 80016c8:	21f0      	movs	r1, #240	; 0xf0
 80016ca:	2308      	movs	r3, #8
 80016cc:	69a8      	ldr	r0, [r5, #24]
 80016ce:	69ec      	ldr	r4, [r5, #28]
 80016d0:	aa04      	add	r2, sp, #16
 80016d2:	47a0      	blx	r4
    if (bNoError)
 80016d4:	466b      	mov	r3, sp
 80016d6:	7a58      	ldrb	r0, [r3, #9]
 80016d8:	e783      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80016da:	78b0      	ldrb	r0, [r6, #2]
 80016dc:	7873      	ldrb	r3, [r6, #1]
 80016de:	0200      	lsls	r0, r0, #8
 80016e0:	18c0      	adds	r0, r0, r3
 80016e2:	78f3      	ldrb	r3, [r6, #3]
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80016e4:	2106      	movs	r1, #6
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	18c0      	adds	r0, r0, r3
 80016ea:	7933      	ldrb	r3, [r6, #4]
 80016ec:	061b      	lsls	r3, r3, #24
 80016ee:	18c0      	adds	r0, r0, r3
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 80016f0:	f7fe fd94 	bl	800021c <__divsi3>
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 80016f4:	b203      	sxth	r3, r0
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80016f6:	79b0      	ldrb	r0, [r6, #6]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80016f8:	7a31      	ldrb	r1, [r6, #8]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80016fa:	7974      	ldrb	r4, [r6, #5]
      hDurationms = buffer[7] + (buffer[8] << 8);
 80016fc:	79f2      	ldrb	r2, [r6, #7]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 80016fe:	0200      	lsls	r0, r0, #8
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001700:	0209      	lsls	r1, r1, #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001702:	1824      	adds	r4, r4, r0
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001704:	1852      	adds	r2, r2, r1
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001706:	b224      	sxth	r4, r4
 8001708:	7831      	ldrb	r1, [r6, #0]
 800170a:	0028      	movs	r0, r5
 800170c:	b292      	uxth	r2, r2
 800170e:	9400      	str	r4, [sp, #0]
 8001710:	f001 f9bc 	bl	8002a8c <UI_SetRevupData>
 8001714:	466b      	mov	r3, sp
 8001716:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 8001718:	e763      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 800171a:	240e      	movs	r4, #14
 800171c:	2303      	movs	r3, #3
 800171e:	446c      	add	r4, sp
 8001720:	7023      	strb	r3, [r4, #0]
 8001722:	2300      	movs	r3, #0
 8001724:	56f3      	ldrsb	r3, [r6, r3]
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001726:	7831      	ldrb	r1, [r6, #0]
      switch (bRegID)
 8001728:	2b00      	cmp	r3, #0
 800172a:	da00      	bge.n	800172e <MCP_ReceivedFrame+0x19a>
 800172c:	e090      	b.n	8001850 <MCP_ReceivedFrame+0x2bc>
 800172e:	2963      	cmp	r1, #99	; 0x63
 8001730:	d900      	bls.n	8001734 <MCP_ReceivedFrame+0x1a0>
 8001732:	e0f3      	b.n	800191c <MCP_ReceivedFrame+0x388>
 8001734:	2941      	cmp	r1, #65	; 0x41
 8001736:	d86b      	bhi.n	8001810 <MCP_ReceivedFrame+0x27c>
 8001738:	4a68      	ldr	r2, [pc, #416]	; (80018dc <MCP_ReceivedFrame+0x348>)
 800173a:	008b      	lsls	r3, r1, #2
 800173c:	58d3      	ldr	r3, [r2, r3]
 800173e:	469f      	mov	pc, r3
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001740:	240e      	movs	r4, #14
 8001742:	230c      	movs	r3, #12
      stepList.data = buffer;
 8001744:	9604      	str	r6, [sp, #16]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001746:	4e66      	ldr	r6, [pc, #408]	; (80018e0 <MCP_ReceivedFrame+0x34c>)
      stepList.data = buffer;
 8001748:	a804      	add	r0, sp, #16
      bErrorCode = ERROR_MP_NOT_ENABLED;
 800174a:	446c      	add	r4, sp
 800174c:	7023      	strb	r3, [r4, #0]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 800174e:	0031      	movs	r1, r6
      stepList.len = Size;
 8001750:	7107      	strb	r7, [r0, #4]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001752:	f001 f9c5 	bl	8002ae0 <UI_GetMPInfo>
 8001756:	466b      	mov	r3, sp
 8001758:	7258      	strb	r0, [r3, #9]
      if (bNoError)
 800175a:	2800      	cmp	r0, #0
 800175c:	d100      	bne.n	8001760 <MCP_ReceivedFrame+0x1cc>
 800175e:	e72c      	b.n	80015ba <MCP_ReceivedFrame+0x26>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001760:	21f0      	movs	r1, #240	; 0xf0
 8001762:	7933      	ldrb	r3, [r6, #4]
 8001764:	6832      	ldr	r2, [r6, #0]
 8001766:	69a8      	ldr	r0, [r5, #24]
 8001768:	69ec      	ldr	r4, [r5, #28]
 800176a:	47a0      	blx	r4
  if (RequireAck)
 800176c:	e72b      	b.n	80015c6 <MCP_ReceivedFrame+0x32>
      bErrorCode = ERROR_CODE_WRONG_SET;
 800176e:	240e      	movs	r4, #14
 8001770:	2305      	movs	r3, #5
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001772:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001774:	446c      	add	r4, sp
 8001776:	7023      	strb	r3, [r4, #0]
      switch (bRegID)
 8001778:	2948      	cmp	r1, #72	; 0x48
 800177a:	d900      	bls.n	800177e <MCP_ReceivedFrame+0x1ea>
 800177c:	e086      	b.n	800188c <MCP_ReceivedFrame+0x2f8>
 800177e:	4a59      	ldr	r2, [pc, #356]	; (80018e4 <MCP_ReceivedFrame+0x350>)
 8001780:	008b      	lsls	r3, r1, #2
 8001782:	58d3      	ldr	r3, [r2, r3]
 8001784:	469f      	mov	pc, r3
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001786:	78f3      	ldrb	r3, [r6, #3]
 8001788:	78b2      	ldrb	r2, [r6, #2]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	18d2      	adds	r2, r2, r3
      hIqRef = buffer[0] + (buffer[1] << 8);
 800178e:	7873      	ldrb	r3, [r6, #1]
 8001790:	7831      	ldrb	r1, [r6, #0]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	18c9      	adds	r1, r1, r3
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001796:	b212      	sxth	r2, r2
 8001798:	0028      	movs	r0, r5
 800179a:	b209      	sxth	r1, r1
 800179c:	f001 f992 	bl	8002ac4 <UI_SetCurrentReferences>
      bNoError = true;
 80017a0:	2301      	movs	r3, #1
 80017a2:	466a      	mov	r2, sp
 80017a4:	7253      	strb	r3, [r2, #9]
  if (RequireAck)
 80017a6:	e71e      	b.n	80015e6 <MCP_ReceivedFrame+0x52>
      bErrorCode = ERROR_CODE_WRONG_CMD;
 80017a8:	240e      	movs	r4, #14
 80017aa:	2307      	movs	r3, #7
 80017ac:	446c      	add	r4, sp
 80017ae:	7023      	strb	r3, [r4, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80017b0:	0028      	movs	r0, r5
      uint8_t bCmdID = buffer[0];
 80017b2:	7831      	ldrb	r1, [r6, #0]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 80017b4:	f001 f8f6 	bl	80029a4 <UI_ExecCmd>
 80017b8:	466b      	mov	r3, sp
 80017ba:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80017bc:	e711      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017be:	7973      	ldrb	r3, [r6, #5]
 80017c0:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017c2:	7871      	ldrb	r1, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	18d2      	adds	r2, r2, r3
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 80017c8:	7833      	ldrb	r3, [r6, #0]
 80017ca:	0209      	lsls	r1, r1, #8
 80017cc:	18c9      	adds	r1, r1, r3
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 80017ce:	0028      	movs	r0, r5
 80017d0:	b292      	uxth	r2, r2
 80017d2:	b209      	sxth	r1, r1
 80017d4:	f001 f932 	bl	8002a3c <UI_ExecTorqueRamp>
 80017d8:	466b      	mov	r3, sp
 80017da:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80017dc:	e701      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80017de:	23a8      	movs	r3, #168	; 0xa8
        outBuff[i] = pHandle->s_fwVer[i];
 80017e0:	240f      	movs	r4, #15
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80017e2:	58e8      	ldr	r0, [r5, r3]
 80017e4:	2201      	movs	r2, #1
 80017e6:	3801      	subs	r0, #1
        outBuff[i] = pHandle->s_fwVer[i];
 80017e8:	446c      	add	r4, sp
 80017ea:	e004      	b.n	80017f6 <MCP_ReceivedFrame+0x262>
 80017ec:	54a1      	strb	r1, [r4, r2]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 80017ee:	3201      	adds	r2, #1
 80017f0:	2a21      	cmp	r2, #33	; 0x21
 80017f2:	d100      	bne.n	80017f6 <MCP_ReceivedFrame+0x262>
 80017f4:	e0d7      	b.n	80019a6 <MCP_ReceivedFrame+0x412>
 80017f6:	5c81      	ldrb	r1, [r0, r2]
 80017f8:	1e53      	subs	r3, r2, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2900      	cmp	r1, #0
 80017fe:	d1f5      	bne.n	80017ec <MCP_ReceivedFrame+0x258>
        outBuff[i] = 0;
 8001800:	2200      	movs	r2, #0
 8001802:	ac04      	add	r4, sp, #16
 8001804:	54e2      	strb	r2, [r4, r3]
      for (; i < 32; i++)
 8001806:	3301      	adds	r3, #1
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b20      	cmp	r3, #32
 800180c:	d1fa      	bne.n	8001804 <MCP_ReceivedFrame+0x270>
 800180e:	e71b      	b.n	8001648 <MCP_ReceivedFrame+0xb4>
 8001810:	000b      	movs	r3, r1
 8001812:	3b46      	subs	r3, #70	; 0x46
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b1b      	cmp	r3, #27
 8001818:	d900      	bls.n	800181c <MCP_ReceivedFrame+0x288>
 800181a:	e75b      	b.n	80016d4 <MCP_ReceivedFrame+0x140>
 800181c:	2201      	movs	r2, #1
 800181e:	409a      	lsls	r2, r3
 8001820:	0013      	movs	r3, r2
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <MCP_ReceivedFrame+0x354>)
 8001824:	4213      	tst	r3, r2
 8001826:	d100      	bne.n	800182a <MCP_ReceivedFrame+0x296>
 8001828:	e0a2      	b.n	8001970 <MCP_ReceivedFrame+0x3dc>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800182a:	2309      	movs	r3, #9
 800182c:	446b      	add	r3, sp
 800182e:	001a      	movs	r2, r3
 8001830:	0028      	movs	r0, r5
 8001832:	f000 febb 	bl	80025ac <UI_GetReg>
          if ( bNoError == true )
 8001836:	466b      	mov	r3, sp
 8001838:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800183a:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800183c:	2b00      	cmp	r3, #0
 800183e:	d100      	bne.n	8001842 <MCP_ReceivedFrame+0x2ae>
 8001840:	e6bb      	b.n	80015ba <MCP_ReceivedFrame+0x26>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001842:	2302      	movs	r3, #2
 8001844:	21f0      	movs	r1, #240	; 0xf0
 8001846:	69a8      	ldr	r0, [r5, #24]
 8001848:	69ec      	ldr	r4, [r5, #28]
 800184a:	aa04      	add	r2, sp, #16
 800184c:	47a0      	blx	r4
  if (RequireAck)
 800184e:	e6ba      	b.n	80015c6 <MCP_ReceivedFrame+0x32>
 8001850:	2985      	cmp	r1, #133	; 0x85
 8001852:	d85c      	bhi.n	800190e <MCP_ReceivedFrame+0x37a>
 8001854:	2982      	cmp	r1, #130	; 0x82
 8001856:	d912      	bls.n	800187e <MCP_ReceivedFrame+0x2ea>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001858:	2309      	movs	r3, #9
 800185a:	446b      	add	r3, sp
 800185c:	001a      	movs	r2, r3
 800185e:	0028      	movs	r0, r5
 8001860:	f000 fea4 	bl	80025ac <UI_GetReg>
          if ( bNoError == true )
 8001864:	466b      	mov	r3, sp
 8001866:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001868:	9004      	str	r0, [sp, #16]
          if ( bNoError == true )
 800186a:	2b00      	cmp	r3, #0
 800186c:	d100      	bne.n	8001870 <MCP_ReceivedFrame+0x2dc>
 800186e:	e6a4      	b.n	80015ba <MCP_ReceivedFrame+0x26>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001870:	2304      	movs	r3, #4
 8001872:	21f0      	movs	r1, #240	; 0xf0
 8001874:	69a8      	ldr	r0, [r5, #24]
 8001876:	69ec      	ldr	r4, [r5, #28]
 8001878:	aa04      	add	r2, sp, #16
 800187a:	47a0      	blx	r4
  if (RequireAck)
 800187c:	e6a3      	b.n	80015c6 <MCP_ReceivedFrame+0x32>
 800187e:	2302      	movs	r3, #2
 8001880:	000a      	movs	r2, r1
 8001882:	439a      	bics	r2, r3
 8001884:	2a80      	cmp	r2, #128	; 0x80
 8001886:	d000      	beq.n	800188a <MCP_ReceivedFrame+0x2f6>
 8001888:	e724      	b.n	80016d4 <MCP_ReceivedFrame+0x140>
 800188a:	e057      	b.n	800193c <MCP_ReceivedFrame+0x3a8>
 800188c:	2974      	cmp	r1, #116	; 0x74
 800188e:	d077      	beq.n	8001980 <MCP_ReceivedFrame+0x3ec>
 8001890:	d92c      	bls.n	80018ec <MCP_ReceivedFrame+0x358>
 8001892:	297e      	cmp	r1, #126	; 0x7e
 8001894:	d815      	bhi.n	80018c2 <MCP_ReceivedFrame+0x32e>
 8001896:	297c      	cmp	r1, #124	; 0x7c
 8001898:	d803      	bhi.n	80018a2 <MCP_ReceivedFrame+0x30e>
 800189a:	000b      	movs	r3, r1
 800189c:	3b75      	subs	r3, #117	; 0x75
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d830      	bhi.n	8001904 <MCP_ReceivedFrame+0x370>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 80018a2:	78b2      	ldrb	r2, [r6, #2]
 80018a4:	7873      	ldrb	r3, [r6, #1]
 80018a6:	0212      	lsls	r2, r2, #8
 80018a8:	18d2      	adds	r2, r2, r3
 80018aa:	78f3      	ldrb	r3, [r6, #3]
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	18d2      	adds	r2, r2, r3
 80018b0:	7933      	ldrb	r3, [r6, #4]
 80018b2:	061b      	lsls	r3, r3, #24
 80018b4:	18d2      	adds	r2, r2, r3
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80018b6:	0028      	movs	r0, r5
 80018b8:	f000 fd60 	bl	800237c <UI_SetReg>
 80018bc:	466b      	mov	r3, sp
 80018be:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 80018c0:	e68f      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
 80018c2:	000b      	movs	r3, r1
 80018c4:	337a      	adds	r3, #122	; 0x7a
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d81b      	bhi.n	8001904 <MCP_ReceivedFrame+0x370>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 80018cc:	78b2      	ldrb	r2, [r6, #2]
 80018ce:	7873      	ldrb	r3, [r6, #1]
 80018d0:	0212      	lsls	r2, r2, #8
 80018d2:	e7ef      	b.n	80018b4 <MCP_ReceivedFrame+0x320>
 80018d4:	080064f8 	.word	0x080064f8
 80018d8:	08006544 	.word	0x08006544
 80018dc:	08006590 	.word	0x08006590
 80018e0:	2000098c 	.word	0x2000098c
 80018e4:	08006698 	.word	0x08006698
 80018e8:	0f8ffe78 	.word	0x0f8ffe78
 80018ec:	000b      	movs	r3, r1
 80018ee:	3b4f      	subs	r3, #79	; 0x4f
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b16      	cmp	r3, #22
 80018f4:	d806      	bhi.n	8001904 <MCP_ReceivedFrame+0x370>
 80018f6:	2201      	movs	r2, #1
 80018f8:	409a      	lsls	r2, r3
 80018fa:	482c      	ldr	r0, [pc, #176]	; (80019ac <MCP_ReceivedFrame+0x418>)
 80018fc:	4202      	tst	r2, r0
 80018fe:	d1e5      	bne.n	80018cc <MCP_ReceivedFrame+0x338>
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d0ce      	beq.n	80018a2 <MCP_ReceivedFrame+0x30e>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001904:	2302      	movs	r3, #2
 8001906:	7023      	strb	r3, [r4, #0]
    if (bNoError)
 8001908:	466b      	mov	r3, sp
 800190a:	7a58      	ldrb	r0, [r3, #9]
 800190c:	e669      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
 800190e:	000b      	movs	r3, r1
 8001910:	337a      	adds	r3, #122	; 0x7a
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d900      	bls.n	800191a <MCP_ReceivedFrame+0x386>
 8001918:	e6dc      	b.n	80016d4 <MCP_ReceivedFrame+0x140>
 800191a:	e786      	b.n	800182a <MCP_ReceivedFrame+0x296>
 800191c:	000a      	movs	r2, r1
 800191e:	2301      	movs	r3, #1
 8001920:	3a64      	subs	r2, #100	; 0x64
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	4093      	lsls	r3, r2
 8001926:	4a22      	ldr	r2, [pc, #136]	; (80019b0 <MCP_ReceivedFrame+0x41c>)
 8001928:	4213      	tst	r3, r2
 800192a:	d195      	bne.n	8001858 <MCP_ReceivedFrame+0x2c4>
 800192c:	4a21      	ldr	r2, [pc, #132]	; (80019b4 <MCP_ReceivedFrame+0x420>)
 800192e:	4213      	tst	r3, r2
 8001930:	d000      	beq.n	8001934 <MCP_ReceivedFrame+0x3a0>
 8001932:	e77a      	b.n	800182a <MCP_ReceivedFrame+0x296>
 8001934:	4a20      	ldr	r2, [pc, #128]	; (80019b8 <MCP_ReceivedFrame+0x424>)
 8001936:	4213      	tst	r3, r2
 8001938:	d100      	bne.n	800193c <MCP_ReceivedFrame+0x3a8>
 800193a:	e6cb      	b.n	80016d4 <MCP_ReceivedFrame+0x140>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800193c:	2309      	movs	r3, #9
 800193e:	446b      	add	r3, sp
 8001940:	001a      	movs	r2, r3
 8001942:	0028      	movs	r0, r5
 8001944:	f000 fe32 	bl	80025ac <UI_GetReg>
           if ( bNoError == true )
 8001948:	466b      	mov	r3, sp
 800194a:	7a5b      	ldrb	r3, [r3, #9]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 800194c:	9004      	str	r0, [sp, #16]
           if ( bNoError == true )
 800194e:	2b00      	cmp	r3, #0
 8001950:	d100      	bne.n	8001954 <MCP_ReceivedFrame+0x3c0>
 8001952:	e632      	b.n	80015ba <MCP_ReceivedFrame+0x26>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001954:	2301      	movs	r3, #1
 8001956:	21f0      	movs	r1, #240	; 0xf0
 8001958:	69a8      	ldr	r0, [r5, #24]
 800195a:	69ec      	ldr	r4, [r5, #28]
 800195c:	aa04      	add	r2, sp, #16
 800195e:	47a0      	blx	r4
  if (RequireAck)
 8001960:	e631      	b.n	80015c6 <MCP_ReceivedFrame+0x32>
    if (bNoError)
 8001962:	466b      	mov	r3, sp
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001964:	240e      	movs	r4, #14
    if (bNoError)
 8001966:	7a58      	ldrb	r0, [r3, #9]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001968:	2301      	movs	r3, #1
 800196a:	446c      	add	r4, sp
 800196c:	7023      	strb	r3, [r4, #0]
  if (RequireAck)
 800196e:	e638      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
 8001970:	4a12      	ldr	r2, [pc, #72]	; (80019bc <MCP_ReceivedFrame+0x428>)
 8001972:	4213      	tst	r3, r2
 8001974:	d000      	beq.n	8001978 <MCP_ReceivedFrame+0x3e4>
 8001976:	e76f      	b.n	8001858 <MCP_ReceivedFrame+0x2c4>
 8001978:	4a11      	ldr	r2, [pc, #68]	; (80019c0 <MCP_ReceivedFrame+0x42c>)
 800197a:	4213      	tst	r3, r2
 800197c:	d1de      	bne.n	800193c <MCP_ReceivedFrame+0x3a8>
 800197e:	e6a9      	b.n	80016d4 <MCP_ReceivedFrame+0x140>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 8001980:	0028      	movs	r0, r5
 8001982:	7872      	ldrb	r2, [r6, #1]
 8001984:	f000 fcfa 	bl	800237c <UI_SetReg>
 8001988:	466b      	mov	r3, sp
 800198a:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 800198c:	e629      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800198e:	2100      	movs	r1, #0
 8001990:	0028      	movs	r0, r5
          int32_t wValue = (int32_t)(buffer[1]);
 8001992:	7872      	ldrb	r2, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001994:	f000 fcf2 	bl	800237c <UI_SetReg>
 8001998:	466b      	mov	r3, sp
 800199a:	7258      	strb	r0, [r3, #9]
  if (RequireAck)
 800199c:	e621      	b.n	80015e2 <MCP_ReceivedFrame+0x4e>
 800199e:	2326      	movs	r3, #38	; 0x26
 80019a0:	2124      	movs	r1, #36	; 0x24
 80019a2:	2222      	movs	r2, #34	; 0x22
 80019a4:	e64a      	b.n	800163c <MCP_ReceivedFrame+0xa8>
 80019a6:	ac04      	add	r4, sp, #16
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 80019a8:	e64e      	b.n	8001648 <MCP_ReceivedFrame+0xb4>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	006407f1 	.word	0x006407f1
 80019b0:	0ffe11f0 	.word	0x0ffe11f0
 80019b4:	0000cc03 	.word	0x0000cc03
 80019b8:	0001020c 	.word	0x0001020c
 80019bc:	00200107 	.word	0x00200107
 80019c0:	00100080 	.word	0x00100080

080019c4 <MCP_WaitNextFrame>:
{
 80019c4:	b510      	push	{r4, lr}
 80019c6:	0004      	movs	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80019c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ca:	6980      	ldr	r0, [r0, #24]
 80019cc:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80019ce:	2280      	movs	r2, #128	; 0x80
 80019d0:	23ac      	movs	r3, #172	; 0xac
 80019d2:	54e2      	strb	r2, [r4, r3]
  pHandle->fFcpReceive(pHandle->pFCP);
 80019d4:	69a0      	ldr	r0, [r4, #24]
 80019d6:	6a23      	ldr	r3, [r4, #32]
 80019d8:	4798      	blx	r3
}
 80019da:	bd10      	pop	{r4, pc}

080019dc <MCP_Init>:
{
 80019dc:	b570      	push	{r4, r5, r6, lr}
 80019de:	0004      	movs	r4, r0
 80019e0:	001d      	movs	r5, r3
  pHandle->s_fwVer = s_fwVer;
 80019e2:	23a8      	movs	r3, #168	; 0xa8
{
 80019e4:	0016      	movs	r6, r2
 80019e6:	b082      	sub	sp, #8
  pHandle->s_fwVer = s_fwVer;
 80019e8:	9a07      	ldr	r2, [sp, #28]
  pHandle->pFCP = pFCP;
 80019ea:	61a1      	str	r1, [r4, #24]
{
 80019ec:	0008      	movs	r0, r1
  FCP_SetClient( pFCP, pHandle,
 80019ee:	4908      	ldr	r1, [pc, #32]	; (8001a10 <MCP_Init+0x34>)
  pHandle->s_fwVer = s_fwVer;
 80019f0:	50e2      	str	r2, [r4, r3]
  FCP_SetClient( pFCP, pHandle,
 80019f2:	9100      	str	r1, [sp, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <MCP_Init+0x38>)
 80019f6:	0021      	movs	r1, r4
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <MCP_Init+0x3c>)
 80019fa:	f002 fc81 	bl	8004300 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80019fe:	9b06      	ldr	r3, [sp, #24]
  MCP_WaitNextFrame(pHandle);
 8001a00:	0020      	movs	r0, r4
  pHandle->fFcpSend = fFcpSend;
 8001a02:	61e6      	str	r6, [r4, #28]
  pHandle->fFcpReceive = fFcpReceive;
 8001a04:	6225      	str	r5, [r4, #32]
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 8001a06:	6263      	str	r3, [r4, #36]	; 0x24
  MCP_WaitNextFrame(pHandle);
 8001a08:	f7ff ffdc 	bl	80019c4 <MCP_WaitNextFrame>
}
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	08001a1d 	.word	0x08001a1d
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001595 	.word	0x08001595

08001a1c <MCP_OnTimeOut>:
{
 8001a1c:	b510      	push	{r4, lr}
     MCP_WaitNextFrame(pHandle);
 8001a1e:	f7ff ffd1 	bl	80019c4 <MCP_WaitNextFrame>
}
 8001a22:	bd10      	pop	{r4, pc}

08001a24 <MCP_SentFrame>:
{
 8001a24:	b510      	push	{r4, lr}
    MCP_WaitNextFrame(pHandle);
 8001a26:	f7ff ffcd 	bl	80019c4 <MCP_WaitNextFrame>
}
 8001a2a:	bd10      	pop	{r4, pc}

08001a2c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001a2c:	b530      	push	{r4, r5, lr}
 8001a2e:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8001a30:	f001 fece 	bl	80037d0 <HAL_RCC_GetHCLKFreq>
 8001a34:	21fa      	movs	r1, #250	; 0xfa
 8001a36:	00c9      	lsls	r1, r1, #3
 8001a38:	f7fe fb66 	bl	8000108 <__udivsi3>
 8001a3c:	f001 fa16 	bl	8002e6c <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8001a40:	4d08      	ldr	r5, [pc, #32]	; (8001a64 <MX_MotorControl_Init+0x38>)
 8001a42:	4c09      	ldr	r4, [pc, #36]	; (8001a68 <MX_MotorControl_Init+0x3c>)
 8001a44:	0029      	movs	r1, r5
 8001a46:	0020      	movs	r0, r4
 8001a48:	f7ff f91c 	bl	8000c84 <MCboot>
  mc_lock_pins();
 8001a4c:	f7ff fd2c 	bl	80014a8 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <MX_MotorControl_Init+0x40>)
 8001a52:	0022      	movs	r2, r4
 8001a54:	9300      	str	r3, [sp, #0]
 8001a56:	2101      	movs	r1, #1
 8001a58:	002b      	movs	r3, r5
 8001a5a:	4805      	ldr	r0, [pc, #20]	; (8001a70 <MX_MotorControl_Init+0x44>)
 8001a5c:	f000 fc04 	bl	8002268 <UI_TaskInit>
}
 8001a60:	b003      	add	sp, #12
 8001a62:	bd30      	pop	{r4, r5, pc}
 8001a64:	20000998 	.word	0x20000998
 8001a68:	20000994 	.word	0x20000994
 8001a6c:	080067bc 	.word	0x080067bc
 8001a70:	2000070c 	.word	0x2000070c

08001a74 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 8001a74:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001a76:	4d56      	ldr	r5, [pc, #344]	; (8001bd0 <RCM_RegisterRegConv+0x15c>)
{
 8001a78:	0003      	movs	r3, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001a7a:	6829      	ldr	r1, [r5, #0]
 8001a7c:	2900      	cmp	r1, #0
 8001a7e:	d02a      	beq.n	8001ad6 <RCM_RegisterRegConv+0x62>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001a80:	7902      	ldrb	r2, [r0, #4]
 8001a82:	7908      	ldrb	r0, [r1, #4]
 8001a84:	4282      	cmp	r2, r0
 8001a86:	d01a      	beq.n	8001abe <RCM_RegisterRegConv+0x4a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001a88:	6869      	ldr	r1, [r5, #4]
 8001a8a:	2900      	cmp	r1, #0
 8001a8c:	d034      	beq.n	8001af8 <RCM_RegisterRegConv+0x84>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001a8e:	790c      	ldrb	r4, [r1, #4]
  uint8_t handle=255;
 8001a90:	20ff      	movs	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001a92:	4294      	cmp	r4, r2
 8001a94:	d027      	beq.n	8001ae6 <RCM_RegisterRegConv+0x72>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001a96:	68a9      	ldr	r1, [r5, #8]
 8001a98:	2900      	cmp	r1, #0
 8001a9a:	d066      	beq.n	8001b6a <RCM_RegisterRegConv+0xf6>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001a9c:	790c      	ldrb	r4, [r1, #4]
 8001a9e:	4294      	cmp	r4, r2
 8001aa0:	d032      	beq.n	8001b08 <RCM_RegisterRegConv+0x94>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001aa2:	68e9      	ldr	r1, [r5, #12]
 8001aa4:	2900      	cmp	r1, #0
 8001aa6:	d100      	bne.n	8001aaa <RCM_RegisterRegConv+0x36>
 8001aa8:	e06c      	b.n	8001b84 <RCM_RegisterRegConv+0x110>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001aaa:	790c      	ldrb	r4, [r1, #4]
 8001aac:	4294      	cmp	r4, r2
 8001aae:	d100      	bne.n	8001ab2 <RCM_RegisterRegConv+0x3e>
 8001ab0:	e06f      	b.n	8001b92 <RCM_RegisterRegConv+0x11e>
    while (i < RCM_MAX_CONV)
 8001ab2:	0201      	lsls	r1, r0, #8
 8001ab4:	4301      	orrs	r1, r0
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 8001ab6:	2803      	cmp	r0, #3
 8001ab8:	d962      	bls.n	8001b80 <RCM_RegisterRegConv+0x10c>
 8001aba:	20ff      	movs	r0, #255	; 0xff
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001abe:	6809      	ldr	r1, [r1, #0]
 8001ac0:	681c      	ldr	r4, [r3, #0]
 8001ac2:	42a1      	cmp	r1, r4
 8001ac4:	d028      	beq.n	8001b18 <RCM_RegisterRegConv+0xa4>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ac6:	6869      	ldr	r1, [r5, #4]
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d1e0      	bne.n	8001a8e <RCM_RegisterRegConv+0x1a>
 8001acc:	68a9      	ldr	r1, [r5, #8]
 8001ace:	2900      	cmp	r1, #0
 8001ad0:	d071      	beq.n	8001bb6 <RCM_RegisterRegConv+0x142>
      i++;
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	e7e2      	b.n	8001a9c <RCM_RegisterRegConv+0x28>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ad6:	6869      	ldr	r1, [r5, #4]
  uint8_t i=0;
 8001ad8:	2000      	movs	r0, #0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001ada:	2900      	cmp	r1, #0
 8001adc:	d00d      	beq.n	8001afa <RCM_RegisterRegConv+0x86>
 8001ade:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ae0:	790c      	ldrb	r4, [r1, #4]
 8001ae2:	4294      	cmp	r4, r2
 8001ae4:	d1d7      	bne.n	8001a96 <RCM_RegisterRegConv+0x22>
 8001ae6:	6809      	ldr	r1, [r1, #0]
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	42a1      	cmp	r1, r4
 8001aec:	d1d3      	bne.n	8001a96 <RCM_RegisterRegConv+0x22>
 8001aee:	2202      	movs	r2, #2
 8001af0:	32ff      	adds	r2, #255	; 0xff
      i++;
 8001af2:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001af4:	1c11      	adds	r1, r2, #0
 8001af6:	e011      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
      i++;
 8001af8:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001afa:	68a9      	ldr	r1, [r5, #8]
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d02f      	beq.n	8001b60 <RCM_RegisterRegConv+0xec>
 8001b00:	791a      	ldrb	r2, [r3, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b02:	790c      	ldrb	r4, [r1, #4]
 8001b04:	4294      	cmp	r4, r2
 8001b06:	d1cc      	bne.n	8001aa2 <RCM_RegisterRegConv+0x2e>
 8001b08:	6809      	ldr	r1, [r1, #0]
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	42a1      	cmp	r1, r4
 8001b0e:	d1c8      	bne.n	8001aa2 <RCM_RegisterRegConv+0x2e>
 8001b10:	4a30      	ldr	r2, [pc, #192]	; (8001bd4 <RCM_RegisterRegConv+0x160>)
      i++;
 8001b12:	2002      	movs	r0, #2
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b14:	1c11      	adds	r1, r2, #0
 8001b16:	e001      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
 8001b18:	2100      	movs	r1, #0
  uint8_t i=0;
 8001b1a:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8001b1c:	0082      	lsls	r2, r0, #2
 8001b1e:	50ab      	str	r3, [r5, r2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8001b20:	2500      	movs	r5, #0
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <RCM_RegisterRegConv+0x164>)
 8001b24:	00c2      	lsls	r2, r0, #3
 8001b26:	50d5      	str	r5, [r2, r3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001b28:	68a3      	ldr	r3, [r4, #8]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8001b2a:	07db      	lsls	r3, r3, #31
 8001b2c:	d40e      	bmi.n	8001b4c <RCM_RegisterRegConv+0xd8>
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b2e:	68a2      	ldr	r2, [r4, #8]
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <RCM_RegisterRegConv+0x168>)
 8001b32:	401a      	ands	r2, r3
 8001b34:	3318      	adds	r3, #24
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60a3      	str	r3, [r4, #8]
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001b3a:	68a3      	ldr	r3, [r4, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	dbfc      	blt.n	8001b3a <RCM_RegisterRegConv+0xc6>
  MODIFY_REG(ADCx->CR,
 8001b40:	68a3      	ldr	r3, [r4, #8]
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <RCM_RegisterRegConv+0x168>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	2201      	movs	r2, #1
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60a3      	str	r3, [r4, #8]
      RCM_NoInj_array [handle].enable = false;
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	0042      	lsls	r2, r0, #1
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <RCM_RegisterRegConv+0x16c>)
 8001b52:	1812      	adds	r2, r2, r0
 8001b54:	0052      	lsls	r2, r2, #1
 8001b56:	54d4      	strb	r4, [r2, r3]
      RCM_NoInj_array [handle].prev = handle;
 8001b58:	189b      	adds	r3, r3, r2
 8001b5a:	8099      	strh	r1, [r3, #4]
 8001b5c:	e7ae      	b.n	8001abc <RCM_RegisterRegConv+0x48>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b5e:	2000      	movs	r0, #0
 8001b60:	68e9      	ldr	r1, [r5, #12]
 8001b62:	2900      	cmp	r1, #0
 8001b64:	d01e      	beq.n	8001ba4 <RCM_RegisterRegConv+0x130>
 8001b66:	791a      	ldrb	r2, [r3, #4]
 8001b68:	e79f      	b.n	8001aaa <RCM_RegisterRegConv+0x36>
 8001b6a:	2804      	cmp	r0, #4
 8001b6c:	d9f7      	bls.n	8001b5e <RCM_RegisterRegConv+0xea>
 8001b6e:	68e9      	ldr	r1, [r5, #12]
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d002      	beq.n	8001b7a <RCM_RegisterRegConv+0x106>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b74:	7908      	ldrb	r0, [r1, #4]
 8001b76:	4282      	cmp	r2, r0
 8001b78:	d018      	beq.n	8001bac <RCM_RegisterRegConv+0x138>
      i++;
 8001b7a:	2002      	movs	r0, #2
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001b7c:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <RCM_RegisterRegConv+0x160>)
 8001b7e:	1c11      	adds	r1, r2, #0
 8001b80:	681c      	ldr	r4, [r3, #0]
 8001b82:	e7cb      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
 8001b84:	2804      	cmp	r0, #4
 8001b86:	d90d      	bls.n	8001ba4 <RCM_RegisterRegConv+0x130>
 8001b88:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <RCM_RegisterRegConv+0x170>)
      i++;
 8001b8a:	2003      	movs	r0, #3
 8001b8c:	681c      	ldr	r4, [r3, #0]
 8001b8e:	1c11      	adds	r1, r2, #0
 8001b90:	e7c4      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
 8001b92:	681c      	ldr	r4, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001b94:	680a      	ldr	r2, [r1, #0]
 8001b96:	42a2      	cmp	r2, r4
 8001b98:	d000      	beq.n	8001b9c <RCM_RegisterRegConv+0x128>
 8001b9a:	e78a      	b.n	8001ab2 <RCM_RegisterRegConv+0x3e>
 8001b9c:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <RCM_RegisterRegConv+0x170>)
      i++;
 8001b9e:	2003      	movs	r0, #3
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001ba0:	1c11      	adds	r1, r2, #0
 8001ba2:	e7bb      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
 8001ba4:	681c      	ldr	r4, [r3, #0]
    while (i < RCM_MAX_CONV)
 8001ba6:	0201      	lsls	r1, r0, #8
 8001ba8:	4301      	orrs	r1, r0
    if (handle < RCM_MAX_CONV )
 8001baa:	e7b7      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bac:	680a      	ldr	r2, [r1, #0]
 8001bae:	681c      	ldr	r4, [r3, #0]
 8001bb0:	42a2      	cmp	r2, r4
 8001bb2:	d0f3      	beq.n	8001b9c <RCM_RegisterRegConv+0x128>
 8001bb4:	e7ac      	b.n	8001b10 <RCM_RegisterRegConv+0x9c>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8001bb6:	68e9      	ldr	r1, [r5, #12]
 8001bb8:	2900      	cmp	r1, #0
 8001bba:	d007      	beq.n	8001bcc <RCM_RegisterRegConv+0x158>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bbc:	790e      	ldrb	r6, [r1, #4]
      i++;
 8001bbe:	2001      	movs	r0, #1
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8001bc0:	4296      	cmp	r6, r2
 8001bc2:	d0e7      	beq.n	8001b94 <RCM_RegisterRegConv+0x120>
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	32ff      	adds	r2, #255	; 0xff
 8001bc8:	1c11      	adds	r1, r2, #0
 8001bca:	e7a7      	b.n	8001b1c <RCM_RegisterRegConv+0xa8>
      i++;
 8001bcc:	2001      	movs	r0, #1
 8001bce:	e7ea      	b.n	8001ba6 <RCM_RegisterRegConv+0x132>
 8001bd0:	200009dc 	.word	0x200009dc
 8001bd4:	00000202 	.word	0x00000202
 8001bd8:	2000099c 	.word	0x2000099c
 8001bdc:	7fffffe8 	.word	0x7fffffe8
 8001be0:	200009bc 	.word	0x200009bc
 8001be4:	00000303 	.word	0x00000303

08001be8 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8001be8:	0041      	lsls	r1, r0, #1
 8001bea:	4b5a      	ldr	r3, [pc, #360]	; (8001d54 <RCM_ExecRegularConv+0x16c>)
 8001bec:	180a      	adds	r2, r1, r0
 8001bee:	0052      	lsls	r2, r2, #1
 8001bf0:	5c9a      	ldrb	r2, [r3, r2]
{
 8001bf2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (RCM_NoInj_array [handle].enable == false)
 8001bf4:	2a00      	cmp	r2, #0
 8001bf6:	d142      	bne.n	8001c7e <RCM_ExecRegularConv+0x96>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d11c      	bne.n	8001c38 <RCM_ExecRegularConv+0x50>
  uint8_t LastEnable = RCM_MAX_CONV;
 8001bfe:	2504      	movs	r5, #4
      if (RCM_NoInj_array [i].enable == true)
 8001c00:	799a      	ldrb	r2, [r3, #6]
 8001c02:	2a00      	cmp	r2, #0
 8001c04:	d100      	bne.n	8001c08 <RCM_ExecRegularConv+0x20>
 8001c06:	e07a      	b.n	8001cfe <RCM_ExecRegularConv+0x116>
      {
        if (RCM_NoInj_array [i].next > handle)
 8001c08:	7add      	ldrb	r5, [r3, #11]
 8001c0a:	42a8      	cmp	r0, r5
 8001c0c:	d200      	bcs.n	8001c10 <RCM_ExecRegularConv+0x28>
 8001c0e:	e094      	b.n	8001d3a <RCM_ExecRegularConv+0x152>
      if (RCM_NoInj_array [i].enable == true)
 8001c10:	7b1a      	ldrb	r2, [r3, #12]
 8001c12:	2a00      	cmp	r2, #0
 8001c14:	d100      	bne.n	8001c18 <RCM_ExecRegularConv+0x30>
 8001c16:	e093      	b.n	8001d40 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array [i].next > handle)
 8001c18:	7c5d      	ldrb	r5, [r3, #17]
 8001c1a:	42a8      	cmp	r0, r5
 8001c1c:	d200      	bcs.n	8001c20 <RCM_ExecRegularConv+0x38>
 8001c1e:	e094      	b.n	8001d4a <RCM_ExecRegularConv+0x162>
      if (RCM_NoInj_array [i].enable == true)
 8001c20:	7c9a      	ldrb	r2, [r3, #18]
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8001c22:	2502      	movs	r5, #2
      if (RCM_NoInj_array [i].enable == true)
 8001c24:	2a00      	cmp	r2, #0
 8001c26:	d100      	bne.n	8001c2a <RCM_ExecRegularConv+0x42>
 8001c28:	e073      	b.n	8001d12 <RCM_ExecRegularConv+0x12a>
        if (RCM_NoInj_array [i].next > handle)
 8001c2a:	7ddd      	ldrb	r5, [r3, #23]
 8001c2c:	4285      	cmp	r5, r0
 8001c2e:	d800      	bhi.n	8001c32 <RCM_ExecRegularConv+0x4a>
 8001c30:	e08e      	b.n	8001d50 <RCM_ExecRegularConv+0x168>
      i++;
 8001c32:	2603      	movs	r6, #3
      if (RCM_NoInj_array [i].enable == true)
 8001c34:	2403      	movs	r4, #3
 8001c36:	e005      	b.n	8001c44 <RCM_ExecRegularConv+0x5c>
        if (RCM_NoInj_array [i].next > handle)
 8001c38:	795d      	ldrb	r5, [r3, #5]
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d300      	bcc.n	8001c40 <RCM_ExecRegularConv+0x58>
 8001c3e:	e076      	b.n	8001d2e <RCM_ExecRegularConv+0x146>
  uint8_t i=0;
 8001c40:	2600      	movs	r6, #0
      if (RCM_NoInj_array [i].enable == true)
 8001c42:	2400      	movs	r4, #0
          RCM_NoInj_array [handle].next = formerNext;
 8001c44:	180a      	adds	r2, r1, r0
 8001c46:	0052      	lsls	r2, r2, #1
 8001c48:	189a      	adds	r2, r3, r2
 8001c4a:	7155      	strb	r5, [r2, #5]
          RCM_NoInj_array [handle].prev = i;
 8001c4c:	7116      	strb	r6, [r2, #4]
          RCM_NoInj_array [i].next = handle;
 8001c4e:	0062      	lsls	r2, r4, #1
 8001c50:	1912      	adds	r2, r2, r4
 8001c52:	0052      	lsls	r2, r2, #1
 8001c54:	189a      	adds	r2, r3, r2
 8001c56:	7150      	strb	r0, [r2, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 8001c58:	006a      	lsls	r2, r5, #1
 8001c5a:	1952      	adds	r2, r2, r5
       {
         formerNext = RCM_NoInj_array [LastEnable].next;
         RCM_NoInj_array [handle].next = formerNext;
         RCM_NoInj_array [handle].prev = LastEnable;
         RCM_NoInj_array [LastEnable].next = handle;
         RCM_NoInj_array [formerNext].prev = handle;
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	189a      	adds	r2, r3, r2
 8001c60:	7110      	strb	r0, [r2, #4]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8001c62:	4a3d      	ldr	r2, [pc, #244]	; (8001d58 <RCM_ExecRegularConv+0x170>)
 8001c64:	7815      	ldrb	r5, [r2, #0]
    RCM_NoInj_array [handle].enable = true;
 8001c66:	2601      	movs	r6, #1
 8001c68:	180c      	adds	r4, r1, r0
 8001c6a:	0064      	lsls	r4, r4, #1
 8001c6c:	531e      	strh	r6, [r3, r4]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8001c6e:	006c      	lsls	r4, r5, #1
 8001c70:	1964      	adds	r4, r4, r5
 8001c72:	0064      	lsls	r4, r4, #1
 8001c74:	191c      	adds	r4, r3, r4
 8001c76:	7864      	ldrb	r4, [r4, #1]
 8001c78:	2c01      	cmp	r4, #1
 8001c7a:	d000      	beq.n	8001c7e <RCM_ExecRegularConv+0x96>
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 8001c7c:	7010      	strb	r0, [r2, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 8001c7e:	2477      	movs	r4, #119	; 0x77
 8001c80:	4a36      	ldr	r2, [pc, #216]	; (8001d5c <RCM_ExecRegularConv+0x174>)
 8001c82:	5d12      	ldrb	r2, [r2, r4]
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d135      	bne.n	8001cf4 <RCM_ExecRegularConv+0x10c>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001c88:	2703      	movs	r7, #3
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[handle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001c8a:	4e35      	ldr	r6, [pc, #212]	; (8001d60 <RCM_ExecRegularConv+0x178>)
 8001c8c:	0082      	lsls	r2, r0, #2
 8001c8e:	58b5      	ldr	r5, [r6, r2]
 8001c90:	682a      	ldr	r2, [r5, #0]
 8001c92:	68d4      	ldr	r4, [r2, #12]
 8001c94:	43bc      	bics	r4, r7
 8001c96:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001c98:	68d4      	ldr	r4, [r2, #12]
 8001c9a:	4f32      	ldr	r7, [pc, #200]	; (8001d64 <RCM_ExecRegularConv+0x17c>)
 8001c9c:	403c      	ands	r4, r7
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001c9e:	2707      	movs	r7, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001ca0:	60d4      	str	r4, [r2, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001ca2:	6954      	ldr	r4, [r2, #20]
 8001ca4:	43bc      	bics	r4, r7
 8001ca6:	68af      	ldr	r7, [r5, #8]
 8001ca8:	433c      	orrs	r4, r7
 8001caa:	6154      	str	r4, [r2, #20]
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cac:	2480      	movs	r4, #128	; 0x80
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[handle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[handle]->regADC,  RCM_handle_array[handle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[handle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel) );
 8001cae:	792d      	ldrb	r5, [r5, #4]
 8001cb0:	01a4      	lsls	r4, r4, #6
 8001cb2:	40ac      	lsls	r4, r5
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001cb4:	2504      	movs	r5, #4
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001cb6:	0b64      	lsrs	r4, r4, #13
 8001cb8:	6294      	str	r4, [r2, #40]	; 0x28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001cba:	6015      	str	r5, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8001cbc:	6894      	ldr	r4, [r2, #8]
 8001cbe:	4f2a      	ldr	r7, [pc, #168]	; (8001d68 <RCM_ExecRegularConv+0x180>)
 8001cc0:	403c      	ands	r4, r7
 8001cc2:	432c      	orrs	r4, r5
 8001cc4:	6094      	str	r4, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001cc6:	6814      	ldr	r4, [r2, #0]

    /* Start ADC conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );

    /* Wait EOC */
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
 8001cc8:	4225      	tst	r5, r4
 8001cca:	d0fc      	beq.n	8001cc6 <RCM_ExecRegularConv+0xde>
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001ccc:	2703      	movs	r7, #3
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001cce:	6c14      	ldr	r4, [r2, #64]	; 0x40
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001cd0:	180a      	adds	r2, r1, r0
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001cd2:	4d21      	ldr	r5, [pc, #132]	; (8001d58 <RCM_ExecRegularConv+0x170>)
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 8001cd4:	0052      	lsls	r2, r2, #1
 8001cd6:	189a      	adds	r2, r3, r2
 8001cd8:	8054      	strh	r4, [r2, #2]
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
 8001cda:	782c      	ldrb	r4, [r5, #0]
 8001cdc:	00a4      	lsls	r4, r4, #2
 8001cde:	5934      	ldr	r4, [r6, r4]
 8001ce0:	6826      	ldr	r6, [r4, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001ce2:	68f4      	ldr	r4, [r6, #12]
 8001ce4:	43bc      	bics	r4, r7
 8001ce6:	3f02      	subs	r7, #2
 8001ce8:	433c      	orrs	r4, r7
 8001cea:	60f4      	str	r4, [r6, #12]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8001cec:	7954      	ldrb	r4, [r2, #5]
 8001cee:	702c      	strb	r4, [r5, #0]
    RCM_NoInj_array [handle].status = valid;
 8001cf0:	2402      	movs	r4, #2
 8001cf2:	7054      	strb	r4, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 8001cf4:	1809      	adds	r1, r1, r0
 8001cf6:	0049      	lsls	r1, r1, #1
 8001cf8:	185b      	adds	r3, r3, r1
return retVal;
 8001cfa:	8858      	ldrh	r0, [r3, #2]
}
 8001cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (RCM_NoInj_array [i].enable == true)
 8001cfe:	7b1a      	ldrb	r2, [r3, #12]
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	d000      	beq.n	8001d06 <RCM_ExecRegularConv+0x11e>
 8001d04:	e788      	b.n	8001c18 <RCM_ExecRegularConv+0x30>
 8001d06:	7c9a      	ldrb	r2, [r3, #18]
 8001d08:	2a00      	cmp	r2, #0
 8001d0a:	d000      	beq.n	8001d0e <RCM_ExecRegularConv+0x126>
 8001d0c:	e78d      	b.n	8001c2a <RCM_ExecRegularConv+0x42>
       if (LastEnable != RCM_MAX_CONV )
 8001d0e:	2d04      	cmp	r5, #4
 8001d10:	d00f      	beq.n	8001d32 <RCM_ExecRegularConv+0x14a>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8001d12:	006a      	lsls	r2, r5, #1
 8001d14:	1952      	adds	r2, r2, r5
 8001d16:	0052      	lsls	r2, r2, #1
 8001d18:	189a      	adds	r2, r3, r2
         RCM_NoInj_array [handle].next = formerNext;
 8001d1a:	180c      	adds	r4, r1, r0
         formerNext = RCM_NoInj_array [LastEnable].next;
 8001d1c:	7956      	ldrb	r6, [r2, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8001d1e:	0064      	lsls	r4, r4, #1
 8001d20:	191c      	adds	r4, r3, r4
 8001d22:	7166      	strb	r6, [r4, #5]
         RCM_NoInj_array [LastEnable].next = handle;
 8001d24:	7150      	strb	r0, [r2, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8001d26:	0072      	lsls	r2, r6, #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8001d28:	7125      	strb	r5, [r4, #4]
         RCM_NoInj_array [formerNext].prev = handle;
 8001d2a:	1992      	adds	r2, r2, r6
 8001d2c:	e796      	b.n	8001c5c <RCM_ExecRegularConv+0x74>
  uint8_t i=0;
 8001d2e:	2500      	movs	r5, #0
 8001d30:	e766      	b.n	8001c00 <RCM_ExecRegularConv+0x18>
         RCM_currentHandle = handle;
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <RCM_ExecRegularConv+0x170>)
 8001d34:	0005      	movs	r5, r0
 8001d36:	7010      	strb	r0, [r2, #0]
    while (i < RCM_MAX_CONV)
 8001d38:	e795      	b.n	8001c66 <RCM_ExecRegularConv+0x7e>
      i++;
 8001d3a:	2601      	movs	r6, #1
      if (RCM_NoInj_array [i].enable == true)
 8001d3c:	2401      	movs	r4, #1
 8001d3e:	e781      	b.n	8001c44 <RCM_ExecRegularConv+0x5c>
 8001d40:	7c9a      	ldrb	r2, [r3, #18]
      i++;
 8001d42:	2501      	movs	r5, #1
      if (RCM_NoInj_array [i].enable == true)
 8001d44:	2a00      	cmp	r2, #0
 8001d46:	d0e4      	beq.n	8001d12 <RCM_ExecRegularConv+0x12a>
 8001d48:	e76f      	b.n	8001c2a <RCM_ExecRegularConv+0x42>
      i++;
 8001d4a:	2602      	movs	r6, #2
      if (RCM_NoInj_array [i].enable == true)
 8001d4c:	2402      	movs	r4, #2
 8001d4e:	e779      	b.n	8001c44 <RCM_ExecRegularConv+0x5c>
      i++;
 8001d50:	2503      	movs	r5, #3
 8001d52:	e7de      	b.n	8001d12 <RCM_ExecRegularConv+0x12a>
 8001d54:	200009bc 	.word	0x200009bc
 8001d58:	200009d8 	.word	0x200009d8
 8001d5c:	2000024c 	.word	0x2000024c
 8001d60:	200009dc 	.word	0x200009dc
 8001d64:	fffff23f 	.word	0xfffff23f
 8001d68:	7fffffe8 	.word	0x7fffffe8

08001d6c <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 8001d6c:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 8001d6e:	4c11      	ldr	r4, [pc, #68]	; (8001db4 <RCM_ExecUserConv+0x48>)
 8001d70:	7823      	ldrb	r3, [r4, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d000      	beq.n	8001d78 <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 8001d76:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8001d78:	4d0f      	ldr	r5, [pc, #60]	; (8001db8 <RCM_ExecUserConv+0x4c>)
 8001d7a:	7828      	ldrb	r0, [r5, #0]
 8001d7c:	f7ff ff34 	bl	8001be8 <RCM_ExecRegularConv>
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <RCM_ExecUserConv+0x50>)
 8001d82:	0001      	movs	r1, r0
 8001d84:	8018      	strh	r0, [r3, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 8001d86:	7828      	ldrb	r0, [r5, #0]
 8001d88:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <RCM_ExecUserConv+0x54>)
 8001d8a:	0042      	lsls	r2, r0, #1
 8001d8c:	1812      	adds	r2, r2, r0
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	189b      	adds	r3, r3, r2
 8001d92:	785b      	ldrb	r3, [r3, #1]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <RCM_ExecUserConv+0x30>
      RCM_UserConvState = RCM_USERCONV_EOC;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	7023      	strb	r3, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <RCM_ExecUserConv+0x58>)
 8001d9e:	00c2      	lsls	r2, r0, #3
 8001da0:	58d5      	ldr	r5, [r2, r3]
 8001da2:	2d00      	cmp	r5, #0
 8001da4:	d0e7      	beq.n	8001d76 <RCM_ExecUserConv+0xa>
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001da6:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001da8:	189b      	adds	r3, r3, r2
 8001daa:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8001dac:	7026      	strb	r6, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8001dae:	47a8      	blx	r5
}
 8001db0:	e7e1      	b.n	8001d76 <RCM_ExecUserConv+0xa>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	200009d5 	.word	0x200009d5
 8001db8:	200009d4 	.word	0x200009d4
 8001dbc:	200009d6 	.word	0x200009d6
 8001dc0:	200009bc 	.word	0x200009bc
 8001dc4:	2000099c 	.word	0x2000099c

08001dc8 <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
 8001dc8:	b570      	push	{r4, r5, r6, lr}
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8001dca:	4819      	ldr	r0, [pc, #100]	; (8001e30 <RCM_ExecNextConv+0x68>)
 8001dcc:	4919      	ldr	r1, [pc, #100]	; (8001e34 <RCM_ExecNextConv+0x6c>)
 8001dce:	7802      	ldrb	r2, [r0, #0]
 8001dd0:	0053      	lsls	r3, r2, #1
 8001dd2:	189b      	adds	r3, r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	5c5b      	ldrb	r3, [r3, r1]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d028      	beq.n	8001e2e <RCM_ExecNextConv+0x66>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001ddc:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001dde:	2603      	movs	r6, #3
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <RCM_ExecNextConv+0x70>)
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	58d2      	ldr	r2, [r2, r3]
 8001de6:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8001de8:	6015      	str	r5, [r2, #0]
    /* Disabling ADC DMA request  */
    LL_ADC_REG_SetDMATransfer(RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_NONE);
 8001dea:	7804      	ldrb	r4, [r0, #0]
 8001dec:	00a2      	lsls	r2, r4, #2
 8001dee:	58d0      	ldr	r0, [r2, r3]
 8001df0:	6803      	ldr	r3, [r0, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	43b2      	bics	r2, r6
 8001df6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	4e10      	ldr	r6, [pc, #64]	; (8001e3c <RCM_ExecNextConv+0x74>)
 8001dfc:	4032      	ands	r2, r6
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001dfe:	2607      	movs	r6, #7
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8001e00:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8001e02:	695a      	ldr	r2, [r3, #20]
 8001e04:	43b2      	bics	r2, r6
 8001e06:	6886      	ldr	r6, [r0, #8]
 8001e08:	4332      	orrs	r2, r6
 8001e0a:	615a      	str	r2, [r3, #20]
    /* Disabling External Trigger of ADC */
    LL_ADC_REG_SetTriggerSource (RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_TRIG_SOFTWARE);

    /* Set Sampling time and channel of ADC for Regular Conversion */
    LL_ADC_SetSamplingTimeCommonChannels (RCM_handle_array[RCM_currentHandle]->regADC,  RCM_handle_array[RCM_currentHandle]->samplingTime );
    LL_ADC_REG_SetSequencerChannels (RCM_handle_array[RCM_currentHandle]->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel) );
 8001e0c:	7902      	ldrb	r2, [r0, #4]
 8001e0e:	2001      	movs	r0, #1
 8001e10:	0006      	movs	r6, r0
 8001e12:	4096      	lsls	r6, r2
  WRITE_REG(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e14:	0372      	lsls	r2, r6, #13
 8001e16:	0b52      	lsrs	r2, r2, #13
 8001e18:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(ADCx->CR,
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4e08      	ldr	r6, [pc, #32]	; (8001e40 <RCM_ExecNextConv+0x78>)
 8001e1e:	4032      	ands	r2, r6
 8001e20:	432a      	orrs	r2, r5
 8001e22:	609a      	str	r2, [r3, #8]
    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8001e24:	0063      	lsls	r3, r4, #1
 8001e26:	191b      	adds	r3, r3, r4
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	18c9      	adds	r1, r1, r3
 8001e2c:	7048      	strb	r0, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	200009d8 	.word	0x200009d8
 8001e34:	200009bc 	.word	0x200009bc
 8001e38:	200009dc 	.word	0x200009dc
 8001e3c:	fffff23f 	.word	0xfffff23f
 8001e40:	7fffffe8 	.word	0x7fffffe8

08001e44 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 8001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001e46:	4c10      	ldr	r4, [pc, #64]	; (8001e88 <RCM_ReadOngoingConv+0x44>)
 8001e48:	4910      	ldr	r1, [pc, #64]	; (8001e8c <RCM_ReadOngoingConv+0x48>)
 8001e4a:	7820      	ldrb	r0, [r4, #0]
 8001e4c:	0043      	lsls	r3, r0, #1
 8001e4e:	181a      	adds	r2, r3, r0
 8001e50:	0052      	lsls	r2, r2, #1
 8001e52:	188a      	adds	r2, r1, r2
 8001e54:	7855      	ldrb	r5, [r2, #1]
 8001e56:	2d01      	cmp	r5, #1
 8001e58:	d005      	beq.n	8001e66 <RCM_ReadOngoingConv+0x22>
    /* Restore back DMA configuration. */
    LL_ADC_REG_SetDMATransfer( RCM_handle_array[RCM_currentHandle]->regADC, LL_ADC_REG_DMA_TRANSFER_LIMITED );
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8001e5a:	181b      	adds	r3, r3, r0
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	18cb      	adds	r3, r1, r3
 8001e60:	795b      	ldrb	r3, [r3, #5]
 8001e62:	7023      	strb	r3, [r4, #0]
}
 8001e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8001e66:	4e0a      	ldr	r6, [pc, #40]	; (8001e90 <RCM_ReadOngoingConv+0x4c>)
 8001e68:	0087      	lsls	r7, r0, #2
 8001e6a:	59be      	ldr	r6, [r7, r6]
 8001e6c:	6836      	ldr	r6, [r6, #0]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 8001e6e:	6837      	ldr	r7, [r6, #0]
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 8001e70:	077f      	lsls	r7, r7, #29
 8001e72:	d5f2      	bpl.n	8001e5a <RCM_ReadOngoingConv+0x16>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8001e74:	6c37      	ldr	r7, [r6, #64]	; 0x40
    RCM_NoInj_array [RCM_currentHandle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );
 8001e76:	8057      	strh	r7, [r2, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8001e78:	2702      	movs	r7, #2
 8001e7a:	7057      	strb	r7, [r2, #1]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8001e7c:	68f2      	ldr	r2, [r6, #12]
 8001e7e:	3701      	adds	r7, #1
 8001e80:	43ba      	bics	r2, r7
 8001e82:	432a      	orrs	r2, r5
 8001e84:	60f2      	str	r2, [r6, #12]
}
 8001e86:	e7e8      	b.n	8001e5a <RCM_ReadOngoingConv+0x16>
 8001e88:	200009d8 	.word	0x200009d8
 8001e8c:	200009bc 	.word	0x200009bc
 8001e90:	200009dc 	.word	0x200009dc

08001e94 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	2201      	movs	r2, #1
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_MspInit+0x2c>)
{
 8001e98:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	6999      	ldr	r1, [r3, #24]
 8001e9c:	4311      	orrs	r1, r2
 8001e9e:	6199      	str	r1, [r3, #24]
 8001ea0:	6999      	ldr	r1, [r3, #24]
 8001ea2:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea6:	9200      	str	r2, [sp, #0]
 8001ea8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	0549      	lsls	r1, r1, #21
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	61da      	str	r2, [r3, #28]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	400b      	ands	r3, r1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eba:	b002      	add	sp, #8
 8001ebc:	4770      	bx	lr
 8001ebe:	46c0      	nop			; (mov r8, r8)
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ec4:	b570      	push	{r4, r5, r6, lr}
 8001ec6:	0004      	movs	r4, r0
 8001ec8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	2214      	movs	r2, #20
 8001ecc:	2100      	movs	r1, #0
 8001ece:	a804      	add	r0, sp, #16
 8001ed0:	f004 f974 	bl	80061bc <memset>
  if(hadc->Instance==ADC1)
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <HAL_ADC_MspInit+0xb4>)
 8001ed6:	6822      	ldr	r2, [r4, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001edc:	b00a      	add	sp, #40	; 0x28
 8001ede:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_ADC_MspInit+0xb8>)
 8001ee4:	0089      	lsls	r1, r1, #2
 8001ee6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee8:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
 8001eee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef2:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef4:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	0289      	lsls	r1, r1, #10
 8001efe:	430a      	orrs	r2, r1
 8001f00:	615a      	str	r2, [r3, #20]
 8001f02:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f06:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f0a:	9202      	str	r2, [sp, #8]
 8001f0c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	02c9      	lsls	r1, r1, #11
 8001f12:	430a      	orrs	r2, r1
 8001f14:	615a      	str	r2, [r3, #20]
 8001f16:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001f18:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f1a:	400b      	ands	r3, r1
 8001f1c:	9303      	str	r3, [sp, #12]
 8001f1e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001f20:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_U_Pin;
 8001f24:	9204      	str	r2, [sp, #16]
 8001f26:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f28:	f000 fff4 	bl	8002f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	2202      	movs	r2, #2
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001f30:	4813      	ldr	r0, [pc, #76]	; (8001f80 <HAL_ADC_MspInit+0xbc>)
 8001f32:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 8001f34:	9204      	str	r2, [sp, #16]
 8001f36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8001f3a:	f000 ffeb 	bl	8002f14 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8001f3e:	4d11      	ldr	r5, [pc, #68]	; (8001f84 <HAL_ADC_MspInit+0xc0>)
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_ADC_MspInit+0xc4>)
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001f42:	0028      	movs	r0, r5
    hdma_adc.Instance = DMA1_Channel1;
 8001f44:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	60eb      	str	r3, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f4a:	3380      	adds	r3, #128	; 0x80
 8001f4c:	612b      	str	r3, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	616b      	str	r3, [r5, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001f54:	2320      	movs	r3, #32
 8001f56:	61ab      	str	r3, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	019b      	lsls	r3, r3, #6
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f5c:	606e      	str	r6, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f5e:	60ae      	str	r6, [r5, #8]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8001f60:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001f62:	f000 ffa3 	bl	8002eac <HAL_DMA_Init>
 8001f66:	2800      	cmp	r0, #0
 8001f68:	d102      	bne.n	8001f70 <HAL_ADC_MspInit+0xac>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001f6a:	6325      	str	r5, [r4, #48]	; 0x30
 8001f6c:	626c      	str	r4, [r5, #36]	; 0x24
}
 8001f6e:	e7b5      	b.n	8001edc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001f70:	f7fe fc28 	bl	80007c4 <Error_Handler>
 8001f74:	e7f9      	b.n	8001f6a <HAL_ADC_MspInit+0xa6>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	40012400 	.word	0x40012400
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	48000400 	.word	0x48000400
 8001f84:	2000077c 	.word	0x2000077c
 8001f88:	40020008 	.word	0x40020008

08001f8c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f8c:	b510      	push	{r4, lr}
 8001f8e:	0004      	movs	r4, r0
 8001f90:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f92:	2214      	movs	r2, #20
 8001f94:	2100      	movs	r1, #0
 8001f96:	a802      	add	r0, sp, #8
 8001f98:	f004 f910 	bl	80061bc <memset>
  if(htim_pwm->Instance==TIM1)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001f9e:	6822      	ldr	r2, [r4, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_TIM_PWM_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fa4:	b008      	add	sp, #32
 8001fa6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_TIM_PWM_MspInit+0x60>)
 8001fac:	0109      	lsls	r1, r1, #4
 8001fae:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001fb0:	480f      	ldr	r0, [pc, #60]	; (8001ff0 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	619a      	str	r2, [r3, #24]
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc0:	695a      	ldr	r2, [r3, #20]
 8001fc2:	02c9      	lsls	r1, r1, #11
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001fca:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	400b      	ands	r3, r1
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	0152      	lsls	r2, r2, #5
 8001fd6:	9202      	str	r2, [sp, #8]
 8001fd8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fda:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001fdc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fde:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fe0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f000 ff97 	bl	8002f14 <HAL_GPIO_Init>
}
 8001fe6:	e7dd      	b.n	8001fa4 <HAL_TIM_PWM_MspInit+0x18>
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	48000400 	.word	0x48000400

08001ff4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff4:	b5d0      	push	{r4, r6, r7, lr}
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	2214      	movs	r2, #20
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	a802      	add	r0, sp, #8
 8002000:	f004 f8dc 	bl	80061bc <memset>
  if(htim->Instance==TIM1)
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_TIM_MspPostInit+0x7c>)
 8002006:	6822      	ldr	r2, [r4, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800200c:	b008      	add	sp, #32
 800200e:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_TIM_MspPostInit+0x80>)
 8002014:	02c9      	lsls	r1, r1, #11
 8002016:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002018:	2602      	movs	r6, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	430a      	orrs	r2, r1
 800201c:	615a      	str	r2, [r3, #20]
 800201e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002020:	2703      	movs	r7, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002022:	400a      	ands	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002024:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	0289      	lsls	r1, r1, #10
 800202e:	430a      	orrs	r2, r1
 8002030:	615a      	str	r2, [r3, #20]
 8002032:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002034:	22e0      	movs	r2, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	400b      	ands	r3, r1
 8002038:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800203a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800203e:	2302      	movs	r3, #2
 8002040:	0212      	lsls	r2, r2, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	a902      	add	r1, sp, #8
 8002044:	480c      	ldr	r0, [pc, #48]	; (8002078 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8002046:	9202      	str	r2, [sp, #8]
 8002048:	9303      	str	r3, [sp, #12]
 800204a:	9604      	str	r6, [sp, #16]
 800204c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800204e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f000 ff60 	bl	8002f14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002054:	22e0      	movs	r2, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002056:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002058:	2302      	movs	r3, #2
 800205a:	00d2      	lsls	r2, r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	a902      	add	r1, sp, #8
 800205e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002060:	9202      	str	r2, [sp, #8]
 8002062:	9303      	str	r3, [sp, #12]
 8002064:	9604      	str	r6, [sp, #16]
 8002066:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002068:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206a:	f000 ff53 	bl	8002f14 <HAL_GPIO_Init>
}
 800206e:	e7cd      	b.n	800200c <HAL_TIM_MspPostInit+0x18>
 8002070:	40012c00 	.word	0x40012c00
 8002074:	40021000 	.word	0x40021000
 8002078:	48000400 	.word	0x48000400

0800207c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b510      	push	{r4, lr}
 800207e:	0004      	movs	r4, r0
 8002080:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	2214      	movs	r2, #20
 8002084:	2100      	movs	r1, #0
 8002086:	a802      	add	r0, sp, #8
 8002088:	f004 f898 	bl	80061bc <memset>
  if(huart->Instance==USART1)
 800208c:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_UART_MspInit+0x54>)
 800208e:	6822      	ldr	r2, [r4, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002094:	b008      	add	sp, #32
 8002096:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_UART_MspInit+0x58>)
 800209c:	01c9      	lsls	r1, r1, #7
 800209e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	480d      	ldr	r0, [pc, #52]	; (80020d8 <HAL_UART_MspInit+0x5c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a2:	430a      	orrs	r2, r1
 80020a4:	619a      	str	r2, [r3, #24]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	400a      	ands	r2, r1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	02c9      	lsls	r1, r1, #11
 80020b4:	430a      	orrs	r2, r1
 80020b6:	615a      	str	r2, [r3, #20]
 80020b8:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80020ba:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020bc:	400b      	ands	r3, r1
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80020c2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80020c6:	9202      	str	r2, [sp, #8]
 80020c8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ca:	f000 ff23 	bl	8002f14 <HAL_GPIO_Init>
}
 80020ce:	e7e1      	b.n	8002094 <HAL_UART_MspInit+0x18>
 80020d0:	40013800 	.word	0x40013800
 80020d4:	40021000 	.word	0x40021000
 80020d8:	48000400 	.word	0x48000400

080020dc <DMA1_Channel1_IRQHandler>:
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 0 */

  /* USER CODE END CURRENT_REGULATION_IRQn 0 */

  /* Clear Flags */
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 80020dc:	2207      	movs	r2, #7
{
 80020de:	b510      	push	{r4, lr}
  DMA1->IFCR = (LL_DMA_ISR_GIF1|LL_DMA_ISR_TCIF1|LL_DMA_ISR_HTIF1);
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <DMA1_Channel1_IRQHandler+0x10>)
 80020e2:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 1 */

  /* USER CODE END CURRENT_REGULATION_IRQn 1 */

    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 80020e4:	f7ff f88c 	bl	8001200 <TSK_HighFrequencyTask>
  /* USER CODE BEGIN CURRENT_REGULATION_IRQn 2 */

  /* USER CODE END CURRENT_REGULATION_IRQn 2 */
}
 80020e8:	bd10      	pop	{r4, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40020000 	.word	0x40020000

080020f0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80020f0:	2201      	movs	r2, #1
  * @brief  This function handles first motor TIMx Update, Break-in interrupt request.
  * @param  None
  * @retval None
  */
void TIMx_UP_BRK_M1_IRQHandler(void)
{
 80020f2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 0 */

  if(LL_TIM_IsActiveFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_UPDATE(PWM_Handle_M1.pParams_str->TIMx))
 80020f4:	4c0f      	ldr	r4, [pc, #60]	; (8002134 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x44>)
 80020f6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	420a      	tst	r2, r1
 80020fe:	d002      	beq.n	8002106 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x16>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002100:	68d9      	ldr	r1, [r3, #12]
 8002102:	420a      	tst	r2, r1
 8002104:	d10d      	bne.n	8002122 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x32>
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	420a      	tst	r2, r1
 800210c:	d008      	beq.n	8002120 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_BIE) == (TIM_DIER_BIE)) ? 1UL : 0UL);
 800210e:	68d9      	ldr	r1, [r3, #12]
 8002110:	420a      	tst	r2, r1
 8002112:	d005      	beq.n	8002120 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002114:	3a02      	subs	r2, #2
 8002116:	3aff      	subs	r2, #255	; 0xff
    /* USER CODE END PWM_Update */
  }
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    F0XX_BRK_IRQHandler(&PWM_Handle_M1);
 8002118:	0020      	movs	r0, r4
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	f002 ff1e 	bl	8004f5c <F0XX_BRK_IRQHandler>
   /* No other interrupts are routed to this handler */
  }
  /* USER CODE BEGIN TIMx_UP_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_UP_BRK_M1_IRQn 1 */
}
 8002120:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002122:	3a03      	subs	r2, #3
 8002124:	611a      	str	r2, [r3, #16]
    R3_1_TIMx_UP_IRQHandler( &PWM_Handle_M1 );
 8002126:	0020      	movs	r0, r4
 8002128:	f002 feda 	bl	8004ee0 <R3_1_TIMx_UP_IRQHandler>
  if(LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx) && LL_TIM_IsEnabledIT_BRK(PWM_Handle_M1.pParams_str->TIMx))
 800212c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e7e9      	b.n	8002106 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x16>
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	2000024c 	.word	0x2000024c

08002138 <DMA1_Channel4_5_IRQHandler>:
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 8002138:	2280      	movs	r2, #128	; 0x80
 800213a:	4b03      	ldr	r3, [pc, #12]	; (8002148 <DMA1_Channel4_5_IRQHandler+0x10>)
 800213c:	0192      	lsls	r2, r2, #6
 800213e:	6819      	ldr	r1, [r3, #0]
{
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 0 */

  /* USER CODE END DMAx_R1_M1_IRQn 0 */

  if (LL_DMA_IsActiveFlag_TC4(DMA1))
 8002140:	4211      	tst	r1, r2
 8002142:	d000      	beq.n	8002146 <DMA1_Channel4_5_IRQHandler+0xe>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8002144:	605a      	str	r2, [r3, #4]
    /* USER CODE END DMAx_R1_M1_TC4 */
  }
  /* USER CODE BEGIN DMAx_R1_M1_IRQn 1 */

  /* USER CODE END DMAx_R1_M1_IRQn 1 */
}
 8002146:	4770      	bx	lr
 8002148:	40020000 	.word	0x40020000

0800214c <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 800214c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800214e:	2590      	movs	r5, #144	; 0x90
 8002150:	4c18      	ldr	r4, [pc, #96]	; (80021b4 <USART1_IRQHandler+0x68>)
 8002152:	006d      	lsls	r5, r5, #1
 8002154:	5963      	ldr	r3, [r4, r5]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	0692      	lsls	r2, r2, #26
 800215a:	d50b      	bpl.n	8002174 <USART1_IRQHandler+0x28>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 800215c:	21ff      	movs	r1, #255	; 0xff
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800215e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002160:	0020      	movs	r0, r4
 8002162:	4019      	ands	r1, r3
 8002164:	f003 fe7c 	bl	8005e60 <UFCP_RX_IRQ_Handler>
 8002168:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 800216a:	2b01      	cmp	r3, #1
 800216c:	d01d      	beq.n	80021aa <USART1_IRQHandler+0x5e>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 800216e:	2b02      	cmp	r3, #2
 8002170:	d017      	beq.n	80021a2 <USART1_IRQHandler+0x56>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002172:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	0612      	lsls	r2, r2, #24
 8002178:	d505      	bpl.n	8002186 <USART1_IRQHandler+0x3a>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 800217a:	0020      	movs	r0, r4
 800217c:	f003 fdc2 	bl	8005d04 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002180:	2390      	movs	r3, #144	; 0x90
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	58e3      	ldr	r3, [r4, r3]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002186:	2508      	movs	r5, #8
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	421d      	tst	r5, r3
 800218c:	d008      	beq.n	80021a0 <USART1_IRQHandler+0x54>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 800218e:	0020      	movs	r0, r4
 8002190:	f003 fece 	bl	8005f30 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002194:	2390      	movs	r3, #144	; 0x90
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	58e3      	ldr	r3, [r4, r3]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800219a:	621d      	str	r5, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 800219c:	f000 f8c4 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
      UI_SerialCommunicationTimeOutStop();
 80021a2:	f000 f8c1 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021a6:	5963      	ldr	r3, [r4, r5]
 80021a8:	e7e4      	b.n	8002174 <USART1_IRQHandler+0x28>
      UI_SerialCommunicationTimeOutStart();
 80021aa:	f000 f8c3 	bl	8002334 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021ae:	5963      	ldr	r3, [r4, r5]
 80021b0:	e7e0      	b.n	8002174 <USART1_IRQHandler+0x28>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	200005d0 	.word	0x200005d0

080021b8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80021ba:	2590      	movs	r5, #144	; 0x90
  TSK_HardwareFaultTask();
 80021bc:	f7ff f964 	bl	8001488 <TSK_HardwareFaultTask>
 80021c0:	4c17      	ldr	r4, [pc, #92]	; (8002220 <HardFault_Handler+0x68>)
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80021c2:	006d      	lsls	r5, r5, #1
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80021c4:	2608      	movs	r6, #8
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80021c6:	2780      	movs	r7, #128	; 0x80
 80021c8:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	4216      	tst	r6, r2
 80021ce:	d007      	beq.n	80021e0 <HardFault_Handler+0x28>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80021d0:	0020      	movs	r0, r4
 80021d2:	f003 fead 	bl	8005f30 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80021d6:	5963      	ldr	r3, [r4, r5]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 80021d8:	621e      	str	r6, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 80021da:	f000 f8a5 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80021de:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	4217      	tst	r7, r2
 80021e4:	d014      	beq.n	8002210 <HardFault_Handler+0x58>
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 80021e6:	0020      	movs	r0, r4
 80021e8:	f003 fd8c 	bl	8005d04 <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 80021ec:	5963      	ldr	r3, [r4, r5]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	0692      	lsls	r2, r2, #26
 80021f2:	d5ea      	bpl.n	80021ca <HardFault_Handler+0x12>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 80021f4:	21ff      	movs	r1, #255	; 0xff
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80021f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80021f8:	0020      	movs	r0, r4
 80021fa:	4019      	ands	r1, r3
 80021fc:	f003 fe30 	bl	8005e60 <UFCP_RX_IRQ_Handler>
 8002200:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002202:	2b01      	cmp	r3, #1
 8002204:	d008      	beq.n	8002218 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002206:	2b02      	cmp	r3, #2
 8002208:	d1dd      	bne.n	80021c6 <HardFault_Handler+0xe>
        {
          UI_SerialCommunicationTimeOutStop();
 800220a:	f000 f88d 	bl	8002328 <UI_SerialCommunicationTimeOutStop>
 800220e:	e7d9      	b.n	80021c4 <HardFault_Handler+0xc>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	0692      	lsls	r2, r2, #26
 8002214:	d5d9      	bpl.n	80021ca <HardFault_Handler+0x12>
 8002216:	e7ed      	b.n	80021f4 <HardFault_Handler+0x3c>
          UI_SerialCommunicationTimeOutStart();
 8002218:	f000 f88c 	bl	8002334 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 800221c:	e7d3      	b.n	80021c6 <HardFault_Handler+0xe>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	200005d0 	.word	0x200005d0

08002224 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002224:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002226:	4c08      	ldr	r4, [pc, #32]	; (8002248 <SysTick_Handler+0x24>)
 8002228:	7823      	ldrb	r3, [r4, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d005      	beq.n	800223a <SysTick_Handler+0x16>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800222e:	3301      	adds	r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8002234:	f7ff f918 	bl	8001468 <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002238:	bd10      	pop	{r4, pc}
    HAL_IncTick();
 800223a:	f000 fc8b 	bl	8002b54 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800223e:	f000 fe31 	bl	8002ea4 <HAL_SYSTICK_IRQHandler>
 8002242:	2301      	movs	r3, #1
 8002244:	e7f5      	b.n	8002232 <SysTick_Handler+0xe>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	20000710 	.word	0x20000710

0800224c <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 800224c:	2201      	movs	r2, #1
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <EXTI0_1_IRQHandler+0x18>)

/**
  * @brief  This function handles Button IRQ on PIN PF0.
  */
void EXTI0_1_IRQHandler (void)
{
 8002250:	b510      	push	{r4, lr}
 8002252:	6959      	ldr	r1, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_0) )
 8002254:	420a      	tst	r2, r1
 8002256:	d100      	bne.n	800225a <EXTI0_1_IRQHandler+0xe>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_0);
    UI_HandleStartStopButton_cb ();
  }

}
 8002258:	bd10      	pop	{r4, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800225a:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 800225c:	f000 f870 	bl	8002340 <UI_HandleStartStopButton_cb>
}
 8002260:	e7fa      	b.n	8002258 <EXTI0_1_IRQHandler+0xc>
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	40010400 	.word	0x40010400

08002268 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800226a:	46de      	mov	lr, fp
 800226c:	4657      	mov	r7, sl
 800226e:	464e      	mov	r6, r9
 8002270:	4645      	mov	r5, r8
 8002272:	b5e0      	push	{r5, r6, r7, lr}

    pMCP = &MCP_UI_Params;
 8002274:	4f15      	ldr	r7, [pc, #84]	; (80022cc <UI_TaskInit+0x64>)
{
 8002276:	4683      	mov	fp, r0
    pMCP->_Super = UI_Params;
 8002278:	003e      	movs	r6, r7
    pMCP = &MCP_UI_Params;
 800227a:	4d15      	ldr	r5, [pc, #84]	; (80022d0 <UI_TaskInit+0x68>)
    pMCP->_Super = UI_Params;
 800227c:	4c15      	ldr	r4, [pc, #84]	; (80022d4 <UI_TaskInit+0x6c>)
    pMCP = &MCP_UI_Params;
 800227e:	602f      	str	r7, [r5, #0]
{
 8002280:	4688      	mov	r8, r1
 8002282:	4691      	mov	r9, r2
 8002284:	469a      	mov	sl, r3
    pMCP->_Super = UI_Params;
 8002286:	cc0e      	ldmia	r4!, {r1, r2, r3}
 8002288:	c60e      	stmia	r6!, {r1, r2, r3}
 800228a:	cc0e      	ldmia	r4!, {r1, r2, r3}
 800228c:	c60e      	stmia	r6!, {r1, r2, r3}

    UFCP_Init( & pUSART );
 800228e:	4c12      	ldr	r4, [pc, #72]	; (80022d8 <UI_TaskInit+0x70>)
{
 8002290:	b083      	sub	sp, #12
    UFCP_Init( & pUSART );
 8002292:	0020      	movs	r0, r4
 8002294:	f003 fd32 	bl	8005cfc <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, s_fwVer);
 8002298:	990c      	ldr	r1, [sp, #48]	; 0x30
 800229a:	6828      	ldr	r0, [r5, #0]
 800229c:	9101      	str	r1, [sp, #4]
 800229e:	490f      	ldr	r1, [pc, #60]	; (80022dc <UI_TaskInit+0x74>)
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <UI_TaskInit+0x78>)
 80022a2:	9100      	str	r1, [sp, #0]
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <UI_TaskInit+0x7c>)
 80022a6:	0021      	movs	r1, r4
 80022a8:	f7ff fb98 	bl	80019dc <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 80022ac:	465b      	mov	r3, fp
 80022ae:	6828      	ldr	r0, [r5, #0]
 80022b0:	464a      	mov	r2, r9
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	4641      	mov	r1, r8
 80022b6:	4653      	mov	r3, sl
 80022b8:	f000 f84e 	bl	8002358 <UI_Init>

}
 80022bc:	b003      	add	sp, #12
 80022be:	bcf0      	pop	{r4, r5, r6, r7}
 80022c0:	46bb      	mov	fp, r7
 80022c2:	46b2      	mov	sl, r6
 80022c4:	46a9      	mov	r9, r5
 80022c6:	46a0      	mov	r8, r4
 80022c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	200009ec 	.word	0x200009ec
 80022d0:	20000aa0 	.word	0x20000aa0
 80022d4:	200008a0 	.word	0x200008a0
 80022d8:	200005d0 	.word	0x200005d0
 80022dc:	08005f49 	.word	0x08005f49
 80022e0:	08005d75 	.word	0x08005d75
 80022e4:	08005da1 	.word	0x08005da1

080022e8 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <UI_Scheduler+0x34>)
 80022ea:	881a      	ldrh	r2, [r3, #0]
 80022ec:	2a00      	cmp	r2, #0
 80022ee:	d003      	beq.n	80022f8 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 80022f0:	881a      	ldrh	r2, [r3, #0]
 80022f2:	3a01      	subs	r2, #1
 80022f4:	b292      	uxth	r2, r2
 80022f6:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 80022f8:	4a09      	ldr	r2, [pc, #36]	; (8002320 <UI_Scheduler+0x38>)
 80022fa:	8813      	ldrh	r3, [r2, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d903      	bls.n	8002308 <UI_Scheduler+0x20>
  {
    bCOMTimeoutCounter--;
 8002300:	8813      	ldrh	r3, [r2, #0]
 8002302:	3b01      	subs	r3, #1
 8002304:	b29b      	uxth	r3, r3
 8002306:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002308:	4a06      	ldr	r2, [pc, #24]	; (8002324 <UI_Scheduler+0x3c>)
 800230a:	8813      	ldrh	r3, [r2, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d903      	bls.n	8002318 <UI_Scheduler+0x30>
  {
    bCOMATRTimeCounter--;
 8002310:	8813      	ldrh	r3, [r2, #0]
 8002312:	3b01      	subs	r3, #1
 8002314:	b29b      	uxth	r3, r3
 8002316:	8013      	strh	r3, [r2, #0]
  }
}
 8002318:	4770      	bx	lr
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20000a9e 	.word	0x20000a9e
 8002320:	20000a9c 	.word	0x20000a9c
 8002324:	20000712 	.word	0x20000712

08002328 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002328:	2200      	movs	r2, #0
 800232a:	4b01      	ldr	r3, [pc, #4]	; (8002330 <UI_SerialCommunicationTimeOutStop+0x8>)
 800232c:	801a      	strh	r2, [r3, #0]
}
 800232e:	4770      	bx	lr
 8002330:	20000a9c 	.word	0x20000a9c

08002334 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002334:	224f      	movs	r2, #79	; 0x4f
 8002336:	4b01      	ldr	r3, [pc, #4]	; (800233c <UI_SerialCommunicationTimeOutStart+0x8>)
 8002338:	801a      	strh	r2, [r3, #0]
}
 800233a:	4770      	bx	lr
 800233c:	20000a9c 	.word	0x20000a9c

08002340 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002340:	b510      	push	{r4, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002342:	f7fe fa51 	bl	80007e8 <MC_GetSTMStateMotor1>
 8002346:	2800      	cmp	r0, #0
 8002348:	d102      	bne.n	8002350 <UI_HandleStartStopButton_cb+0x10>
  {
    /* Ramp parameters should be tuned for the actual motor */
    MC_StartMotor1();
 800234a:	f7fe fa3d 	bl	80007c8 <MC_StartMotor1>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 800234e:	bd10      	pop	{r4, pc}
    MC_StopMotor1();
 8002350:	f7fe fa42 	bl	80007d8 <MC_StopMotor1>
}
 8002354:	e7fb      	b.n	800234e <UI_HandleStartStopButton_cb+0xe>
 8002356:	46c0      	nop			; (mov r8, r8)

08002358 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002358:	60c3      	str	r3, [r0, #12]
  pHandle->bSelectedDrive = 0u;
 800235a:	2300      	movs	r3, #0
 800235c:	7503      	strb	r3, [r0, #20]
  pHandle->pUICfg = pUICfg;
 800235e:	9b00      	ldr	r3, [sp, #0]
  pHandle->bDriveNum = bMCNum;
 8002360:	7101      	strb	r1, [r0, #4]
  pHandle->pMCI = pMCI;
 8002362:	6082      	str	r2, [r0, #8]
  pHandle->pUICfg = pUICfg;
 8002364:	6103      	str	r3, [r0, #16]
}
 8002366:	4770      	bx	lr

08002368 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002368:	7902      	ldrb	r2, [r0, #4]
{
 800236a:	0003      	movs	r3, r0
  {
    retVal = false;
 800236c:	2000      	movs	r0, #0
  if (bSelectMC  >= pHandle->bDriveNum)
 800236e:	428a      	cmp	r2, r1
 8002370:	d901      	bls.n	8002376 <UI_SelectMC+0xe>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002372:	7519      	strb	r1, [r3, #20]
  bool retVal = true;
 8002374:	3001      	adds	r0, #1
  }
  return retVal;
}
 8002376:	4770      	bx	lr

08002378 <UI_GetSelectedMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
 8002378:	7d00      	ldrb	r0, [r0, #20]
}
 800237a:	4770      	bx	lr

0800237c <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 800237c:	b570      	push	{r4, r5, r6, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800237e:	7d03      	ldrb	r3, [r0, #20]
 8002380:	6884      	ldr	r4, [r0, #8]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	58e6      	ldr	r6, [r4, r3]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002386:	68c4      	ldr	r4, [r0, #12]
{
 8002388:	0015      	movs	r5, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 800238a:	58e4      	ldr	r4, [r4, r3]
{
 800238c:	b082      	sub	sp, #8

  bool retVal = true;
  switch (bRegID)
 800238e:	295b      	cmp	r1, #91	; 0x5b
 8002390:	d803      	bhi.n	800239a <UI_SetReg+0x1e>
 8002392:	4a85      	ldr	r2, [pc, #532]	; (80025a8 <UI_SetReg+0x22c>)
 8002394:	0089      	lsls	r1, r1, #2
 8002396:	5852      	ldr	r2, [r2, r1]
 8002398:	4697      	mov	pc, r2
 800239a:	2400      	movs	r4, #0
    retVal = false;
    break;
  }

  return retVal;
}
 800239c:	0020      	movs	r0, r4
 800239e:	b002      	add	sp, #8
 80023a0:	bd70      	pop	{r4, r5, r6, pc}
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 80023a2:	2106      	movs	r1, #6
 80023a4:	0028      	movs	r0, r5
 80023a6:	f7fd ff39 	bl	800021c <__divsi3>
 80023aa:	2200      	movs	r2, #0
 80023ac:	b201      	sxth	r1, r0
 80023ae:	0030      	movs	r0, r6
 80023b0:	f7fe fa2c 	bl	800080c <MCI_ExecSpeedRamp>
  bool retVal = true;
 80023b4:	2401      	movs	r4, #1
    break;
 80023b6:	e7f1      	b.n	800239c <UI_SetReg+0x20>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80023b8:	0030      	movs	r0, r6
 80023ba:	b229      	sxth	r1, r5
 80023bc:	f7fe fb3e 	bl	8000a3c <MCI_SetIdref>
  bool retVal = true;
 80023c0:	2401      	movs	r4, #1
    break;
 80023c2:	e7eb      	b.n	800239c <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80023c4:	6902      	ldr	r2, [r0, #16]
 80023c6:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023c8:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023ce:	2a09      	cmp	r2, #9
 80023d0:	d100      	bne.n	80023d4 <UI_SetReg+0x58>
 80023d2:	e0cb      	b.n	800256c <UI_SetReg+0x1f0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80023d4:	2b09      	cmp	r3, #9
 80023d6:	d1f3      	bne.n	80023c0 <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 80023d8:	69e4      	ldr	r4, [r4, #28]
      if (pSPD != MC_NULL)
 80023da:	2c00      	cmp	r4, #0
 80023dc:	d0f0      	beq.n	80023c0 <UI_SetReg+0x44>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 80023de:	466b      	mov	r3, sp
 80023e0:	ae01      	add	r6, sp, #4
 80023e2:	1c99      	adds	r1, r3, #2
 80023e4:	0020      	movs	r0, r4
 80023e6:	0032      	movs	r2, r6
 80023e8:	f003 fc44 	bl	8005c74 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hIgain);
 80023ec:	0020      	movs	r0, r4
 80023ee:	2300      	movs	r3, #0
 80023f0:	5ef2      	ldrsh	r2, [r6, r3]
 80023f2:	b229      	sxth	r1, r5
 80023f4:	f003 fc4c 	bl	8005c90 <STO_SetPLLGains>
  bool retVal = true;
 80023f8:	2401      	movs	r4, #1
 80023fa:	e7cf      	b.n	800239c <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80023fc:	6902      	ldr	r2, [r0, #16]
 80023fe:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002400:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002406:	2a09      	cmp	r2, #9
 8002408:	d100      	bne.n	800240c <UI_SetReg+0x90>
 800240a:	e0bd      	b.n	8002588 <UI_SetReg+0x20c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800240c:	2b09      	cmp	r3, #9
 800240e:	d1d7      	bne.n	80023c0 <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 8002410:	69e4      	ldr	r4, [r4, #28]
      if (pSPD != MC_NULL)
 8002412:	2c00      	cmp	r4, #0
 8002414:	d0d4      	beq.n	80023c0 <UI_SetReg+0x44>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002416:	466b      	mov	r3, sp
 8002418:	1c9e      	adds	r6, r3, #2
 800241a:	0020      	movs	r0, r4
 800241c:	0031      	movs	r1, r6
 800241e:	aa01      	add	r2, sp, #4
 8002420:	f003 fc28 	bl	8005c74 <STO_GetPLLGains>
        STO_SetPLLGains((STO_PLL_Handle_t*)pSPD,hPgain,(int16_t)wValue);
 8002424:	0020      	movs	r0, r4
 8002426:	2300      	movs	r3, #0
 8002428:	5ef1      	ldrsh	r1, [r6, r3]
 800242a:	b22a      	sxth	r2, r5
 800242c:	f003 fc30 	bl	8005c90 <STO_SetPLLGains>
  bool retVal = true;
 8002430:	2401      	movs	r4, #1
 8002432:	e7b3      	b.n	800239c <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002434:	6902      	ldr	r2, [r0, #16]
 8002436:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002438:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800243e:	2a09      	cmp	r2, #9
 8002440:	d100      	bne.n	8002444 <UI_SetReg+0xc8>
 8002442:	e09c      	b.n	800257e <UI_SetReg+0x202>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002444:	2b09      	cmp	r3, #9
 8002446:	d1bb      	bne.n	80023c0 <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 8002448:	69e4      	ldr	r4, [r4, #28]
      if (pSPD != MC_NULL)
 800244a:	2c00      	cmp	r4, #0
 800244c:	d0b8      	beq.n	80023c0 <UI_SetReg+0x44>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800244e:	466b      	mov	r3, sp
 8002450:	1c9e      	adds	r6, r3, #2
 8002452:	0020      	movs	r0, r4
 8002454:	0031      	movs	r1, r6
 8002456:	aa01      	add	r2, sp, #4
 8002458:	f003 fc00 	bl	8005c5c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,hC1,(int16_t)wValue);
 800245c:	0020      	movs	r0, r4
 800245e:	2300      	movs	r3, #0
 8002460:	5ef1      	ldrsh	r1, [r6, r3]
 8002462:	b22a      	sxth	r2, r5
 8002464:	f003 fc02 	bl	8005c6c <STO_PLL_SetObserverGains>
  bool retVal = true;
 8002468:	2401      	movs	r4, #1
 800246a:	e797      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 800246c:	6860      	ldr	r0, [r4, #4]
 800246e:	b229      	sxth	r1, r5
 8002470:	f002 f800 	bl	8004474 <PID_SetKI>
  bool retVal = true;
 8002474:	2401      	movs	r4, #1
    break;
 8002476:	e791      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002478:	6860      	ldr	r0, [r4, #4]
 800247a:	b229      	sxth	r1, r5
 800247c:	f001 fff8 	bl	8004470 <PID_SetKP>
  bool retVal = true;
 8002480:	2401      	movs	r4, #1
    break;
 8002482:	e78b      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002484:	68a0      	ldr	r0, [r4, #8]
 8002486:	b229      	sxth	r1, r5
 8002488:	f001 fff4 	bl	8004474 <PID_SetKI>
  bool retVal = true;
 800248c:	2401      	movs	r4, #1
    break;
 800248e:	e785      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002490:	68a0      	ldr	r0, [r4, #8]
 8002492:	b229      	sxth	r1, r5
 8002494:	f001 ffec 	bl	8004470 <PID_SetKP>
  bool retVal = true;
 8002498:	2401      	movs	r4, #1
    break;
 800249a:	e77f      	b.n	800239c <UI_SetReg+0x20>
      currComp = MCI_GetIqdref(pMCI);
 800249c:	0030      	movs	r0, r6
 800249e:	f7fe fa99 	bl	80009d4 <MCI_GetIqdref>
      currComp.d = (int16_t)wValue;
 80024a2:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 80024a4:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 80024a6:	805d      	strh	r5, [r3, #2]
      MCI_SetCurrentReferences(pMCI,currComp);
 80024a8:	0030      	movs	r0, r6
 80024aa:	9901      	ldr	r1, [sp, #4]
 80024ac:	f7fe f9be 	bl	800082c <MCI_SetCurrentReferences>
  bool retVal = true;
 80024b0:	2401      	movs	r4, #1
    break;
 80024b2:	e773      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 80024b4:	6860      	ldr	r0, [r4, #4]
 80024b6:	b229      	sxth	r1, r5
 80024b8:	f001 ffec 	bl	8004494 <PID_SetKD>
  bool retVal = true;
 80024bc:	2401      	movs	r4, #1
    break;
 80024be:	e76d      	b.n	800239c <UI_SetReg+0x20>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80024c0:	6902      	ldr	r2, [r0, #16]
 80024c2:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024c4:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024ca:	2a09      	cmp	r2, #9
 80024cc:	d053      	beq.n	8002576 <UI_SetReg+0x1fa>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d000      	beq.n	80024d4 <UI_SetReg+0x158>
 80024d2:	e775      	b.n	80023c0 <UI_SetReg+0x44>
        pSPD = pMCT->pSpeedSensorAux;
 80024d4:	69e4      	ldr	r4, [r4, #28]
      if (pSPD != MC_NULL)
 80024d6:	2c00      	cmp	r4, #0
 80024d8:	d100      	bne.n	80024dc <UI_SetReg+0x160>
 80024da:	e771      	b.n	80023c0 <UI_SetReg+0x44>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80024dc:	466b      	mov	r3, sp
 80024de:	ae01      	add	r6, sp, #4
 80024e0:	1c99      	adds	r1, r3, #2
 80024e2:	0020      	movs	r0, r4
 80024e4:	0032      	movs	r2, r6
 80024e6:	f003 fbb9 	bl	8005c5c <STO_PLL_GetObserverGains>
        STO_PLL_SetObserverGains((STO_PLL_Handle_t*)pSPD,(int16_t)wValue,hC2);
 80024ea:	0020      	movs	r0, r4
 80024ec:	2300      	movs	r3, #0
 80024ee:	5ef2      	ldrsh	r2, [r6, r3]
 80024f0:	b229      	sxth	r1, r5
 80024f2:	f003 fbbb 	bl	8005c6c <STO_PLL_SetObserverGains>
  bool retVal = true;
 80024f6:	2401      	movs	r4, #1
 80024f8:	e750      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80024fa:	68a0      	ldr	r0, [r4, #8]
 80024fc:	b229      	sxth	r1, r5
 80024fe:	f001 ffc9 	bl	8004494 <PID_SetKD>
  bool retVal = true;
 8002502:	2401      	movs	r4, #1
    break;
 8002504:	e74a      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002506:	6820      	ldr	r0, [r4, #0]
 8002508:	b229      	sxth	r1, r5
 800250a:	f001 ffb3 	bl	8004474 <PID_SetKI>
  bool retVal = true;
 800250e:	2401      	movs	r4, #1
    break;
 8002510:	e744      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	b229      	sxth	r1, r5
 8002516:	f001 ffab 	bl	8004470 <PID_SetKP>
  bool retVal = true;
 800251a:	2401      	movs	r4, #1
    break;
 800251c:	e73e      	b.n	800239c <UI_SetReg+0x20>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 800251e:	b2ed      	uxtb	r5, r5
 8002520:	2d00      	cmp	r5, #0
 8002522:	d036      	beq.n	8002592 <UI_SetReg+0x216>
  bool retVal = true;
 8002524:	2401      	movs	r4, #1
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002526:	2d01      	cmp	r5, #1
 8002528:	d000      	beq.n	800252c <UI_SetReg+0x1b0>
 800252a:	e737      	b.n	800239c <UI_SetReg+0x20>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800252c:	0030      	movs	r0, r6
 800252e:	f7fe fa1b 	bl	8000968 <MCI_GetMecSpeedRefUnit>
 8002532:	2200      	movs	r2, #0
 8002534:	0001      	movs	r1, r0
 8002536:	0030      	movs	r0, r6
 8002538:	f7fe f968 	bl	800080c <MCI_ExecSpeedRamp>
 800253c:	e72e      	b.n	800239c <UI_SetReg+0x20>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800253e:	b2e9      	uxtb	r1, r5
 8002540:	f7ff ff12 	bl	8002368 <UI_SelectMC>
 8002544:	0004      	movs	r4, r0
    break;
 8002546:	e729      	b.n	800239c <UI_SetReg+0x20>
      currComp = MCI_GetIqdref(pMCI);
 8002548:	0030      	movs	r0, r6
 800254a:	f7fe fa43 	bl	80009d4 <MCI_GetIqdref>
      currComp.q = (int16_t)wValue;
 800254e:	ab01      	add	r3, sp, #4
      currComp = MCI_GetIqdref(pMCI);
 8002550:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002552:	801d      	strh	r5, [r3, #0]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002554:	0030      	movs	r0, r6
 8002556:	9901      	ldr	r1, [sp, #4]
 8002558:	f7fe f968 	bl	800082c <MCI_SetCurrentReferences>
  bool retVal = true;
 800255c:	2401      	movs	r4, #1
    break;
 800255e:	e71d      	b.n	800239c <UI_SetReg+0x20>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002560:	6820      	ldr	r0, [r4, #0]
 8002562:	b229      	sxth	r1, r5
 8002564:	f001 ff96 	bl	8004494 <PID_SetKD>
  bool retVal = true;
 8002568:	2401      	movs	r4, #1
    break;
 800256a:	e717      	b.n	800239c <UI_SetReg+0x20>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800256c:	2b09      	cmp	r3, #9
 800256e:	d100      	bne.n	8002572 <UI_SetReg+0x1f6>
 8002570:	e732      	b.n	80023d8 <UI_SetReg+0x5c>
        pSPD = pMCT->pSpeedSensorMain;
 8002572:	69a4      	ldr	r4, [r4, #24]
 8002574:	e731      	b.n	80023da <UI_SetReg+0x5e>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002576:	2b09      	cmp	r3, #9
 8002578:	d0ac      	beq.n	80024d4 <UI_SetReg+0x158>
        pSPD = pMCT->pSpeedSensorMain;
 800257a:	69a4      	ldr	r4, [r4, #24]
 800257c:	e7ab      	b.n	80024d6 <UI_SetReg+0x15a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800257e:	2b09      	cmp	r3, #9
 8002580:	d100      	bne.n	8002584 <UI_SetReg+0x208>
 8002582:	e761      	b.n	8002448 <UI_SetReg+0xcc>
        pSPD = pMCT->pSpeedSensorMain;
 8002584:	69a4      	ldr	r4, [r4, #24]
 8002586:	e760      	b.n	800244a <UI_SetReg+0xce>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002588:	2b09      	cmp	r3, #9
 800258a:	d100      	bne.n	800258e <UI_SetReg+0x212>
 800258c:	e740      	b.n	8002410 <UI_SetReg+0x94>
        pSPD = pMCT->pSpeedSensorMain;
 800258e:	69a4      	ldr	r4, [r4, #24]
 8002590:	e73f      	b.n	8002412 <UI_SetReg+0x96>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002592:	0030      	movs	r0, r6
 8002594:	f7fe fa4e 	bl	8000a34 <MCI_GetTeref>
 8002598:	2200      	movs	r2, #0
 800259a:	0001      	movs	r1, r0
 800259c:	0030      	movs	r0, r6
 800259e:	f7fe f93d 	bl	800081c <MCI_ExecTorqueRamp>
  bool retVal = true;
 80025a2:	2401      	movs	r4, #1
 80025a4:	e6fa      	b.n	800239c <UI_SetReg+0x20>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	080067dc 	.word	0x080067dc

080025ac <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80025ac:	b570      	push	{r4, r5, r6, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80025ae:	7d03      	ldrb	r3, [r0, #20]
 80025b0:	68c4      	ldr	r4, [r0, #12]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	58e5      	ldr	r5, [r4, r3]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025b6:	6884      	ldr	r4, [r0, #8]
{
 80025b8:	b090      	sub	sp, #64	; 0x40
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80025ba:	58e4      	ldr	r4, [r4, r3]

  int32_t bRetVal = 0;

  if ( success != (bool *) 0 )
 80025bc:	2a00      	cmp	r2, #0
 80025be:	d007      	beq.n	80025d0 <UI_GetReg+0x24>
  {
    *success = true;
 80025c0:	2601      	movs	r6, #1
 80025c2:	7016      	strb	r6, [r2, #0]
  }

  switch (bRegID)
 80025c4:	2981      	cmp	r1, #129	; 0x81
 80025c6:	d809      	bhi.n	80025dc <UI_GetReg+0x30>
 80025c8:	4ec4      	ldr	r6, [pc, #784]	; (80028dc <UI_GetReg+0x330>)
 80025ca:	0089      	lsls	r1, r1, #2
 80025cc:	5871      	ldr	r1, [r6, r1]
 80025ce:	468f      	mov	pc, r1
 80025d0:	2973      	cmp	r1, #115	; 0x73
 80025d2:	d805      	bhi.n	80025e0 <UI_GetReg+0x34>
 80025d4:	4ac2      	ldr	r2, [pc, #776]	; (80028e0 <UI_GetReg+0x334>)
 80025d6:	0089      	lsls	r1, r1, #2
 80025d8:	5852      	ldr	r2, [r2, r1]
 80025da:	4697      	mov	pc, r2

    default:
	{
      if ( success != (bool *) 0 )
      {
        *success = false;
 80025dc:	2300      	movs	r3, #0
 80025de:	7013      	strb	r3, [r2, #0]
  int32_t bRetVal = 0;
 80025e0:	2000      	movs	r0, #0
      }
	}
    break;
  }
  return bRetVal;
}
 80025e2:	b010      	add	sp, #64	; 0x40
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 80025e6:	0020      	movs	r0, r4
 80025e8:	f7fe f9f4 	bl	80009d4 <MCI_GetIqdref>
 80025ec:	1400      	asrs	r0, r0, #16
    break;
 80025ee:	e7f8      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = CTRBDID;
 80025f0:	48bc      	ldr	r0, [pc, #752]	; (80028e4 <UI_GetReg+0x338>)
 80025f2:	e7f6      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetIqdref(pMCI).q;
 80025f4:	0020      	movs	r0, r4
 80025f6:	f7fe f9ed 	bl	80009d4 <MCI_GetIqdref>
 80025fa:	b200      	sxth	r0, r0
    break;
 80025fc:	e7f1      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetIqd(pMCI).q;
 80025fe:	0020      	movs	r0, r4
 8002600:	f7fe f9d8 	bl	80009b4 <MCI_GetIqd>
 8002604:	b200      	sxth	r0, r0
    break;
 8002606:	e7ec      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetIqd(pMCI).d;
 8002608:	0020      	movs	r0, r4
 800260a:	f7fe f9d3 	bl	80009b4 <MCI_GetIqd>
 800260e:	1400      	asrs	r0, r0, #16
    break;
 8002610:	e7e7      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8002612:	0020      	movs	r0, r4
 8002614:	f7fe f9a8 	bl	8000968 <MCI_GetMecSpeedRefUnit>
 8002618:	0043      	lsls	r3, r0, #1
 800261a:	1818      	adds	r0, r3, r0
 800261c:	0040      	lsls	r0, r0, #1
 800261e:	e7e0      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002620:	6902      	ldr	r2, [r0, #16]
 8002622:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002624:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800262a:	2a09      	cmp	r2, #9
 800262c:	d100      	bne.n	8002630 <UI_GetReg+0x84>
 800262e:	e1a7      	b.n	8002980 <UI_GetReg+0x3d4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002630:	2b09      	cmp	r3, #9
 8002632:	d100      	bne.n	8002636 <UI_GetReg+0x8a>
 8002634:	e174      	b.n	8002920 <UI_GetReg+0x374>
 8002636:	ac0e      	add	r4, sp, #56	; 0x38
      bRetVal = (int32_t)hIgain;
 8002638:	2300      	movs	r3, #0
 800263a:	5ee0      	ldrsh	r0, [r4, r3]
    break;
 800263c:	e7d1      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800263e:	6902      	ldr	r2, [r0, #16]
 8002640:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002642:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002648:	2a09      	cmp	r2, #9
 800264a:	d100      	bne.n	800264e <UI_GetReg+0xa2>
 800264c:	e19c      	b.n	8002988 <UI_GetReg+0x3dc>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800264e:	2b09      	cmp	r3, #9
 8002650:	d1c6      	bne.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 8002652:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002654:	2800      	cmp	r0, #0
 8002656:	d0c3      	beq.n	80025e0 <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).beta;
 8002658:	f003 faf2 	bl	8005c40 <STO_PLL_GetEstimatedCurrent>
 800265c:	1400      	asrs	r0, r0, #16
 800265e:	e7c0      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002660:	6902      	ldr	r2, [r0, #16]
 8002662:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002664:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800266a:	2a09      	cmp	r2, #9
 800266c:	d100      	bne.n	8002670 <UI_GetReg+0xc4>
 800266e:	e194      	b.n	800299a <UI_GetReg+0x3ee>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002670:	2b09      	cmp	r3, #9
 8002672:	d1b5      	bne.n	80025e0 <UI_GetReg+0x34>
        pSPD =  pMCT->pSpeedSensorAux;
 8002674:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002676:	2800      	cmp	r0, #0
 8002678:	d0b2      	beq.n	80025e0 <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).alpha;
 800267a:	f003 fad7 	bl	8005c2c <STO_PLL_GetEstimatedBemf>
 800267e:	b200      	sxth	r0, r0
 8002680:	e7af      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8002682:	6828      	ldr	r0, [r5, #0]
 8002684:	f001 fef8 	bl	8004478 <PID_GetKP>
    break;
 8002688:	e7ab      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 800268a:	0020      	movs	r0, r4
 800268c:	f7fe f982 	bl	8000994 <MCI_GetIalphabeta>
 8002690:	1400      	asrs	r0, r0, #16
    break;
 8002692:	e7a6      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8002694:	0020      	movs	r0, r4
 8002696:	f7fe f97d 	bl	8000994 <MCI_GetIalphabeta>
 800269a:	b200      	sxth	r0, r0
    break;
 800269c:	e7a1      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetIab(pMCI).b;
 800269e:	0020      	movs	r0, r4
 80026a0:	f7fe f968 	bl	8000974 <MCI_GetIab>
 80026a4:	1400      	asrs	r0, r0, #16
    break;
 80026a6:	e79c      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80026a8:	0020      	movs	r0, r4
 80026aa:	f7fe f955 	bl	8000958 <MCI_GetAvrgMecSpeedUnit>
 80026ae:	0043      	lsls	r3, r0, #1
 80026b0:	1818      	adds	r0, r3, r0
 80026b2:	0040      	lsls	r0, r0, #1
    break;
 80026b4:	e795      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80026b6:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 80026b8:	f001 fe76 	bl	80043a8 <MPM_GetAvrgElMotorPowerW>
    break;
 80026bc:	e791      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80026be:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80026c0:	f001 feba 	bl	8004438 <NTC_GetAvTemp_C>
    break;
 80026c4:	e78d      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 80026c6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80026c8:	f001 fd04 	bl	80040d4 <VBS_GetAvBusVoltage_V>
    break;
 80026cc:	e789      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80026ce:	6902      	ldr	r2, [r0, #16]
 80026d0:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026d2:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026d8:	2a09      	cmp	r2, #9
 80026da:	d100      	bne.n	80026de <UI_GetReg+0x132>
 80026dc:	e142      	b.n	8002964 <UI_GetReg+0x3b8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026de:	2b09      	cmp	r3, #9
 80026e0:	d000      	beq.n	80026e4 <UI_GetReg+0x138>
 80026e2:	e77d      	b.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80026e4:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80026e6:	2800      	cmp	r0, #0
 80026e8:	d100      	bne.n	80026ec <UI_GetReg+0x140>
 80026ea:	e779      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedBemf((STO_PLL_Handle_t*)pSPD).beta;
 80026ec:	f003 fa9e 	bl	8005c2c <STO_PLL_GetEstimatedBemf>
 80026f0:	1400      	asrs	r0, r0, #16
 80026f2:	e776      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80026f4:	6902      	ldr	r2, [r0, #16]
 80026f6:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026f8:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80026fe:	2a09      	cmp	r2, #9
 8002700:	d100      	bne.n	8002704 <UI_GetReg+0x158>
 8002702:	e146      	b.n	8002992 <UI_GetReg+0x3e6>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002704:	2b09      	cmp	r3, #9
 8002706:	d100      	bne.n	800270a <UI_GetReg+0x15e>
 8002708:	e100      	b.n	800290c <UI_GetReg+0x360>
 800270a:	ac0f      	add	r4, sp, #60	; 0x3c
 800270c:	e794      	b.n	8002638 <UI_GetReg+0x8c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800270e:	6902      	ldr	r2, [r0, #16]
 8002710:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002712:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002718:	2a09      	cmp	r2, #9
 800271a:	d100      	bne.n	800271e <UI_GetReg+0x172>
 800271c:	e10a      	b.n	8002934 <UI_GetReg+0x388>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800271e:	2b09      	cmp	r3, #9
 8002720:	d1f3      	bne.n	800270a <UI_GetReg+0x15e>
        pSPD = pMCT->pSpeedSensorAux;
 8002722:	69e8      	ldr	r0, [r5, #28]
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 8002724:	ac0f      	add	r4, sp, #60	; 0x3c
      if (pSPD != MC_NULL)
 8002726:	2800      	cmp	r0, #0
 8002728:	d086      	beq.n	8002638 <UI_GetReg+0x8c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 800272a:	0022      	movs	r2, r4
 800272c:	a90e      	add	r1, sp, #56	; 0x38
 800272e:	f003 fa95 	bl	8005c5c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC2;
 8002732:	e781      	b.n	8002638 <UI_GetReg+0x8c>
      bRetVal = MCI_GetVqd(pMCI).d;
 8002734:	0020      	movs	r0, r4
 8002736:	f7fe f95d 	bl	80009f4 <MCI_GetVqd>
 800273a:	1400      	asrs	r0, r0, #16
    break;
 800273c:	e751      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800273e:	68a8      	ldr	r0, [r5, #8]
 8002740:	f001 feaa 	bl	8004498 <PID_GetKD>
    break;
 8002744:	e74d      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8002746:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002748:	f002 ffaa 	bl	80056a0 <STM_GetState>
	break;
 800274c:	e749      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 800274e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002750:	f002 ffb2 	bl	80056b8 <STM_GetFaultState>
	break;
 8002754:	e745      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8002756:	f7ff fe0f 	bl	8002378 <UI_GetSelectedMC>
    break;
 800275a:	e742      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800275c:	68a8      	ldr	r0, [r5, #8]
 800275e:	f001 fe8b 	bl	8004478 <PID_GetKP>
    break;
 8002762:	e73e      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8002764:	6868      	ldr	r0, [r5, #4]
 8002766:	f001 fe87 	bl	8004478 <PID_GetKP>
    break;
 800276a:	e73a      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 800276c:	6868      	ldr	r0, [r5, #4]
 800276e:	f001 fe93 	bl	8004498 <PID_GetKD>
    break;
 8002772:	e736      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8002774:	6868      	ldr	r0, [r5, #4]
 8002776:	f001 fe83 	bl	8004480 <PID_GetKI>
    break;
 800277a:	e732      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800277c:	0020      	movs	r0, r4
 800277e:	f7fe f949 	bl	8000a14 <MCI_GetValphabeta>
 8002782:	b200      	sxth	r0, r0
    break;
 8002784:	e72d      	b.n	80025e2 <UI_GetReg+0x36>
      if (pMCT->pRevupCtrl)
 8002786:	6968      	ldr	r0, [r5, #20]
 8002788:	2800      	cmp	r0, #0
 800278a:	d100      	bne.n	800278e <UI_GetReg+0x1e2>
 800278c:	e728      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 800278e:	f002 fdd9 	bl	8005344 <RUC_GetNumberOfPhases>
 8002792:	e726      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8002794:	6828      	ldr	r0, [r5, #0]
 8002796:	f001 fe7f 	bl	8004498 <PID_GetKD>
    break;
 800279a:	e722      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800279c:	6828      	ldr	r0, [r5, #0]
 800279e:	f001 fe6f 	bl	8004480 <PID_GetKI>
    break;
 80027a2:	e71e      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 80027a4:	0020      	movs	r0, r4
 80027a6:	f7fe f8ab 	bl	8000900 <MCI_GetControlMode>
    break;
 80027aa:	e71a      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027ac:	6902      	ldr	r2, [r0, #16]
 80027ae:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027b0:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027b6:	2a09      	cmp	r2, #9
 80027b8:	d100      	bne.n	80027bc <UI_GetReg+0x210>
 80027ba:	e0ce      	b.n	800295a <UI_GetReg+0x3ae>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d000      	beq.n	80027c2 <UI_GetReg+0x216>
 80027c0:	e739      	b.n	8002636 <UI_GetReg+0x8a>
        pSPD = pMCT->pSpeedSensorAux;
 80027c2:	69e8      	ldr	r0, [r5, #28]
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80027c4:	ac0e      	add	r4, sp, #56	; 0x38
      if (pSPD != MC_NULL)
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d100      	bne.n	80027cc <UI_GetReg+0x220>
 80027ca:	e735      	b.n	8002638 <UI_GetReg+0x8c>
        STO_PLL_GetObserverGains((STO_PLL_Handle_t*)pSPD,&hC1,&hC2);
 80027cc:	0021      	movs	r1, r4
 80027ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80027d0:	f003 fa44 	bl	8005c5c <STO_PLL_GetObserverGains>
      bRetVal = (int32_t)hC1;
 80027d4:	e730      	b.n	8002638 <UI_GetReg+0x8c>
      bRetVal = MCI_GetIab(pMCI).a;
 80027d6:	0020      	movs	r0, r4
 80027d8:	f7fe f8cc 	bl	8000974 <MCI_GetIab>
 80027dc:	b200      	sxth	r0, r0
    break;
 80027de:	e700      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80027e0:	6902      	ldr	r2, [r0, #16]
 80027e2:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027e4:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027e6:	011b      	lsls	r3, r3, #4
 80027e8:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027ea:	2a09      	cmp	r2, #9
 80027ec:	d100      	bne.n	80027f0 <UI_GetReg+0x244>
 80027ee:	e0af      	b.n	8002950 <UI_GetReg+0x3a4>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80027f0:	2b09      	cmp	r3, #9
 80027f2:	d000      	beq.n	80027f6 <UI_GetReg+0x24a>
 80027f4:	e6f4      	b.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80027f6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d100      	bne.n	80027fe <UI_GetReg+0x252>
 80027fc:	e6f0      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = SPD_GetElAngle(pSPD);
 80027fe:	f002 fda5 	bl	800534c <SPD_GetElAngle>
 8002802:	e6ee      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8002804:	0020      	movs	r0, r4
 8002806:	f7fe f905 	bl	8000a14 <MCI_GetValphabeta>
 800280a:	1400      	asrs	r0, r0, #16
    break;
 800280c:	e6e9      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800280e:	6902      	ldr	r2, [r0, #16]
 8002810:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002812:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002818:	2a09      	cmp	r2, #9
 800281a:	d100      	bne.n	800281e <UI_GetReg+0x272>
 800281c:	e093      	b.n	8002946 <UI_GetReg+0x39a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800281e:	2b09      	cmp	r3, #9
 8002820:	d000      	beq.n	8002824 <UI_GetReg+0x278>
 8002822:	e6dd      	b.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 8002824:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 8002826:	2800      	cmp	r0, #0
 8002828:	d100      	bne.n	800282c <UI_GetReg+0x280>
 800282a:	e6d9      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetObservedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 800282c:	f003 fa4e 	bl	8005ccc <STO_PLL_GetObservedBemfLevel>
 8002830:	1400      	asrs	r0, r0, #16
 8002832:	e6d6      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8002834:	6902      	ldr	r2, [r0, #16]
 8002836:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002838:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800283e:	2a09      	cmp	r2, #9
 8002840:	d100      	bne.n	8002844 <UI_GetReg+0x298>
 8002842:	e098      	b.n	8002976 <UI_GetReg+0x3ca>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002844:	2b09      	cmp	r3, #9
 8002846:	d000      	beq.n	800284a <UI_GetReg+0x29e>
 8002848:	e6ca      	b.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 800284a:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 800284c:	2800      	cmp	r0, #0
 800284e:	d100      	bne.n	8002852 <UI_GetReg+0x2a6>
 8002850:	e6c6      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedBemfLevel((STO_PLL_Handle_t*)pSPD) >> 16;
 8002852:	f003 fa37 	bl	8005cc4 <STO_PLL_GetEstimatedBemfLevel>
 8002856:	1400      	asrs	r0, r0, #16
 8002858:	e6c3      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)(MC_UID);
 800285a:	4823      	ldr	r0, [pc, #140]	; (80028e8 <UI_GetReg+0x33c>)
 800285c:	e6c1      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800285e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002860:	f002 fe76 	bl	8005550 <STC_GetMinAppNegativeMecSpeedUnit>
 8002864:	0043      	lsls	r3, r0, #1
 8002866:	1818      	adds	r0, r3, r0
 8002868:	0040      	lsls	r0, r0, #1
    break;
 800286a:	e6ba      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 800286c:	6828      	ldr	r0, [r5, #0]
 800286e:	f001 fe0d 	bl	800448c <PID_GetKPDivisor>
    break;
 8002872:	e6b6      	b.n	80025e2 <UI_GetReg+0x36>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8002874:	0020      	movs	r0, r4
 8002876:	f7fe f843 	bl	8000900 <MCI_GetControlMode>
 800287a:	2801      	cmp	r0, #1
 800287c:	d000      	beq.n	8002880 <UI_GetReg+0x2d4>
 800287e:	e6c8      	b.n	8002612 <UI_GetReg+0x66>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8002880:	0020      	movs	r0, r4
 8002882:	f7fe f85b 	bl	800093c <MCI_GetLastRampFinalSpeed>
 8002886:	0043      	lsls	r3, r0, #1
 8002888:	1818      	adds	r0, r3, r0
 800288a:	0040      	lsls	r0, r0, #1
 800288c:	e6a9      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800288e:	6902      	ldr	r2, [r0, #16]
 8002890:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002892:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002898:	2a09      	cmp	r2, #9
 800289a:	d068      	beq.n	800296e <UI_GetReg+0x3c2>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800289c:	2b09      	cmp	r3, #9
 800289e:	d000      	beq.n	80028a2 <UI_GetReg+0x2f6>
 80028a0:	e69e      	b.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80028a2:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80028a4:	2800      	cmp	r0, #0
 80028a6:	d100      	bne.n	80028aa <UI_GetReg+0x2fe>
 80028a8:	e69a      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = STO_PLL_GetEstimatedCurrent((STO_PLL_Handle_t*)pSPD).alpha;
 80028aa:	f003 f9c9 	bl	8005c40 <STO_PLL_GetEstimatedCurrent>
 80028ae:	b200      	sxth	r0, r0
 80028b0:	e697      	b.n	80025e2 <UI_GetReg+0x36>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80028b2:	6902      	ldr	r2, [r0, #16]
 80028b4:	58d3      	ldr	r3, [r2, r3]
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028b6:	0f1a      	lsrs	r2, r3, #28
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	0f1b      	lsrs	r3, r3, #28
      if (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028bc:	2a09      	cmp	r2, #9
 80028be:	d03e      	beq.n	800293e <UI_GetReg+0x392>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 80028c0:	2b09      	cmp	r3, #9
 80028c2:	d000      	beq.n	80028c6 <UI_GetReg+0x31a>
 80028c4:	e68c      	b.n	80025e0 <UI_GetReg+0x34>
        pSPD = pMCT->pSpeedSensorAux;
 80028c6:	69e8      	ldr	r0, [r5, #28]
      if (pSPD != MC_NULL)
 80028c8:	2800      	cmp	r0, #0
 80028ca:	d100      	bne.n	80028ce <UI_GetReg+0x322>
 80028cc:	e688      	b.n	80025e0 <UI_GetReg+0x34>
        bRetVal = SPD_GetS16Speed(pSPD);
 80028ce:	f002 fd79 	bl	80053c4 <SPD_GetS16Speed>
 80028d2:	e686      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 80028d4:	68a8      	ldr	r0, [r5, #8]
 80028d6:	f001 fdd3 	bl	8004480 <PID_GetKI>
    break;
 80028da:	e682      	b.n	80025e2 <UI_GetReg+0x36>
 80028dc:	0800694c 	.word	0x0800694c
 80028e0:	08006b54 	.word	0x08006b54
 80028e4:	0000271a 	.word	0x0000271a
 80028e8:	34a6847a 	.word	0x34a6847a
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 80028ec:	6828      	ldr	r0, [r5, #0]
 80028ee:	f001 fdcf 	bl	8004490 <PID_GetKIDivisor>
    break;
 80028f2:	e676      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 80028f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80028f6:	f002 fe29 	bl	800554c <STC_GetMaxAppPositiveMecSpeedUnit>
 80028fa:	0043      	lsls	r3, r0, #1
 80028fc:	1818      	adds	r0, r3, r0
 80028fe:	0040      	lsls	r0, r0, #1
    break;
 8002900:	e66f      	b.n	80025e2 <UI_GetReg+0x36>
      bRetVal = MCI_GetVqd(pMCI).q;
 8002902:	0020      	movs	r0, r4
 8002904:	f7fe f876 	bl	80009f4 <MCI_GetVqd>
 8002908:	b200      	sxth	r0, r0
    break;
 800290a:	e66a      	b.n	80025e2 <UI_GetReg+0x36>
        pSPD = pMCT->pSpeedSensorAux;
 800290c:	69e8      	ldr	r0, [r5, #28]
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800290e:	ac0f      	add	r4, sp, #60	; 0x3c
      if (pSPD != MC_NULL)
 8002910:	2800      	cmp	r0, #0
 8002912:	d100      	bne.n	8002916 <UI_GetReg+0x36a>
 8002914:	e690      	b.n	8002638 <UI_GetReg+0x8c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002916:	0022      	movs	r2, r4
 8002918:	a90e      	add	r1, sp, #56	; 0x38
 800291a:	f003 f9ab 	bl	8005c74 <STO_GetPLLGains>
 800291e:	e68b      	b.n	8002638 <UI_GetReg+0x8c>
        pSPD = pMCT->pSpeedSensorAux;
 8002920:	69e8      	ldr	r0, [r5, #28]
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 8002922:	ac0e      	add	r4, sp, #56	; 0x38
      if (pSPD != MC_NULL)
 8002924:	2800      	cmp	r0, #0
 8002926:	d100      	bne.n	800292a <UI_GetReg+0x37e>
 8002928:	e686      	b.n	8002638 <UI_GetReg+0x8c>
        STO_GetPLLGains((STO_PLL_Handle_t*)pSPD,&hPgain,&hIgain);
 800292a:	0021      	movs	r1, r4
 800292c:	aa0f      	add	r2, sp, #60	; 0x3c
 800292e:	f003 f9a1 	bl	8005c74 <STO_GetPLLGains>
      bRetVal = (int32_t)hPgain;
 8002932:	e681      	b.n	8002638 <UI_GetReg+0x8c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002934:	2b09      	cmp	r3, #9
 8002936:	d100      	bne.n	800293a <UI_GetReg+0x38e>
 8002938:	e6f3      	b.n	8002722 <UI_GetReg+0x176>
        pSPD = pMCT->pSpeedSensorMain;
 800293a:	69a8      	ldr	r0, [r5, #24]
 800293c:	e6f2      	b.n	8002724 <UI_GetReg+0x178>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800293e:	2b09      	cmp	r3, #9
 8002940:	d0c1      	beq.n	80028c6 <UI_GetReg+0x31a>
        pSPD = pMCT->pSpeedSensorMain;
 8002942:	69a8      	ldr	r0, [r5, #24]
 8002944:	e7c0      	b.n	80028c8 <UI_GetReg+0x31c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002946:	2b09      	cmp	r3, #9
 8002948:	d100      	bne.n	800294c <UI_GetReg+0x3a0>
 800294a:	e76b      	b.n	8002824 <UI_GetReg+0x278>
        pSPD = pMCT->pSpeedSensorMain;
 800294c:	69a8      	ldr	r0, [r5, #24]
 800294e:	e76a      	b.n	8002826 <UI_GetReg+0x27a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002950:	2b09      	cmp	r3, #9
 8002952:	d100      	bne.n	8002956 <UI_GetReg+0x3aa>
 8002954:	e74f      	b.n	80027f6 <UI_GetReg+0x24a>
        pSPD = pMCT->pSpeedSensorMain;
 8002956:	69a8      	ldr	r0, [r5, #24]
 8002958:	e74e      	b.n	80027f8 <UI_GetReg+0x24c>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800295a:	2b09      	cmp	r3, #9
 800295c:	d100      	bne.n	8002960 <UI_GetReg+0x3b4>
 800295e:	e730      	b.n	80027c2 <UI_GetReg+0x216>
        pSPD = pMCT->pSpeedSensorMain;
 8002960:	69a8      	ldr	r0, [r5, #24]
 8002962:	e72f      	b.n	80027c4 <UI_GetReg+0x218>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002964:	2b09      	cmp	r3, #9
 8002966:	d100      	bne.n	800296a <UI_GetReg+0x3be>
 8002968:	e6bc      	b.n	80026e4 <UI_GetReg+0x138>
       pSPD = pMCT->pSpeedSensorMain;
 800296a:	69a8      	ldr	r0, [r5, #24]
 800296c:	e6bb      	b.n	80026e6 <UI_GetReg+0x13a>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800296e:	2b09      	cmp	r3, #9
 8002970:	d097      	beq.n	80028a2 <UI_GetReg+0x2f6>
        pSPD = pMCT->pSpeedSensorMain;
 8002972:	69a8      	ldr	r0, [r5, #24]
 8002974:	e796      	b.n	80028a4 <UI_GetReg+0x2f8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002976:	2b09      	cmp	r3, #9
 8002978:	d100      	bne.n	800297c <UI_GetReg+0x3d0>
 800297a:	e766      	b.n	800284a <UI_GetReg+0x29e>
        pSPD = pMCT->pSpeedSensorMain;
 800297c:	69a8      	ldr	r0, [r5, #24]
 800297e:	e765      	b.n	800284c <UI_GetReg+0x2a0>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002980:	2b09      	cmp	r3, #9
 8002982:	d0cd      	beq.n	8002920 <UI_GetReg+0x374>
        pSPD = pMCT->pSpeedSensorMain;
 8002984:	69a8      	ldr	r0, [r5, #24]
 8002986:	e7cc      	b.n	8002922 <UI_GetReg+0x376>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002988:	2b09      	cmp	r3, #9
 800298a:	d100      	bne.n	800298e <UI_GetReg+0x3e2>
 800298c:	e661      	b.n	8002652 <UI_GetReg+0xa6>
        pSPD = pMCT->pSpeedSensorMain;
 800298e:	69a8      	ldr	r0, [r5, #24]
 8002990:	e660      	b.n	8002654 <UI_GetReg+0xa8>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 8002992:	2b09      	cmp	r3, #9
 8002994:	d0ba      	beq.n	800290c <UI_GetReg+0x360>
        pSPD = pMCT->pSpeedSensorMain;
 8002996:	69a8      	ldr	r0, [r5, #24]
 8002998:	e7b9      	b.n	800290e <UI_GetReg+0x362>
      if (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_STO_PLL)
 800299a:	2b09      	cmp	r3, #9
 800299c:	d100      	bne.n	80029a0 <UI_GetReg+0x3f4>
 800299e:	e669      	b.n	8002674 <UI_GetReg+0xc8>
        pSPD = pMCT->pSpeedSensorMain;
 80029a0:	69a8      	ldr	r0, [r5, #24]
 80029a2:	e668      	b.n	8002676 <UI_GetReg+0xca>

080029a4 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 80029a4:	b570      	push	{r4, r5, r6, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80029a6:	7d03      	ldrb	r3, [r0, #20]
 80029a8:	6882      	ldr	r2, [r0, #8]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	589d      	ldr	r5, [r3, r2]

  switch (bCmdID)
 80029ae:	290e      	cmp	r1, #14
 80029b0:	d803      	bhi.n	80029ba <UI_ExecCmd+0x16>
 80029b2:	4b18      	ldr	r3, [pc, #96]	; (8002a14 <UI_ExecCmd+0x70>)
 80029b4:	0089      	lsls	r1, r1, #2
 80029b6:	585b      	ldr	r3, [r3, r1]
 80029b8:	469f      	mov	pc, r3
 80029ba:	2400      	movs	r4, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 80029bc:	0020      	movs	r0, r4
 80029be:	bd70      	pop	{r4, r5, r6, pc}
  bool retVal = true;
 80029c0:	2401      	movs	r4, #1
 80029c2:	e7fb      	b.n	80029bc <UI_ExecCmd+0x18>
      if (MCI_GetSTMState(pMCI) == IDLE)
 80029c4:	0028      	movs	r0, r5
 80029c6:	f7fd ff95 	bl	80008f4 <MCI_GetSTMState>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d004      	beq.n	80029d8 <UI_ExecCmd+0x34>
        MCI_StopMotor(pMCI);
 80029ce:	0028      	movs	r0, r5
 80029d0:	f7fd ff42 	bl	8000858 <MCI_StopMotor>
  bool retVal = true;
 80029d4:	2401      	movs	r4, #1
 80029d6:	e7f1      	b.n	80029bc <UI_ExecCmd+0x18>
        MCI_StartMotor(pMCI);
 80029d8:	0028      	movs	r0, r5
 80029da:	f7fd ff31 	bl	8000840 <MCI_StartMotor>
  bool retVal = true;
 80029de:	2401      	movs	r4, #1
 80029e0:	e7ec      	b.n	80029bc <UI_ExecCmd+0x18>
      MCI_FaultAcknowledged(pMCI);
 80029e2:	0028      	movs	r0, r5
 80029e4:	f7fd ff3e 	bl	8000864 <MCI_FaultAcknowledged>
  bool retVal = true;
 80029e8:	2401      	movs	r4, #1
    break;
 80029ea:	e7e7      	b.n	80029bc <UI_ExecCmd+0x18>
      MCI_EncoderAlign(pMCI);
 80029ec:	0028      	movs	r0, r5
 80029ee:	f7fd ff3f 	bl	8000870 <MCI_EncoderAlign>
  bool retVal = true;
 80029f2:	2401      	movs	r4, #1
    break;
 80029f4:	e7e2      	b.n	80029bc <UI_ExecCmd+0x18>
      MCI_Clear_Iqdref(pMCI);
 80029f6:	0028      	movs	r0, r5
 80029f8:	f7fe f824 	bl	8000a44 <MCI_Clear_Iqdref>
  bool retVal = true;
 80029fc:	2401      	movs	r4, #1
    break;
 80029fe:	e7dd      	b.n	80029bc <UI_ExecCmd+0x18>
      if (MCI_GetSTMState(pMCI) == RUN)
 8002a00:	0028      	movs	r0, r5
 8002a02:	f7fd ff77 	bl	80008f4 <MCI_GetSTMState>
  bool retVal = true;
 8002a06:	2401      	movs	r4, #1
      if (MCI_GetSTMState(pMCI) == RUN)
 8002a08:	2806      	cmp	r0, #6
 8002a0a:	d1d7      	bne.n	80029bc <UI_ExecCmd+0x18>
        MCI_StopRamp(pMCI);
 8002a0c:	0028      	movs	r0, r5
 8002a0e:	f7fd ff9d 	bl	800094c <MCI_StopRamp>
 8002a12:	e7d3      	b.n	80029bc <UI_ExecCmd+0x18>
 8002a14:	08006d24 	.word	0x08006d24

08002a18 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	0004      	movs	r4, r0
 8002a1c:	0008      	movs	r0, r1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002a1e:	2106      	movs	r1, #6
{
 8002a20:	0015      	movs	r5, r2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002a22:	f7fd fbfb 	bl	800021c <__divsi3>
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a26:	7d23      	ldrb	r3, [r4, #20]
 8002a28:	68a2      	ldr	r2, [r4, #8]
 8002a2a:	009b      	lsls	r3, r3, #2
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002a2c:	b201      	sxth	r1, r0
 8002a2e:	5898      	ldr	r0, [r3, r2]
 8002a30:	002a      	movs	r2, r5
 8002a32:	f7fd feeb 	bl	800080c <MCI_ExecSpeedRamp>
  return true;
}
 8002a36:	2001      	movs	r0, #1
 8002a38:	bd70      	pop	{r4, r5, r6, pc}
 8002a3a:	46c0      	nop			; (mov r8, r8)

08002a3c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8002a3c:	b510      	push	{r4, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002a3e:	7d03      	ldrb	r3, [r0, #20]
 8002a40:	6880      	ldr	r0, [r0, #8]
 8002a42:	009b      	lsls	r3, r3, #2

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8002a44:	5818      	ldr	r0, [r3, r0]
 8002a46:	f7fd fee9 	bl	800081c <MCI_ExecTorqueRamp>
  return true;
}
 8002a4a:	2001      	movs	r0, #1
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)

08002a50 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	000c      	movs	r4, r1
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a54:	7d01      	ldrb	r1, [r0, #20]
{
 8002a56:	001e      	movs	r6, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a58:	68c3      	ldr	r3, [r0, #12]
 8002a5a:	0089      	lsls	r1, r1, #2
 8002a5c:	58cb      	ldr	r3, [r1, r3]
{
 8002a5e:	0017      	movs	r7, r2
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a60:	695d      	ldr	r5, [r3, #20]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
  }
  else
  {
    hRetVal = false;
 8002a62:	2000      	movs	r0, #0
  if (pRevupCtrl)
 8002a64:	2d00      	cmp	r5, #0
 8002a66:	d010      	beq.n	8002a8a <UI_GetRevupData+0x3a>
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002a68:	0021      	movs	r1, r4
 8002a6a:	0028      	movs	r0, r5
 8002a6c:	f002 fc54 	bl	8005318 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a70:	0021      	movs	r1, r4
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8002a72:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a74:	0028      	movs	r0, r5
 8002a76:	f002 fc55 	bl	8005324 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002a7a:	0021      	movs	r1, r4
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8002a7c:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8002a7e:	0028      	movs	r0, r5
 8002a80:	f002 fc58 	bl	8005334 <RUC_GetPhaseFinalTorque>
 8002a84:	9b06      	ldr	r3, [sp, #24]
 8002a86:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8002a88:	2001      	movs	r0, #1
  }
  return hRetVal;
}
 8002a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a8c <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8002a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8e:	000c      	movs	r4, r1
 8002a90:	001e      	movs	r6, r3
 8002a92:	ab06      	add	r3, sp, #24
 8002a94:	2700      	movs	r7, #0
 8002a96:	5fdf      	ldrsh	r7, [r3, r7]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002a98:	7d03      	ldrb	r3, [r0, #20]
 8002a9a:	68c1      	ldr	r1, [r0, #12]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	585b      	ldr	r3, [r3, r1]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002aa0:	0021      	movs	r1, r4
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8002aa2:	695d      	ldr	r5, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8002aa4:	0028      	movs	r0, r5
 8002aa6:	f002 fc25 	bl	80052f4 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 8002aaa:	0032      	movs	r2, r6
 8002aac:	0028      	movs	r0, r5
 8002aae:	0021      	movs	r1, r4
 8002ab0:	f002 fc26 	bl	8005300 <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8002ab4:	0028      	movs	r0, r5
 8002ab6:	003a      	movs	r2, r7
 8002ab8:	0021      	movs	r1, r4
 8002aba:	f002 fc27 	bl	800530c <RUC_SetPhaseFinalTorque>
  return true;
}
 8002abe:	2001      	movs	r0, #1
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac2:	46c0      	nop			; (mov r8, r8)

08002ac4 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8002ac4:	b500      	push	{lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002ac6:	7d03      	ldrb	r3, [r0, #20]
 8002ac8:	6880      	ldr	r0, [r0, #8]
{
 8002aca:	b083      	sub	sp, #12
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	5818      	ldr	r0, [r3, r0]
  qd_t currComp;
  currComp.q = hIqRef;
 8002ad0:	ab01      	add	r3, sp, #4
 8002ad2:	8019      	strh	r1, [r3, #0]
  currComp.d = hIdRef;
 8002ad4:	805a      	strh	r2, [r3, #2]
  MCI_SetCurrentReferences(pMCI,currComp);
 8002ad6:	9901      	ldr	r1, [sp, #4]
 8002ad8:	f7fd fea8 	bl	800082c <MCI_SetCurrentReferences>
}
 8002adc:	b003      	add	sp, #12
 8002ade:	bd00      	pop	{pc}

08002ae0 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	4770      	bx	lr

08002ae4 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002ae4:	4770      	bx	lr
 8002ae6:	46c0      	nop			; (mov r8, r8)

08002ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ae8:	b570      	push	{r4, r5, r6, lr}
 8002aea:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aec:	20fa      	movs	r0, #250	; 0xfa
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_InitTick+0x40>)
 8002af0:	0080      	lsls	r0, r0, #2
 8002af2:	7819      	ldrb	r1, [r3, #0]
 8002af4:	f7fd fb08 	bl	8000108 <__udivsi3>
 8002af8:	4d0c      	ldr	r5, [pc, #48]	; (8002b2c <HAL_InitTick+0x44>)
 8002afa:	0001      	movs	r1, r0
 8002afc:	6828      	ldr	r0, [r5, #0]
 8002afe:	f7fd fb03 	bl	8000108 <__udivsi3>
 8002b02:	f000 f9b3 	bl	8002e6c <HAL_SYSTICK_Config>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d10c      	bne.n	8002b24 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8002b0a:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b0c:	2c03      	cmp	r4, #3
 8002b0e:	d900      	bls.n	8002b12 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b12:	3802      	subs	r0, #2
 8002b14:	2200      	movs	r2, #0
 8002b16:	0021      	movs	r1, r4
 8002b18:	f000 f96a 	bl	8002df0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b1c:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_InitTick+0x48>)
 8002b1e:	2000      	movs	r0, #0
 8002b20:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8002b22:	e7f5      	b.n	8002b10 <HAL_InitTick+0x28>
    return HAL_ERROR;
 8002b24:	2001      	movs	r0, #1
 8002b26:	e7f3      	b.n	8002b10 <HAL_InitTick+0x28>
 8002b28:	20000718 	.word	0x20000718
 8002b2c:	20000714 	.word	0x20000714
 8002b30:	2000071c 	.word	0x2000071c

08002b34 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	2110      	movs	r1, #16
 8002b36:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_Init+0x1c>)
{
 8002b38:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3a:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3c:	2002      	movs	r0, #2
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b42:	f7ff ffd1 	bl	8002ae8 <HAL_InitTick>
  HAL_MspInit();
 8002b46:	f7ff f9a5 	bl	8001e94 <HAL_MspInit>
}
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	bd10      	pop	{r4, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40022000 	.word	0x40022000

08002b54 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b54:	4a03      	ldr	r2, [pc, #12]	; (8002b64 <HAL_IncTick+0x10>)
 8002b56:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <HAL_IncTick+0x14>)
 8002b58:	6811      	ldr	r1, [r2, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	185b      	adds	r3, r3, r1
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	4770      	bx	lr
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	20000aa4 	.word	0x20000aa4
 8002b68:	20000718 	.word	0x20000718

08002b6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002b6c:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <HAL_GetTick+0x8>)
 8002b6e:	6818      	ldr	r0, [r3, #0]
}
 8002b70:	4770      	bx	lr
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	20000aa4 	.word	0x20000aa4

08002b78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	1e04      	subs	r4, r0, #0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
 8002b7c:	d100      	bne.n	8002b80 <HAL_ADC_Init+0x8>
 8002b7e:	e082      	b.n	8002c86 <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d069      	beq.n	8002c5a <HAL_ADC_Init+0xe2>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b88:	06db      	lsls	r3, r3, #27
 8002b8a:	d460      	bmi.n	8002c4e <HAL_ADC_Init+0xd6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b8c:	6822      	ldr	r2, [r4, #0]
 8002b8e:	6893      	ldr	r3, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002b90:	075b      	lsls	r3, r3, #29
 8002b92:	d45c      	bmi.n	8002c4e <HAL_ADC_Init+0xd6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b96:	4949      	ldr	r1, [pc, #292]	; (8002cbc <HAL_ADC_Init+0x144>)
 8002b98:	400b      	ands	r3, r1
 8002b9a:	3106      	adds	r1, #6
 8002b9c:	31ff      	adds	r1, #255	; 0xff
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	63a3      	str	r3, [r4, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	6891      	ldr	r1, [r2, #8]
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d05c      	beq.n	8002c66 <HAL_ADC_Init+0xee>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bac:	2118      	movs	r1, #24
 8002bae:	68d3      	ldr	r3, [r2, #12]
 8002bb0:	438b      	bics	r3, r1
 8002bb2:	68a1      	ldr	r1, [r4, #8]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002bb8:	6913      	ldr	r3, [r2, #16]
 8002bba:	6861      	ldr	r1, [r4, #4]
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6113      	str	r3, [r2, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002bc4:	68d3      	ldr	r3, [r2, #12]
 8002bc6:	493e      	ldr	r1, [pc, #248]	; (8002cc0 <HAL_ADC_Init+0x148>)
 8002bc8:	400b      	ands	r3, r1
 8002bca:	60d3      	str	r3, [r2, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bcc:	7e23      	ldrb	r3, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002bce:	7e61      	ldrb	r1, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bd0:	039b      	lsls	r3, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002bd2:	03c9      	lsls	r1, r1, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bd4:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bd6:	7ea0      	ldrb	r0, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bd8:	68e1      	ldr	r1, [r4, #12]
 8002bda:	430b      	orrs	r3, r1
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002bdc:	0341      	lsls	r1, r0, #13
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bde:	430b      	orrs	r3, r1
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002be0:	2124      	movs	r1, #36	; 0x24
 8002be2:	5c61      	ldrb	r1, [r4, r1]
 8002be4:	0049      	lsls	r1, r1, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002be6:	430b      	orrs	r3, r1
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002be8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002bea:	3901      	subs	r1, #1
 8002bec:	1e4d      	subs	r5, r1, #1
 8002bee:	41a9      	sbcs	r1, r5
 8002bf0:	0309      	lsls	r1, r1, #12
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	6921      	ldr	r1, [r4, #16]
 8002bf6:	3902      	subs	r1, #2
 8002bf8:	424d      	negs	r5, r1
 8002bfa:	4169      	adcs	r1, r5
 8002bfc:	0089      	lsls	r1, r1, #2
 8002bfe:	430b      	orrs	r3, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c00:	7ee1      	ldrb	r1, [r4, #27]
 8002c02:	2901      	cmp	r1, #1
 8002c04:	d04b      	beq.n	8002c9e <HAL_ADC_Init+0x126>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c06:	20c2      	movs	r0, #194	; 0xc2
 8002c08:	69e1      	ldr	r1, [r4, #28]
 8002c0a:	30ff      	adds	r0, #255	; 0xff
 8002c0c:	4281      	cmp	r1, r0
 8002c0e:	d002      	beq.n	8002c16 <HAL_ADC_Init+0x9e>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002c10:	6a20      	ldr	r0, [r4, #32]
 8002c12:	4301      	orrs	r1, r0
 8002c14:	430b      	orrs	r3, r1
                    hadc->Init.ExternalTrigConvEdge );
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c16:	68d1      	ldr	r1, [r2, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c18:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002c1a:	4319      	orrs	r1, r3
 8002c1c:	60d1      	str	r1, [r2, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002c1e:	2180      	movs	r1, #128	; 0x80
 8002c20:	0549      	lsls	r1, r1, #21
 8002c22:	428d      	cmp	r5, r1
 8002c24:	d026      	beq.n	8002c74 <HAL_ADC_Init+0xfc>
 8002c26:	1e69      	subs	r1, r5, #1
 8002c28:	2906      	cmp	r1, #6
 8002c2a:	d923      	bls.n	8002c74 <HAL_ADC_Init+0xfc>
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	4925      	ldr	r1, [pc, #148]	; (8002cc4 <HAL_ADC_Init+0x14c>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d029      	beq.n	8002c8a <HAL_ADC_Init+0x112>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c36:	2212      	movs	r2, #18
 8002c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8002c3a:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	3a02      	subs	r2, #2
 8002c40:	4313      	orrs	r3, r2
 8002c42:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c44:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002c46:	3a0f      	subs	r2, #15
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8002c4c:	e004      	b.n	8002c58 <HAL_ADC_Init+0xe0>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4e:	2210      	movs	r2, #16
        
    tmp_hal_status = HAL_ERROR;
 8002c50:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c54:	4313      	orrs	r3, r2
 8002c56:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8002c58:	bd70      	pop	{r4, r5, r6, pc}
    hadc->Lock = HAL_UNLOCKED;
 8002c5a:	2234      	movs	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8002c5e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8002c60:	f7ff f930 	bl	8001ec4 <HAL_ADC_MspInit>
 8002c64:	e78f      	b.n	8002b86 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002c66:	6811      	ldr	r1, [r2, #0]
 8002c68:	420b      	tst	r3, r1
 8002c6a:	d1ab      	bne.n	8002bc4 <HAL_ADC_Init+0x4c>
 8002c6c:	68d3      	ldr	r3, [r2, #12]
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	d4a8      	bmi.n	8002bc4 <HAL_ADC_Init+0x4c>
 8002c72:	e79b      	b.n	8002bac <HAL_ADC_Init+0x34>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002c74:	2107      	movs	r1, #7
 8002c76:	6950      	ldr	r0, [r2, #20]
 8002c78:	4388      	bics	r0, r1
 8002c7a:	6150      	str	r0, [r2, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002c7c:	6950      	ldr	r0, [r2, #20]
 8002c7e:	4029      	ands	r1, r5
 8002c80:	4301      	orrs	r1, r0
 8002c82:	6151      	str	r1, [r2, #20]
 8002c84:	e7d2      	b.n	8002c2c <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
 8002c88:	e7e6      	b.n	8002c58 <HAL_ADC_Init+0xe0>
      ADC_CLEAR_ERRORCODE(hadc);
 8002c8a:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002c8c:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002c8e:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8002c90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c92:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002c94:	4393      	bics	r3, r2
 8002c96:	3a02      	subs	r2, #2
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c9c:	e7dc      	b.n	8002c58 <HAL_ADC_Init+0xe0>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c9e:	2800      	cmp	r0, #0
 8002ca0:	d103      	bne.n	8002caa <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	0249      	lsls	r1, r1, #9
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	e7ad      	b.n	8002c06 <HAL_ADC_Init+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002caa:	2520      	movs	r5, #32
 8002cac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002cae:	4328      	orrs	r0, r5
 8002cb0:	63a0      	str	r0, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cb4:	4301      	orrs	r1, r0
 8002cb6:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002cb8:	e7a5      	b.n	8002c06 <HAL_ADC_Init+0x8e>
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	fffffefd 	.word	0xfffffefd
 8002cc0:	fffe0219 	.word	0xfffe0219
 8002cc4:	833fffe7 	.word	0x833fffe7

08002cc8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002cc8:	2300      	movs	r3, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cca:	2234      	movs	r2, #52	; 0x34
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002cd0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002cd2:	5c83      	ldrb	r3, [r0, r2]
{
 8002cd4:	0004      	movs	r4, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002cd6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d060      	beq.n	8002d9e <HAL_ADC_ConfigChannel+0xd6>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	5483      	strb	r3, [r0, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ce0:	6805      	ldr	r5, [r0, #0]
 8002ce2:	68aa      	ldr	r2, [r5, #8]
 8002ce4:	0752      	lsls	r2, r2, #29
 8002ce6:	d509      	bpl.n	8002cfc <HAL_ADC_ConfigChannel+0x34>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce8:	2220      	movs	r2, #32
 8002cea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002cec:	4313      	orrs	r3, r2
 8002cee:	6383      	str	r3, [r0, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002cf0:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cf2:	2334      	movs	r3, #52	; 0x34
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfig->Rank != ADC_RANK_NONE)
 8002cfc:	4a36      	ldr	r2, [pc, #216]	; (8002dd8 <HAL_ADC_ConfigChannel+0x110>)
 8002cfe:	6848      	ldr	r0, [r1, #4]
 8002d00:	4290      	cmp	r0, r2
 8002d02:	d030      	beq.n	8002d66 <HAL_ADC_ConfigChannel+0x9e>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d04:	680a      	ldr	r2, [r1, #0]
 8002d06:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d0c:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d0e:	4338      	orrs	r0, r7
 8002d10:	62a8      	str	r0, [r5, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002d12:	055b      	lsls	r3, r3, #21
 8002d14:	429e      	cmp	r6, r3
 8002d16:	d00f      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x70>
 8002d18:	3e01      	subs	r6, #1
 8002d1a:	2e06      	cmp	r6, #6
 8002d1c:	d90c      	bls.n	8002d38 <HAL_ADC_ConfigChannel+0x70>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002d1e:	2307      	movs	r3, #7
 8002d20:	6888      	ldr	r0, [r1, #8]
 8002d22:	6969      	ldr	r1, [r5, #20]
 8002d24:	4019      	ands	r1, r3
 8002d26:	4288      	cmp	r0, r1
 8002d28:	d006      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x70>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002d2a:	6969      	ldr	r1, [r5, #20]
 8002d2c:	4399      	bics	r1, r3
 8002d2e:	6169      	str	r1, [r5, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002d30:	6969      	ldr	r1, [r5, #20]
 8002d32:	4003      	ands	r3, r0
 8002d34:	430b      	orrs	r3, r1
 8002d36:	616b      	str	r3, [r5, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d38:	0013      	movs	r3, r2
 8002d3a:	3b10      	subs	r3, #16
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d810      	bhi.n	8002d62 <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d40:	4926      	ldr	r1, [pc, #152]	; (8002ddc <HAL_ADC_ConfigChannel+0x114>)
 8002d42:	680b      	ldr	r3, [r1, #0]
 8002d44:	2a10      	cmp	r2, #16
 8002d46:	d02e      	beq.n	8002da6 <HAL_ADC_ConfigChannel+0xde>
 8002d48:	3a11      	subs	r2, #17
 8002d4a:	1e50      	subs	r0, r2, #1
 8002d4c:	4182      	sbcs	r2, r0
 8002d4e:	20c0      	movs	r0, #192	; 0xc0
 8002d50:	4252      	negs	r2, r2
 8002d52:	0400      	lsls	r0, r0, #16
 8002d54:	4002      	ands	r2, r0
 8002d56:	2080      	movs	r0, #128	; 0x80
 8002d58:	03c0      	lsls	r0, r0, #15
 8002d5a:	4684      	mov	ip, r0
 8002d5c:	4462      	add	r2, ip
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d62:	2000      	movs	r0, #0
 8002d64:	e7c5      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x2a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d66:	680a      	ldr	r2, [r1, #0]
 8002d68:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8002d6a:	4093      	lsls	r3, r2
 8002d6c:	4398      	bics	r0, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d6e:	0013      	movs	r3, r2
 8002d70:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002d72:	62a8      	str	r0, [r5, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d8f4      	bhi.n	8002d62 <HAL_ADC_ConfigChannel+0x9a>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d78:	4b18      	ldr	r3, [pc, #96]	; (8002ddc <HAL_ADC_ConfigChannel+0x114>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2a10      	cmp	r2, #16
 8002d7e:	d010      	beq.n	8002da2 <HAL_ADC_ConfigChannel+0xda>
 8002d80:	3a11      	subs	r2, #17
 8002d82:	4251      	negs	r1, r2
 8002d84:	414a      	adcs	r2, r1
 8002d86:	21c0      	movs	r1, #192	; 0xc0
 8002d88:	4252      	negs	r2, r2
 8002d8a:	0409      	lsls	r1, r1, #16
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	4914      	ldr	r1, [pc, #80]	; (8002de0 <HAL_ADC_ConfigChannel+0x118>)
 8002d90:	468c      	mov	ip, r1
 8002d92:	4462      	add	r2, ip
 8002d94:	401a      	ands	r2, r3
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_ADC_ConfigChannel+0x114>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d98:	2000      	movs	r0, #0
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e7a9      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x2a>
  __HAL_LOCK(hadc);
 8002d9e:	2002      	movs	r0, #2
 8002da0:	e7aa      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x30>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <HAL_ADC_ConfigChannel+0x11c>)
 8002da4:	e7f6      	b.n	8002d94 <HAL_ADC_ConfigChannel+0xcc>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	0412      	lsls	r2, r2, #16
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dae:	4b0e      	ldr	r3, [pc, #56]	; (8002de8 <HAL_ADC_ConfigChannel+0x120>)
 8002db0:	490e      	ldr	r1, [pc, #56]	; (8002dec <HAL_ADC_ConfigChannel+0x124>)
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f7fd f9a8 	bl	8000108 <__udivsi3>
 8002db8:	0083      	lsls	r3, r0, #2
 8002dba:	181b      	adds	r3, r3, r0
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0cd      	beq.n	8002d62 <HAL_ADC_ConfigChannel+0x9a>
            wait_loop_index--;
 8002dc6:	9b01      	ldr	r3, [sp, #4]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002dcc:	9b01      	ldr	r3, [sp, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	e78d      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x2a>
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	00001001 	.word	0x00001001
 8002ddc:	40012708 	.word	0x40012708
 8002de0:	feffffff 	.word	0xfeffffff
 8002de4:	ff7fffff 	.word	0xff7fffff
 8002de8:	20000714 	.word	0x20000714
 8002dec:	000f4240 	.word	0x000f4240

08002df0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df0:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002df2:	2800      	cmp	r0, #0
 8002df4:	db14      	blt.n	8002e20 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_NVIC_SetPriority+0x5c>)
 8002df8:	2203      	movs	r2, #3
 8002dfa:	469c      	mov	ip, r3
 8002dfc:	23ff      	movs	r3, #255	; 0xff
 8002dfe:	0884      	lsrs	r4, r0, #2
 8002e00:	4002      	ands	r2, r0
 8002e02:	0018      	movs	r0, r3
 8002e04:	26c0      	movs	r6, #192	; 0xc0
 8002e06:	00d2      	lsls	r2, r2, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e08:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e0a:	4090      	lsls	r0, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e0c:	400b      	ands	r3, r1
 8002e0e:	4093      	lsls	r3, r2
 8002e10:	00a4      	lsls	r4, r4, #2
 8002e12:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e14:	00b6      	lsls	r6, r6, #2
 8002e16:	59a5      	ldr	r5, [r4, r6]
 8002e18:	4385      	bics	r5, r0
 8002e1a:	432b      	orrs	r3, r5
 8002e1c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002e1e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <HAL_NVIC_SetPriority+0x60>)
 8002e22:	230f      	movs	r3, #15
 8002e24:	4694      	mov	ip, r2
 8002e26:	2203      	movs	r2, #3
 8002e28:	4003      	ands	r3, r0
 8002e2a:	4010      	ands	r0, r2
 8002e2c:	32fc      	adds	r2, #252	; 0xfc
 8002e2e:	0015      	movs	r5, r2
 8002e30:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e32:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e34:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e36:	400a      	ands	r2, r1
 8002e38:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e3a:	3b08      	subs	r3, #8
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4463      	add	r3, ip
 8002e42:	69dc      	ldr	r4, [r3, #28]
 8002e44:	43ac      	bics	r4, r5
 8002e46:	4322      	orrs	r2, r4
 8002e48:	61da      	str	r2, [r3, #28]
 8002e4a:	e7e8      	b.n	8002e1e <HAL_NVIC_SetPriority+0x2e>
 8002e4c:	e000e100 	.word	0xe000e100
 8002e50:	e000ed00 	.word	0xe000ed00

08002e54 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002e54:	2800      	cmp	r0, #0
 8002e56:	db05      	blt.n	8002e64 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e58:	221f      	movs	r2, #31
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4002      	ands	r2, r0
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	4a01      	ldr	r2, [pc, #4]	; (8002e68 <HAL_NVIC_EnableIRQ+0x14>)
 8002e62:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002e64:	4770      	bx	lr
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	e000e100 	.word	0xe000e100

08002e6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	1e43      	subs	r3, r0, #1
 8002e70:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d20e      	bcs.n	8002e96 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e78:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7a:	4a07      	ldr	r2, [pc, #28]	; (8002e98 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e7c:	4807      	ldr	r0, [pc, #28]	; (8002e9c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e7e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e80:	6a03      	ldr	r3, [r0, #32]
 8002e82:	0609      	lsls	r1, r1, #24
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	0a1b      	lsrs	r3, r3, #8
 8002e88:	430b      	orrs	r3, r1
 8002e8a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e8c:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8e:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e90:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e92:	3307      	adds	r3, #7
 8002e94:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002e96:	4770      	bx	lr
 8002e98:	e000e010 	.word	0xe000e010
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002ea0:	4770      	bx	lr
 8002ea2:	46c0      	nop			; (mov r8, r8)

08002ea4 <HAL_SYSTICK_IRQHandler>:
{
 8002ea4:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8002ea6:	f7ff fffb 	bl	8002ea0 <HAL_SYSTICK_Callback>
}
 8002eaa:	bd10      	pop	{r4, pc}

08002eac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002eb0:	d027      	beq.n	8002f02 <HAL_DMA_Init+0x56>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002eb2:	2521      	movs	r5, #33	; 0x21
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002eb8:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <HAL_DMA_Init+0x5c>)
  tmp = hdma->Instance->CCR;
 8002ebc:	6802      	ldr	r2, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002ebe:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ec0:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8002ec2:	6863      	ldr	r3, [r4, #4]
 8002ec4:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec6:	68e1      	ldr	r1, [r4, #12]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6921      	ldr	r1, [r4, #16]
 8002ecc:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ece:	6961      	ldr	r1, [r4, #20]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	69a1      	ldr	r1, [r4, #24]
 8002ed4:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ed6:	69e1      	ldr	r1, [r4, #28]
 8002ed8:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 8002eda:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002edc:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_DMA_Init+0x60>)
 8002ee0:	2114      	movs	r1, #20
 8002ee2:	469c      	mov	ip, r3
 8002ee4:	4460      	add	r0, ip
 8002ee6:	f7fd f90f 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <HAL_DMA_Init+0x64>)
  hdma->State = HAL_DMA_STATE_READY;
 8002eec:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 8002eee:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef0:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ef2:	0080      	lsls	r0, r0, #2
 8002ef4:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002ef6:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ef8:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002efa:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 8002efc:	321f      	adds	r2, #31
 8002efe:	54a3      	strb	r3, [r4, r2]
}  
 8002f00:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002f02:	2001      	movs	r0, #1
 8002f04:	e7fc      	b.n	8002f00 <HAL_DMA_Init+0x54>
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	ffffc00f 	.word	0xffffc00f
 8002f0c:	bffdfff8 	.word	0xbffdfff8
 8002f10:	40020000 	.word	0x40020000

08002f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f16:	46de      	mov	lr, fp
 8002f18:	4657      	mov	r7, sl
 8002f1a:	464e      	mov	r6, r9
 8002f1c:	4645      	mov	r5, r8
 8002f1e:	b5e0      	push	{r5, r6, r7, lr}
 8002f20:	468c      	mov	ip, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f22:	6809      	ldr	r1, [r1, #0]
 8002f24:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002f26:	2300      	movs	r3, #0
{
 8002f28:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2a:	2900      	cmp	r1, #0
 8002f2c:	d100      	bne.n	8002f30 <HAL_GPIO_Init+0x1c>
 8002f2e:	e0d0      	b.n	80030d2 <HAL_GPIO_Init+0x1be>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f30:	4c72      	ldr	r4, [pc, #456]	; (80030fc <HAL_GPIO_Init+0x1e8>)
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f32:	46e2      	mov	sl, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f34:	46a3      	mov	fp, r4
 8002f36:	e064      	b.n	8003002 <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f38:	4665      	mov	r5, ip
 8002f3a:	2d03      	cmp	r5, #3
 8002f3c:	d000      	beq.n	8002f40 <HAL_GPIO_Init+0x2c>
 8002f3e:	e0b6      	b.n	80030ae <HAL_GPIO_Init+0x19a>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002f40:	4666      	mov	r6, ip
 8002f42:	4096      	lsls	r6, r2
 8002f44:	43f5      	mvns	r5, r6
 8002f46:	9502      	str	r5, [sp, #8]
      temp = GPIOx->MODER;
 8002f48:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f4a:	9d02      	ldr	r5, [sp, #8]
 8002f4c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f4e:	432e      	orrs	r6, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f50:	25c0      	movs	r5, #192	; 0xc0
 8002f52:	02ad      	lsls	r5, r5, #10
      GPIOx->MODER = temp;
 8002f54:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f56:	422c      	tst	r4, r5
 8002f58:	d04d      	beq.n	8002ff6 <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	465d      	mov	r5, fp
 8002f5c:	2601      	movs	r6, #1
 8002f5e:	465f      	mov	r7, fp
 8002f60:	69ad      	ldr	r5, [r5, #24]
 8002f62:	4335      	orrs	r5, r6
 8002f64:	61bd      	str	r5, [r7, #24]
 8002f66:	69bd      	ldr	r5, [r7, #24]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f68:	2703      	movs	r7, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f6a:	4035      	ands	r5, r6
 8002f6c:	4e64      	ldr	r6, [pc, #400]	; (8003100 <HAL_GPIO_Init+0x1ec>)
 8002f6e:	9505      	str	r5, [sp, #20]
 8002f70:	46b4      	mov	ip, r6
 8002f72:	9d05      	ldr	r5, [sp, #20]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f74:	401f      	ands	r7, r3
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f76:	089d      	lsrs	r5, r3, #2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f78:	00bf      	lsls	r7, r7, #2
 8002f7a:	00ad      	lsls	r5, r5, #2
 8002f7c:	4465      	add	r5, ip
 8002f7e:	46bc      	mov	ip, r7
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f80:	68ae      	ldr	r6, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f82:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2u];
 8002f84:	46b1      	mov	r9, r6
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f86:	4666      	mov	r6, ip
 8002f88:	40b7      	lsls	r7, r6
 8002f8a:	003e      	movs	r6, r7
 8002f8c:	464f      	mov	r7, r9
 8002f8e:	43b7      	bics	r7, r6
 8002f90:	46b9      	mov	r9, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f92:	2790      	movs	r7, #144	; 0x90
 8002f94:	05ff      	lsls	r7, r7, #23
 8002f96:	42b8      	cmp	r0, r7
 8002f98:	d00e      	beq.n	8002fb8 <HAL_GPIO_Init+0xa4>
 8002f9a:	4f5a      	ldr	r7, [pc, #360]	; (8003104 <HAL_GPIO_Init+0x1f0>)
 8002f9c:	42b8      	cmp	r0, r7
 8002f9e:	d100      	bne.n	8002fa2 <HAL_GPIO_Init+0x8e>
 8002fa0:	e09e      	b.n	80030e0 <HAL_GPIO_Init+0x1cc>
 8002fa2:	4f59      	ldr	r7, [pc, #356]	; (8003108 <HAL_GPIO_Init+0x1f4>)
 8002fa4:	42b8      	cmp	r0, r7
 8002fa6:	d100      	bne.n	8002faa <HAL_GPIO_Init+0x96>
 8002fa8:	e0a1      	b.n	80030ee <HAL_GPIO_Init+0x1da>
 8002faa:	4666      	mov	r6, ip
 8002fac:	2705      	movs	r7, #5
 8002fae:	40b7      	lsls	r7, r6
 8002fb0:	003e      	movs	r6, r7
 8002fb2:	464f      	mov	r7, r9
 8002fb4:	4337      	orrs	r7, r6
 8002fb6:	46b9      	mov	r9, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb8:	464e      	mov	r6, r9
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fba:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fbc:	60ae      	str	r6, [r5, #8]
        temp = EXTI->IMR;
 8002fbe:	4d53      	ldr	r5, [pc, #332]	; (800310c <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8002fc0:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc2:	027f      	lsls	r7, r7, #9
        temp &= ~(iocurrent);
 8002fc4:	43f6      	mvns	r6, r6
        temp = EXTI->IMR;
 8002fc6:	682d      	ldr	r5, [r5, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fc8:	423c      	tst	r4, r7
 8002fca:	d17f      	bne.n	80030cc <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 8002fcc:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002fce:	4f4f      	ldr	r7, [pc, #316]	; (800310c <HAL_GPIO_Init+0x1f8>)
 8002fd0:	603d      	str	r5, [r7, #0]

        temp = EXTI->EMR;
 8002fd2:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd4:	03a7      	lsls	r7, r4, #14
 8002fd6:	d476      	bmi.n	80030c6 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8002fd8:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002fda:	4f4c      	ldr	r7, [pc, #304]	; (800310c <HAL_GPIO_Init+0x1f8>)
 8002fdc:	607d      	str	r5, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fde:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fe0:	02e7      	lsls	r7, r4, #11
 8002fe2:	d46d      	bmi.n	80030c0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8002fe4:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002fe6:	4f49      	ldr	r7, [pc, #292]	; (800310c <HAL_GPIO_Init+0x1f8>)
 8002fe8:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8002fea:	68fd      	ldr	r5, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fec:	02a4      	lsls	r4, r4, #10
 8002fee:	d463      	bmi.n	80030b8 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 8002ff0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002ff2:	4c46      	ldr	r4, [pc, #280]	; (800310c <HAL_GPIO_Init+0x1f8>)
 8002ff4:	60e5      	str	r5, [r4, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ff6:	000c      	movs	r4, r1
      }
    }

    position++;
 8002ff8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffa:	40dc      	lsrs	r4, r3
 8002ffc:	3202      	adds	r2, #2
 8002ffe:	2c00      	cmp	r4, #0
 8003000:	d067      	beq.n	80030d2 <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003002:	2601      	movs	r6, #1
 8003004:	000c      	movs	r4, r1
 8003006:	409e      	lsls	r6, r3
 8003008:	4034      	ands	r4, r6
 800300a:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 800300c:	4231      	tst	r1, r6
 800300e:	d0f2      	beq.n	8002ff6 <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003010:	4654      	mov	r4, sl
 8003012:	2503      	movs	r5, #3
 8003014:	6864      	ldr	r4, [r4, #4]
 8003016:	4025      	ands	r5, r4
 8003018:	46ac      	mov	ip, r5
 800301a:	3d01      	subs	r5, #1
 800301c:	2d01      	cmp	r5, #1
 800301e:	d88b      	bhi.n	8002f38 <HAL_GPIO_Init+0x24>
        temp = GPIOx->OSPEEDR;
 8003020:	6885      	ldr	r5, [r0, #8]
 8003022:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003024:	2503      	movs	r5, #3
 8003026:	4095      	lsls	r5, r2
 8003028:	46a8      	mov	r8, r5
 800302a:	43ed      	mvns	r5, r5
 800302c:	464f      	mov	r7, r9
 800302e:	9502      	str	r5, [sp, #8]
 8003030:	4645      	mov	r5, r8
 8003032:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003034:	4655      	mov	r5, sl
 8003036:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003038:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 800303a:	002f      	movs	r7, r5
 800303c:	4097      	lsls	r7, r2
 800303e:	46b8      	mov	r8, r7
 8003040:	464f      	mov	r7, r9
 8003042:	4645      	mov	r5, r8
 8003044:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8003046:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003048:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304a:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800304c:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304e:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003050:	0926      	lsrs	r6, r4, #4
 8003052:	402e      	ands	r6, r5
 8003054:	409e      	lsls	r6, r3
 8003056:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8003058:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800305a:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800305c:	9d02      	ldr	r5, [sp, #8]
 800305e:	402e      	ands	r6, r5
 8003060:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003062:	4656      	mov	r6, sl
 8003064:	68b6      	ldr	r6, [r6, #8]
 8003066:	4647      	mov	r7, r8
 8003068:	4096      	lsls	r6, r2
 800306a:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800306c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	4667      	mov	r7, ip
 8003070:	4666      	mov	r6, ip
 8003072:	4096      	lsls	r6, r2
 8003074:	2f02      	cmp	r7, #2
 8003076:	d000      	beq.n	800307a <HAL_GPIO_Init+0x166>
 8003078:	e766      	b.n	8002f48 <HAL_GPIO_Init+0x34>
        temp = GPIOx->AFR[position >> 3u];
 800307a:	08dd      	lsrs	r5, r3, #3
 800307c:	00ad      	lsls	r5, r5, #2
 800307e:	46ac      	mov	ip, r5
 8003080:	4484      	add	ip, r0
 8003082:	4665      	mov	r5, ip
 8003084:	6a2f      	ldr	r7, [r5, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003086:	2507      	movs	r5, #7
 8003088:	401d      	ands	r5, r3
 800308a:	00ad      	lsls	r5, r5, #2
 800308c:	46a8      	mov	r8, r5
        temp = GPIOx->AFR[position >> 3u];
 800308e:	9703      	str	r7, [sp, #12]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003090:	250f      	movs	r5, #15
 8003092:	4647      	mov	r7, r8
 8003094:	40bd      	lsls	r5, r7
 8003096:	9f03      	ldr	r7, [sp, #12]
 8003098:	43af      	bics	r7, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800309a:	4655      	mov	r5, sl
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800309c:	9703      	str	r7, [sp, #12]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800309e:	4647      	mov	r7, r8
 80030a0:	692d      	ldr	r5, [r5, #16]
 80030a2:	40bd      	lsls	r5, r7
 80030a4:	9f03      	ldr	r7, [sp, #12]
 80030a6:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 80030a8:	4665      	mov	r5, ip
 80030aa:	622f      	str	r7, [r5, #32]
 80030ac:	e74c      	b.n	8002f48 <HAL_GPIO_Init+0x34>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030ae:	2503      	movs	r5, #3
 80030b0:	4095      	lsls	r5, r2
 80030b2:	43ed      	mvns	r5, r5
 80030b4:	9502      	str	r5, [sp, #8]
 80030b6:	e7d0      	b.n	800305a <HAL_GPIO_Init+0x146>
          temp |= iocurrent;
 80030b8:	9c01      	ldr	r4, [sp, #4]
 80030ba:	432c      	orrs	r4, r5
 80030bc:	0025      	movs	r5, r4
 80030be:	e798      	b.n	8002ff2 <HAL_GPIO_Init+0xde>
          temp |= iocurrent;
 80030c0:	9f01      	ldr	r7, [sp, #4]
 80030c2:	433d      	orrs	r5, r7
 80030c4:	e78f      	b.n	8002fe6 <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80030c6:	9f01      	ldr	r7, [sp, #4]
 80030c8:	433d      	orrs	r5, r7
 80030ca:	e786      	b.n	8002fda <HAL_GPIO_Init+0xc6>
          temp |= iocurrent;
 80030cc:	9f01      	ldr	r7, [sp, #4]
 80030ce:	433d      	orrs	r5, r7
 80030d0:	e77d      	b.n	8002fce <HAL_GPIO_Init+0xba>
  } 
}
 80030d2:	b007      	add	sp, #28
 80030d4:	bcf0      	pop	{r4, r5, r6, r7}
 80030d6:	46bb      	mov	fp, r7
 80030d8:	46b2      	mov	sl, r6
 80030da:	46a9      	mov	r9, r5
 80030dc:	46a0      	mov	r8, r4
 80030de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80030e0:	4667      	mov	r7, ip
 80030e2:	2601      	movs	r6, #1
 80030e4:	40be      	lsls	r6, r7
 80030e6:	464f      	mov	r7, r9
 80030e8:	4337      	orrs	r7, r6
 80030ea:	46b9      	mov	r9, r7
 80030ec:	e764      	b.n	8002fb8 <HAL_GPIO_Init+0xa4>
 80030ee:	4667      	mov	r7, ip
 80030f0:	2602      	movs	r6, #2
 80030f2:	40be      	lsls	r6, r7
 80030f4:	464f      	mov	r7, r9
 80030f6:	4337      	orrs	r7, r6
 80030f8:	46b9      	mov	r9, r7
 80030fa:	e75d      	b.n	8002fb8 <HAL_GPIO_Init+0xa4>
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010000 	.word	0x40010000
 8003104:	48000400 	.word	0x48000400
 8003108:	48000800 	.word	0x48000800
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003110:	2a00      	cmp	r2, #0
 8003112:	d001      	beq.n	8003118 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003114:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003116:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003118:	6281      	str	r1, [r0, #40]	; 0x28
}
 800311a:	e7fc      	b.n	8003116 <HAL_GPIO_WritePin+0x6>

0800311c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800311c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311e:	46ce      	mov	lr, r9
 8003120:	4647      	mov	r7, r8
 8003122:	b580      	push	{r7, lr}
 8003124:	0004      	movs	r4, r0
 8003126:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003128:	2800      	cmp	r0, #0
 800312a:	d100      	bne.n	800312e <HAL_RCC_OscConfig+0x12>
 800312c:	e0ee      	b.n	800330c <HAL_RCC_OscConfig+0x1f0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800312e:	6803      	ldr	r3, [r0, #0]
 8003130:	07da      	lsls	r2, r3, #31
 8003132:	d535      	bpl.n	80031a0 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003134:	210c      	movs	r1, #12
 8003136:	48c3      	ldr	r0, [pc, #780]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003138:	6842      	ldr	r2, [r0, #4]
 800313a:	400a      	ands	r2, r1
 800313c:	2a04      	cmp	r2, #4
 800313e:	d100      	bne.n	8003142 <HAL_RCC_OscConfig+0x26>
 8003140:	e101      	b.n	8003346 <HAL_RCC_OscConfig+0x22a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003142:	6842      	ldr	r2, [r0, #4]
 8003144:	4011      	ands	r1, r2
 8003146:	2908      	cmp	r1, #8
 8003148:	d100      	bne.n	800314c <HAL_RCC_OscConfig+0x30>
 800314a:	e0f8      	b.n	800333e <HAL_RCC_OscConfig+0x222>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800314c:	6863      	ldr	r3, [r4, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d00f      	beq.n	8003172 <HAL_RCC_OscConfig+0x56>
 8003152:	2b00      	cmp	r3, #0
 8003154:	d100      	bne.n	8003158 <HAL_RCC_OscConfig+0x3c>
 8003156:	e11e      	b.n	8003396 <HAL_RCC_OscConfig+0x27a>
 8003158:	2b05      	cmp	r3, #5
 800315a:	d100      	bne.n	800315e <HAL_RCC_OscConfig+0x42>
 800315c:	e1a7      	b.n	80034ae <HAL_RCC_OscConfig+0x392>
 800315e:	4bb9      	ldr	r3, [pc, #740]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003160:	49b9      	ldr	r1, [pc, #740]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	49b8      	ldr	r1, [pc, #736]	; (800344c <HAL_RCC_OscConfig+0x330>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e005      	b.n	800317e <HAL_RCC_OscConfig+0x62>
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	4ab3      	ldr	r2, [pc, #716]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003176:	025b      	lsls	r3, r3, #9
 8003178:	6811      	ldr	r1, [r2, #0]
 800317a:	430b      	orrs	r3, r1
 800317c:	6013      	str	r3, [r2, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7ff fcf5 	bl	8002b6c <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8003184:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003186:	4faf      	ldr	r7, [pc, #700]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003188:	02b6      	lsls	r6, r6, #10
 800318a:	e005      	b.n	8003198 <HAL_RCC_OscConfig+0x7c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff fcee 	bl	8002b6c <HAL_GetTick>
 8003190:	1b40      	subs	r0, r0, r5
 8003192:	2864      	cmp	r0, #100	; 0x64
 8003194:	d900      	bls.n	8003198 <HAL_RCC_OscConfig+0x7c>
 8003196:	e0fc      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	4233      	tst	r3, r6
 800319c:	d0f6      	beq.n	800318c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	079a      	lsls	r2, r3, #30
 80031a2:	d529      	bpl.n	80031f8 <HAL_RCC_OscConfig+0xdc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80031a4:	220c      	movs	r2, #12
 80031a6:	49a7      	ldr	r1, [pc, #668]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 80031a8:	6848      	ldr	r0, [r1, #4]
 80031aa:	4202      	tst	r2, r0
 80031ac:	d100      	bne.n	80031b0 <HAL_RCC_OscConfig+0x94>
 80031ae:	e0a6      	b.n	80032fe <HAL_RCC_OscConfig+0x1e2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80031b0:	6848      	ldr	r0, [r1, #4]
 80031b2:	4002      	ands	r2, r0
 80031b4:	2a08      	cmp	r2, #8
 80031b6:	d100      	bne.n	80031ba <HAL_RCC_OscConfig+0x9e>
 80031b8:	e09d      	b.n	80032f6 <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ba:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031bc:	4da1      	ldr	r5, [pc, #644]	; (8003444 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d100      	bne.n	80031c4 <HAL_RCC_OscConfig+0xa8>
 80031c2:	e11f      	b.n	8003404 <HAL_RCC_OscConfig+0x2e8>
        __HAL_RCC_HSI_ENABLE();
 80031c4:	2201      	movs	r2, #1
 80031c6:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80031ca:	4313      	orrs	r3, r2
 80031cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031ce:	f7ff fccd 	bl	8002b6c <HAL_GetTick>
 80031d2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e005      	b.n	80031e2 <HAL_RCC_OscConfig+0xc6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d6:	f7ff fcc9 	bl	8002b6c <HAL_GetTick>
 80031da:	1b80      	subs	r0, r0, r6
 80031dc:	2802      	cmp	r0, #2
 80031de:	d900      	bls.n	80031e2 <HAL_RCC_OscConfig+0xc6>
 80031e0:	e0d7      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e2:	682b      	ldr	r3, [r5, #0]
 80031e4:	421f      	tst	r7, r3
 80031e6:	d0f6      	beq.n	80031d6 <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	21f8      	movs	r1, #248	; 0xf8
 80031ea:	682a      	ldr	r2, [r5, #0]
 80031ec:	6923      	ldr	r3, [r4, #16]
 80031ee:	438a      	bics	r2, r1
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4313      	orrs	r3, r2
 80031f4:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	6823      	ldr	r3, [r4, #0]
 80031f8:	071a      	lsls	r2, r3, #28
 80031fa:	d42d      	bmi.n	8003258 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031fc:	075a      	lsls	r2, r3, #29
 80031fe:	d544      	bpl.n	800328a <HAL_RCC_OscConfig+0x16e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003200:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003202:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003204:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003206:	0552      	lsls	r2, r2, #21
 8003208:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800320a:	4681      	mov	r9, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800320c:	4211      	tst	r1, r2
 800320e:	d108      	bne.n	8003222 <HAL_RCC_OscConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003210:	69d9      	ldr	r1, [r3, #28]
 8003212:	4311      	orrs	r1, r2
 8003214:	61d9      	str	r1, [r3, #28]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4013      	ands	r3, r2
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800321e:	2301      	movs	r3, #1
 8003220:	4699      	mov	r9, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003222:	2780      	movs	r7, #128	; 0x80
 8003224:	4e8a      	ldr	r6, [pc, #552]	; (8003450 <HAL_RCC_OscConfig+0x334>)
 8003226:	007f      	lsls	r7, r7, #1
 8003228:	6833      	ldr	r3, [r6, #0]
 800322a:	423b      	tst	r3, r7
 800322c:	d100      	bne.n	8003230 <HAL_RCC_OscConfig+0x114>
 800322e:	e094      	b.n	800335a <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003230:	68a3      	ldr	r3, [r4, #8]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d100      	bne.n	8003238 <HAL_RCC_OscConfig+0x11c>
 8003236:	e0f8      	b.n	800342a <HAL_RCC_OscConfig+0x30e>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d100      	bne.n	800323e <HAL_RCC_OscConfig+0x122>
 800323c:	e0c4      	b.n	80033c8 <HAL_RCC_OscConfig+0x2ac>
 800323e:	2b05      	cmp	r3, #5
 8003240:	d100      	bne.n	8003244 <HAL_RCC_OscConfig+0x128>
 8003242:	e140      	b.n	80034c6 <HAL_RCC_OscConfig+0x3aa>
 8003244:	2101      	movs	r1, #1
 8003246:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003248:	6a1a      	ldr	r2, [r3, #32]
 800324a:	438a      	bics	r2, r1
 800324c:	621a      	str	r2, [r3, #32]
 800324e:	6a1a      	ldr	r2, [r3, #32]
 8003250:	3103      	adds	r1, #3
 8003252:	438a      	bics	r2, r1
 8003254:	621a      	str	r2, [r3, #32]
 8003256:	e0ec      	b.n	8003432 <HAL_RCC_OscConfig+0x316>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003258:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 800325a:	4d7a      	ldr	r5, [pc, #488]	; (8003444 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800325c:	2b00      	cmp	r3, #0
 800325e:	d05b      	beq.n	8003318 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_LSI_ENABLE();
 8003260:	2201      	movs	r2, #1
 8003262:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003264:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003266:	4313      	orrs	r3, r2
 8003268:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800326a:	f7ff fc7f 	bl	8002b6c <HAL_GetTick>
 800326e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003270:	e005      	b.n	800327e <HAL_RCC_OscConfig+0x162>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003272:	f7ff fc7b 	bl	8002b6c <HAL_GetTick>
 8003276:	1b80      	subs	r0, r0, r6
 8003278:	2802      	cmp	r0, #2
 800327a:	d900      	bls.n	800327e <HAL_RCC_OscConfig+0x162>
 800327c:	e089      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003280:	421f      	tst	r7, r3
 8003282:	d0f6      	beq.n	8003272 <HAL_RCC_OscConfig+0x156>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	075a      	lsls	r2, r3, #29
 8003288:	d4ba      	bmi.n	8003200 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800328a:	06db      	lsls	r3, r3, #27
 800328c:	d512      	bpl.n	80032b4 <HAL_RCC_OscConfig+0x198>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800328e:	6963      	ldr	r3, [r4, #20]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d100      	bne.n	8003296 <HAL_RCC_OscConfig+0x17a>
 8003294:	e13d      	b.n	8003512 <HAL_RCC_OscConfig+0x3f6>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003296:	3305      	adds	r3, #5
 8003298:	d000      	beq.n	800329c <HAL_RCC_OscConfig+0x180>
 800329a:	e0e9      	b.n	8003470 <HAL_RCC_OscConfig+0x354>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800329c:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800329e:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 80032a0:	4a68      	ldr	r2, [pc, #416]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 80032a2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80032a4:	438b      	bics	r3, r1
 80032a6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80032a8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80032aa:	69a3      	ldr	r3, [r4, #24]
 80032ac:	4381      	bics	r1, r0
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b4:	6a23      	ldr	r3, [r4, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d01b      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ba:	220c      	movs	r2, #12
 80032bc:	4d61      	ldr	r5, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 80032be:	6869      	ldr	r1, [r5, #4]
 80032c0:	400a      	ands	r2, r1
 80032c2:	2a08      	cmp	r2, #8
 80032c4:	d100      	bne.n	80032c8 <HAL_RCC_OscConfig+0x1ac>
 80032c6:	e108      	b.n	80034da <HAL_RCC_OscConfig+0x3be>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d100      	bne.n	80032ce <HAL_RCC_OscConfig+0x1b2>
 80032cc:	e13f      	b.n	800354e <HAL_RCC_OscConfig+0x432>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ce:	682b      	ldr	r3, [r5, #0]
 80032d0:	4a60      	ldr	r2, [pc, #384]	; (8003454 <HAL_RCC_OscConfig+0x338>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80032d4:	4013      	ands	r3, r2
 80032d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032d8:	f7ff fc48 	bl	8002b6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032dc:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80032de:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e0:	e004      	b.n	80032ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e2:	f7ff fc43 	bl	8002b6c <HAL_GetTick>
 80032e6:	1b00      	subs	r0, r0, r4
 80032e8:	2802      	cmp	r0, #2
 80032ea:	d852      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ec:	682b      	ldr	r3, [r5, #0]
 80032ee:	4233      	tst	r3, r6
 80032f0:	d1f7      	bne.n	80032e2 <HAL_RCC_OscConfig+0x1c6>
        }
      }
    }
  }

  return HAL_OK;
 80032f2:	2000      	movs	r0, #0
 80032f4:	e00b      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032f6:	684a      	ldr	r2, [r1, #4]
 80032f8:	03d2      	lsls	r2, r2, #15
 80032fa:	d500      	bpl.n	80032fe <HAL_RCC_OscConfig+0x1e2>
 80032fc:	e75d      	b.n	80031ba <HAL_RCC_OscConfig+0x9e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4a51      	ldr	r2, [pc, #324]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	0792      	lsls	r2, r2, #30
 8003304:	d539      	bpl.n	800337a <HAL_RCC_OscConfig+0x25e>
 8003306:	68e2      	ldr	r2, [r4, #12]
 8003308:	2a01      	cmp	r2, #1
 800330a:	d036      	beq.n	800337a <HAL_RCC_OscConfig+0x25e>
        return HAL_ERROR;
 800330c:	2001      	movs	r0, #1
}
 800330e:	b003      	add	sp, #12
 8003310:	bcc0      	pop	{r6, r7}
 8003312:	46b9      	mov	r9, r7
 8003314:	46b0      	mov	r8, r6
 8003316:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_LSI_DISABLE();
 8003318:	2201      	movs	r2, #1
 800331a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800331c:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800331e:	4393      	bics	r3, r2
 8003320:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8003322:	f7ff fc23 	bl	8002b6c <HAL_GetTick>
 8003326:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	e004      	b.n	8003334 <HAL_RCC_OscConfig+0x218>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332a:	f7ff fc1f 	bl	8002b6c <HAL_GetTick>
 800332e:	1b80      	subs	r0, r0, r6
 8003330:	2802      	cmp	r0, #2
 8003332:	d82e      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003334:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003336:	421f      	tst	r7, r3
 8003338:	d1f7      	bne.n	800332a <HAL_RCC_OscConfig+0x20e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800333a:	6823      	ldr	r3, [r4, #0]
 800333c:	e7a3      	b.n	8003286 <HAL_RCC_OscConfig+0x16a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800333e:	6842      	ldr	r2, [r0, #4]
 8003340:	03d2      	lsls	r2, r2, #15
 8003342:	d400      	bmi.n	8003346 <HAL_RCC_OscConfig+0x22a>
 8003344:	e702      	b.n	800314c <HAL_RCC_OscConfig+0x30>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	4a3f      	ldr	r2, [pc, #252]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	0392      	lsls	r2, r2, #14
 800334c:	d400      	bmi.n	8003350 <HAL_RCC_OscConfig+0x234>
 800334e:	e727      	b.n	80031a0 <HAL_RCC_OscConfig+0x84>
 8003350:	6862      	ldr	r2, [r4, #4]
 8003352:	2a00      	cmp	r2, #0
 8003354:	d000      	beq.n	8003358 <HAL_RCC_OscConfig+0x23c>
 8003356:	e723      	b.n	80031a0 <HAL_RCC_OscConfig+0x84>
 8003358:	e7d8      	b.n	800330c <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335a:	6833      	ldr	r3, [r6, #0]
 800335c:	433b      	orrs	r3, r7
 800335e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003360:	f7ff fc04 	bl	8002b6c <HAL_GetTick>
 8003364:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003366:	e004      	b.n	8003372 <HAL_RCC_OscConfig+0x256>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7ff fc00 	bl	8002b6c <HAL_GetTick>
 800336c:	1b40      	subs	r0, r0, r5
 800336e:	2864      	cmp	r0, #100	; 0x64
 8003370:	d80f      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003372:	6833      	ldr	r3, [r6, #0]
 8003374:	423b      	tst	r3, r7
 8003376:	d0f7      	beq.n	8003368 <HAL_RCC_OscConfig+0x24c>
 8003378:	e75a      	b.n	8003230 <HAL_RCC_OscConfig+0x114>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337a:	25f8      	movs	r5, #248	; 0xf8
 800337c:	4831      	ldr	r0, [pc, #196]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 800337e:	6922      	ldr	r2, [r4, #16]
 8003380:	6801      	ldr	r1, [r0, #0]
 8003382:	00d2      	lsls	r2, r2, #3
 8003384:	43a9      	bics	r1, r5
 8003386:	430a      	orrs	r2, r1
 8003388:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338a:	071a      	lsls	r2, r3, #28
 800338c:	d400      	bmi.n	8003390 <HAL_RCC_OscConfig+0x274>
 800338e:	e735      	b.n	80031fc <HAL_RCC_OscConfig+0xe0>
 8003390:	e762      	b.n	8003258 <HAL_RCC_OscConfig+0x13c>
            return HAL_TIMEOUT;
 8003392:	2003      	movs	r0, #3
 8003394:	e7bb      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003396:	4d2b      	ldr	r5, [pc, #172]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 8003398:	4a2b      	ldr	r2, [pc, #172]	; (8003448 <HAL_RCC_OscConfig+0x32c>)
 800339a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800339c:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	4013      	ands	r3, r2
 80033a0:	602b      	str	r3, [r5, #0]
 80033a2:	682b      	ldr	r3, [r5, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a6:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a8:	4013      	ands	r3, r2
 80033aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033ac:	f7ff fbde 	bl	8002b6c <HAL_GetTick>
 80033b0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b2:	e004      	b.n	80033be <HAL_RCC_OscConfig+0x2a2>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b4:	f7ff fbda 	bl	8002b6c <HAL_GetTick>
 80033b8:	1b80      	subs	r0, r0, r6
 80033ba:	2864      	cmp	r0, #100	; 0x64
 80033bc:	d8e9      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	682b      	ldr	r3, [r5, #0]
 80033c0:	423b      	tst	r3, r7
 80033c2:	d1f7      	bne.n	80033b4 <HAL_RCC_OscConfig+0x298>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	e6eb      	b.n	80031a0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c8:	2201      	movs	r2, #1
 80033ca:	4e1e      	ldr	r6, [pc, #120]	; (8003444 <HAL_RCC_OscConfig+0x328>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	4d22      	ldr	r5, [pc, #136]	; (8003458 <HAL_RCC_OscConfig+0x33c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ce:	6a33      	ldr	r3, [r6, #32]
 80033d0:	4393      	bics	r3, r2
 80033d2:	6233      	str	r3, [r6, #32]
 80033d4:	6a33      	ldr	r3, [r6, #32]
 80033d6:	3203      	adds	r2, #3
 80033d8:	4393      	bics	r3, r2
 80033da:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 80033dc:	f7ff fbc6 	bl	8002b6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e0:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 80033e2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4698      	mov	r8, r3
 80033e6:	e004      	b.n	80033f2 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e8:	f7ff fbc0 	bl	8002b6c <HAL_GetTick>
 80033ec:	1bc0      	subs	r0, r0, r7
 80033ee:	42a8      	cmp	r0, r5
 80033f0:	d8cf      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f2:	4642      	mov	r2, r8
 80033f4:	6a33      	ldr	r3, [r6, #32]
 80033f6:	421a      	tst	r2, r3
 80033f8:	d1f6      	bne.n	80033e8 <HAL_RCC_OscConfig+0x2cc>
    if(pwrclkchanged == SET)
 80033fa:	464b      	mov	r3, r9
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d04f      	beq.n	80034a0 <HAL_RCC_OscConfig+0x384>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	e742      	b.n	800328a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_HSI_DISABLE();
 8003404:	2201      	movs	r2, #1
 8003406:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003408:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800340a:	4393      	bics	r3, r2
 800340c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800340e:	f7ff fbad 	bl	8002b6c <HAL_GetTick>
 8003412:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003414:	e004      	b.n	8003420 <HAL_RCC_OscConfig+0x304>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003416:	f7ff fba9 	bl	8002b6c <HAL_GetTick>
 800341a:	1b80      	subs	r0, r0, r6
 800341c:	2802      	cmp	r0, #2
 800341e:	d8b8      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	421f      	tst	r7, r3
 8003424:	d1f7      	bne.n	8003416 <HAL_RCC_OscConfig+0x2fa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	e6e6      	b.n	80031f8 <HAL_RCC_OscConfig+0xdc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800342a:	4906      	ldr	r1, [pc, #24]	; (8003444 <HAL_RCC_OscConfig+0x328>)
 800342c:	6a0a      	ldr	r2, [r1, #32]
 800342e:	4313      	orrs	r3, r2
 8003430:	620b      	str	r3, [r1, #32]
      tickstart = HAL_GetTick();
 8003432:	f7ff fb9b 	bl	8002b6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003436:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8003438:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343a:	4698      	mov	r8, r3
 800343c:	2702      	movs	r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	4d06      	ldr	r5, [pc, #24]	; (8003458 <HAL_RCC_OscConfig+0x33c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e011      	b.n	8003466 <HAL_RCC_OscConfig+0x34a>
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40021000 	.word	0x40021000
 8003448:	fffeffff 	.word	0xfffeffff
 800344c:	fffbffff 	.word	0xfffbffff
 8003450:	40007000 	.word	0x40007000
 8003454:	feffffff 	.word	0xfeffffff
 8003458:	00001388 	.word	0x00001388
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7ff fb86 	bl	8002b6c <HAL_GetTick>
 8003460:	1b80      	subs	r0, r0, r6
 8003462:	42a8      	cmp	r0, r5
 8003464:	d895      	bhi.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	4643      	mov	r3, r8
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	421f      	tst	r7, r3
 800346c:	d0f6      	beq.n	800345c <HAL_RCC_OscConfig+0x340>
 800346e:	e7c4      	b.n	80033fa <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003470:	2204      	movs	r2, #4
 8003472:	4d53      	ldr	r5, [pc, #332]	; (80035c0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003474:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003476:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003478:	4313      	orrs	r3, r2
 800347a:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 800347c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800347e:	3a03      	subs	r2, #3
 8003480:	4393      	bics	r3, r2
 8003482:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003484:	f7ff fb72 	bl	8002b6c <HAL_GetTick>
 8003488:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800348a:	e005      	b.n	8003498 <HAL_RCC_OscConfig+0x37c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800348c:	f7ff fb6e 	bl	8002b6c <HAL_GetTick>
 8003490:	1b80      	subs	r0, r0, r6
 8003492:	2802      	cmp	r0, #2
 8003494:	d900      	bls.n	8003498 <HAL_RCC_OscConfig+0x37c>
 8003496:	e77c      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003498:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800349a:	421f      	tst	r7, r3
 800349c:	d1f6      	bne.n	800348c <HAL_RCC_OscConfig+0x370>
 800349e:	e709      	b.n	80032b4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a0:	4a47      	ldr	r2, [pc, #284]	; (80035c0 <HAL_RCC_OscConfig+0x4a4>)
 80034a2:	4948      	ldr	r1, [pc, #288]	; (80035c4 <HAL_RCC_OscConfig+0x4a8>)
 80034a4:	69d3      	ldr	r3, [r2, #28]
 80034a6:	400b      	ands	r3, r1
 80034a8:	61d3      	str	r3, [r2, #28]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80034aa:	6823      	ldr	r3, [r4, #0]
 80034ac:	e6ed      	b.n	800328a <HAL_RCC_OscConfig+0x16e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x4a4>)
 80034b2:	02d2      	lsls	r2, r2, #11
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	6819      	ldr	r1, [r3, #0]
 80034be:	0252      	lsls	r2, r2, #9
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e65b      	b.n	800317e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c6:	2104      	movs	r1, #4
 80034c8:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <HAL_RCC_OscConfig+0x4a4>)
 80034ca:	6a1a      	ldr	r2, [r3, #32]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	621a      	str	r2, [r3, #32]
 80034d0:	6a1a      	ldr	r2, [r3, #32]
 80034d2:	3903      	subs	r1, #3
 80034d4:	430a      	orrs	r2, r1
 80034d6:	621a      	str	r2, [r3, #32]
 80034d8:	e7ab      	b.n	8003432 <HAL_RCC_OscConfig+0x316>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d100      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3c4>
 80034de:	e715      	b.n	800330c <HAL_RCC_OscConfig+0x1f0>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e0:	2380      	movs	r3, #128	; 0x80
        pll_config  = RCC->CFGR;
 80034e2:	686a      	ldr	r2, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80034e6:	025b      	lsls	r3, r3, #9
        return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
        pll_config2 = RCC->CFGR2;
 80034ea:	6aed      	ldr	r5, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	4013      	ands	r3, r2
 80034ee:	428b      	cmp	r3, r1
 80034f0:	d000      	beq.n	80034f4 <HAL_RCC_OscConfig+0x3d8>
 80034f2:	e70c      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034f4:	230f      	movs	r3, #15
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034f8:	402b      	ands	r3, r5
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	428b      	cmp	r3, r1
 80034fc:	d000      	beq.n	8003500 <HAL_RCC_OscConfig+0x3e4>
 80034fe:	e706      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003500:	23f0      	movs	r3, #240	; 0xf0
 8003502:	039b      	lsls	r3, r3, #14
 8003504:	401a      	ands	r2, r3
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003508:	1ad2      	subs	r2, r2, r3
 800350a:	1e53      	subs	r3, r2, #1
 800350c:	419a      	sbcs	r2, r3
    return HAL_ERROR;
 800350e:	b2d0      	uxtb	r0, r2
 8003510:	e6fd      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSI14ADC_DISABLE();
 8003512:	2104      	movs	r1, #4
 8003514:	4d2a      	ldr	r5, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x4a4>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003516:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003518:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800351a:	430a      	orrs	r2, r1
 800351c:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 800351e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003520:	4313      	orrs	r3, r2
 8003522:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8003524:	f7ff fb22 	bl	8002b6c <HAL_GetTick>
 8003528:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800352a:	e005      	b.n	8003538 <HAL_RCC_OscConfig+0x41c>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800352c:	f7ff fb1e 	bl	8002b6c <HAL_GetTick>
 8003530:	1b80      	subs	r0, r0, r6
 8003532:	2802      	cmp	r0, #2
 8003534:	d900      	bls.n	8003538 <HAL_RCC_OscConfig+0x41c>
 8003536:	e72c      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003538:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800353a:	421f      	tst	r7, r3
 800353c:	d0f6      	beq.n	800352c <HAL_RCC_OscConfig+0x410>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800353e:	21f8      	movs	r1, #248	; 0xf8
 8003540:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003542:	69a3      	ldr	r3, [r4, #24]
 8003544:	438a      	bics	r2, r1
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4313      	orrs	r3, r2
 800354a:	636b      	str	r3, [r5, #52]	; 0x34
 800354c:	e6b2      	b.n	80032b4 <HAL_RCC_OscConfig+0x198>
        __HAL_RCC_PLL_DISABLE();
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_RCC_OscConfig+0x4ac>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003552:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003554:	4013      	ands	r3, r2
 8003556:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003558:	f7ff fb08 	bl	8002b6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800355c:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 800355e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003560:	e005      	b.n	800356e <HAL_RCC_OscConfig+0x452>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7ff fb03 	bl	8002b6c <HAL_GetTick>
 8003566:	1b80      	subs	r0, r0, r6
 8003568:	2802      	cmp	r0, #2
 800356a:	d900      	bls.n	800356e <HAL_RCC_OscConfig+0x452>
 800356c:	e711      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	423b      	tst	r3, r7
 8003572:	d1f6      	bne.n	8003562 <HAL_RCC_OscConfig+0x446>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003574:	220f      	movs	r2, #15
 8003576:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003578:	4e11      	ldr	r6, [pc, #68]	; (80035c0 <HAL_RCC_OscConfig+0x4a4>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800357a:	4393      	bics	r3, r2
 800357c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800357e:	4313      	orrs	r3, r2
 8003580:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003582:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003584:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003586:	686a      	ldr	r2, [r5, #4]
 8003588:	430b      	orrs	r3, r1
 800358a:	4910      	ldr	r1, [pc, #64]	; (80035cc <HAL_RCC_OscConfig+0x4b0>)
 800358c:	400a      	ands	r2, r1
 800358e:	4313      	orrs	r3, r2
 8003590:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	682a      	ldr	r2, [r5, #0]
 8003596:	045b      	lsls	r3, r3, #17
 8003598:	4313      	orrs	r3, r2
 800359a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800359c:	f7ff fae6 	bl	8002b6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80035a2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035a4:	04ad      	lsls	r5, r5, #18
 80035a6:	e005      	b.n	80035b4 <HAL_RCC_OscConfig+0x498>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a8:	f7ff fae0 	bl	8002b6c <HAL_GetTick>
 80035ac:	1b00      	subs	r0, r0, r4
 80035ae:	2802      	cmp	r0, #2
 80035b0:	d900      	bls.n	80035b4 <HAL_RCC_OscConfig+0x498>
 80035b2:	e6ee      	b.n	8003392 <HAL_RCC_OscConfig+0x276>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b4:	6833      	ldr	r3, [r6, #0]
 80035b6:	422b      	tst	r3, r5
 80035b8:	d0f6      	beq.n	80035a8 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 80035ba:	2000      	movs	r0, #0
 80035bc:	e6a7      	b.n	800330e <HAL_RCC_OscConfig+0x1f2>
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	40021000 	.word	0x40021000
 80035c4:	efffffff 	.word	0xefffffff
 80035c8:	feffffff 	.word	0xfeffffff
 80035cc:	ffc2ffff 	.word	0xffc2ffff

080035d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	46ce      	mov	lr, r9
 80035d4:	4647      	mov	r7, r8
 80035d6:	b580      	push	{r7, lr}
 80035d8:	0004      	movs	r4, r0
 80035da:	000d      	movs	r5, r1
 80035dc:	b089      	sub	sp, #36	; 0x24
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035de:	2800      	cmp	r0, #0
 80035e0:	d00d      	beq.n	80035fe <HAL_RCC_ClockConfig+0x2e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035e2:	2301      	movs	r3, #1
 80035e4:	4950      	ldr	r1, [pc, #320]	; (8003728 <HAL_RCC_ClockConfig+0x158>)
 80035e6:	680a      	ldr	r2, [r1, #0]
 80035e8:	401a      	ands	r2, r3
 80035ea:	42aa      	cmp	r2, r5
 80035ec:	d20d      	bcs.n	800360a <HAL_RCC_ClockConfig+0x3a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035ee:	680a      	ldr	r2, [r1, #0]
 80035f0:	439a      	bics	r2, r3
 80035f2:	432a      	orrs	r2, r5
 80035f4:	600a      	str	r2, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	680a      	ldr	r2, [r1, #0]
 80035f8:	4013      	ands	r3, r2
 80035fa:	42ab      	cmp	r3, r5
 80035fc:	d005      	beq.n	800360a <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 80035fe:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8003600:	b009      	add	sp, #36	; 0x24
 8003602:	bcc0      	pop	{r6, r7}
 8003604:	46b9      	mov	r9, r7
 8003606:	46b0      	mov	r8, r6
 8003608:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	079a      	lsls	r2, r3, #30
 800360e:	d50e      	bpl.n	800362e <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003610:	075a      	lsls	r2, r3, #29
 8003612:	d505      	bpl.n	8003620 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003614:	22e0      	movs	r2, #224	; 0xe0
 8003616:	4945      	ldr	r1, [pc, #276]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
 8003618:	00d2      	lsls	r2, r2, #3
 800361a:	6848      	ldr	r0, [r1, #4]
 800361c:	4302      	orrs	r2, r0
 800361e:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003620:	20f0      	movs	r0, #240	; 0xf0
 8003622:	4942      	ldr	r1, [pc, #264]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
 8003624:	684a      	ldr	r2, [r1, #4]
 8003626:	4382      	bics	r2, r0
 8003628:	68a0      	ldr	r0, [r4, #8]
 800362a:	4302      	orrs	r2, r0
 800362c:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	07db      	lsls	r3, r3, #31
 8003630:	d522      	bpl.n	8003678 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003634:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003636:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003638:	2a01      	cmp	r2, #1
 800363a:	d067      	beq.n	800370c <HAL_RCC_ClockConfig+0x13c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363c:	2a02      	cmp	r2, #2
 800363e:	d062      	beq.n	8003706 <HAL_RCC_ClockConfig+0x136>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003640:	079b      	lsls	r3, r3, #30
 8003642:	d5dc      	bpl.n	80035fe <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003644:	2103      	movs	r1, #3
 8003646:	4e39      	ldr	r6, [pc, #228]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
 8003648:	6873      	ldr	r3, [r6, #4]
 800364a:	438b      	bics	r3, r1
 800364c:	4313      	orrs	r3, r2
 800364e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003650:	f7ff fa8c 	bl	8002b6c <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003654:	230c      	movs	r3, #12
 8003656:	4698      	mov	r8, r3
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003658:	4b35      	ldr	r3, [pc, #212]	; (8003730 <HAL_RCC_ClockConfig+0x160>)
    tickstart = HAL_GetTick();
 800365a:	0007      	movs	r7, r0
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	e004      	b.n	800366a <HAL_RCC_ClockConfig+0x9a>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003660:	f7ff fa84 	bl	8002b6c <HAL_GetTick>
 8003664:	1bc0      	subs	r0, r0, r7
 8003666:	4548      	cmp	r0, r9
 8003668:	d853      	bhi.n	8003712 <HAL_RCC_ClockConfig+0x142>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800366a:	4643      	mov	r3, r8
 800366c:	6872      	ldr	r2, [r6, #4]
 800366e:	401a      	ands	r2, r3
 8003670:	6863      	ldr	r3, [r4, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1f3      	bne.n	8003660 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	2101      	movs	r1, #1
 800367a:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <HAL_RCC_ClockConfig+0x158>)
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	400b      	ands	r3, r1
 8003680:	42ab      	cmp	r3, r5
 8003682:	d905      	bls.n	8003690 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003684:	6813      	ldr	r3, [r2, #0]
 8003686:	438b      	bics	r3, r1
 8003688:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	4219      	tst	r1, r3
 800368e:	d1b6      	bne.n	80035fe <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	075b      	lsls	r3, r3, #29
 8003694:	d506      	bpl.n	80036a4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003696:	4a25      	ldr	r2, [pc, #148]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
 8003698:	4926      	ldr	r1, [pc, #152]	; (8003734 <HAL_RCC_ClockConfig+0x164>)
 800369a:	6853      	ldr	r3, [r2, #4]
 800369c:	400b      	ands	r3, r1
 800369e:	68e1      	ldr	r1, [r4, #12]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036a4:	466a      	mov	r2, sp
 80036a6:	0011      	movs	r1, r2
 80036a8:	4b23      	ldr	r3, [pc, #140]	; (8003738 <HAL_RCC_ClockConfig+0x168>)
 80036aa:	cb31      	ldmia	r3!, {r0, r4, r5}
 80036ac:	c131      	stmia	r1!, {r0, r4, r5}
 80036ae:	681b      	ldr	r3, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036b0:	a804      	add	r0, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80036b2:	600b      	str	r3, [r1, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036b4:	0001      	movs	r1, r0
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <HAL_RCC_ClockConfig+0x16c>)
 80036b8:	cb70      	ldmia	r3!, {r4, r5, r6}
 80036ba:	c170      	stmia	r1!, {r4, r5, r6}
 80036bc:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80036be:	4c1b      	ldr	r4, [pc, #108]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80036c0:	600b      	str	r3, [r1, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c2:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80036c4:	6861      	ldr	r1, [r4, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80036c6:	400b      	ands	r3, r1
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d00e      	beq.n	80036ea <HAL_RCC_ClockConfig+0x11a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036cc:	481c      	ldr	r0, [pc, #112]	; (8003740 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_RCC_ClockConfig+0x15c>)
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <HAL_RCC_ClockConfig+0x174>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	491c      	ldr	r1, [pc, #112]	; (8003748 <HAL_RCC_ClockConfig+0x178>)
 80036d6:	061b      	lsls	r3, r3, #24
 80036d8:	0f1b      	lsrs	r3, r3, #28
 80036da:	5cd3      	ldrb	r3, [r2, r3]
 80036dc:	40d8      	lsrs	r0, r3
 80036de:	6008      	str	r0, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80036e0:	2002      	movs	r0, #2
 80036e2:	f7ff fa01 	bl	8002ae8 <HAL_InitTick>
  return HAL_OK;
 80036e6:	2000      	movs	r0, #0
 80036e8:	e78a      	b.n	8003600 <HAL_RCC_ClockConfig+0x30>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036ea:	260f      	movs	r6, #15
 80036ec:	0c8b      	lsrs	r3, r1, #18
 80036ee:	4033      	ands	r3, r6
 80036f0:	5cd5      	ldrb	r5, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036f4:	03c9      	lsls	r1, r1, #15
 80036f6:	d50e      	bpl.n	8003716 <HAL_RCC_ClockConfig+0x146>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036f8:	401e      	ands	r6, r3
 80036fa:	5d81      	ldrb	r1, [r0, r6]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036fc:	4810      	ldr	r0, [pc, #64]	; (8003740 <HAL_RCC_ClockConfig+0x170>)
 80036fe:	f7fc fd03 	bl	8000108 <__udivsi3>
 8003702:	4368      	muls	r0, r5
 8003704:	e7e3      	b.n	80036ce <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003706:	019b      	lsls	r3, r3, #6
 8003708:	d49c      	bmi.n	8003644 <HAL_RCC_ClockConfig+0x74>
 800370a:	e778      	b.n	80035fe <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370c:	039b      	lsls	r3, r3, #14
 800370e:	d499      	bmi.n	8003644 <HAL_RCC_ClockConfig+0x74>
 8003710:	e775      	b.n	80035fe <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8003712:	2003      	movs	r0, #3
 8003714:	e774      	b.n	8003600 <HAL_RCC_ClockConfig+0x30>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003716:	016b      	lsls	r3, r5, #5
 8003718:	1b5b      	subs	r3, r3, r5
 800371a:	0198      	lsls	r0, r3, #6
 800371c:	1ac0      	subs	r0, r0, r3
 800371e:	00c0      	lsls	r0, r0, #3
 8003720:	1940      	adds	r0, r0, r5
 8003722:	0200      	lsls	r0, r0, #8
 8003724:	e7d3      	b.n	80036ce <HAL_RCC_ClockConfig+0xfe>
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	40022000 	.word	0x40022000
 800372c:	40021000 	.word	0x40021000
 8003730:	00001388 	.word	0x00001388
 8003734:	fffff8ff 	.word	0xfffff8ff
 8003738:	08006d78 	.word	0x08006d78
 800373c:	08006d8c 	.word	0x08006d8c
 8003740:	007a1200 	.word	0x007a1200
 8003744:	08006d60 	.word	0x08006d60
 8003748:	20000714 	.word	0x20000714

0800374c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	4a03      	ldr	r2, [pc, #12]	; (800375c <HAL_RCC_EnableCSS+0x10>)
 8003750:	031b      	lsls	r3, r3, #12
 8003752:	6811      	ldr	r1, [r2, #0]
 8003754:	430b      	orrs	r3, r1
 8003756:	6013      	str	r3, [r2, #0]
}
 8003758:	4770      	bx	lr
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	40021000 	.word	0x40021000

08003760 <HAL_RCC_GetSysClockFreq>:
{
 8003760:	b570      	push	{r4, r5, r6, lr}
 8003762:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003764:	466a      	mov	r2, sp
 8003766:	0011      	movs	r1, r2
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x60>)
 800376a:	cb31      	ldmia	r3!, {r0, r4, r5}
 800376c:	c131      	stmia	r1!, {r0, r4, r5}
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	600b      	str	r3, [r1, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003772:	a904      	add	r1, sp, #16
 8003774:	0008      	movs	r0, r1
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003778:	cb70      	ldmia	r3!, {r4, r5, r6}
 800377a:	c070      	stmia	r0!, {r4, r5, r6}
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6003      	str	r3, [r0, #0]
  switch (tmpreg & RCC_CFGR_SWS)
 8003780:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8003782:	4811      	ldr	r0, [pc, #68]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x68>)
 8003784:	6844      	ldr	r4, [r0, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003786:	4023      	ands	r3, r4
 8003788:	2b08      	cmp	r3, #8
 800378a:	d002      	beq.n	8003792 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 800378c:	480f      	ldr	r0, [pc, #60]	; (80037cc <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800378e:	b008      	add	sp, #32
 8003790:	bd70      	pop	{r4, r5, r6, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003792:	260f      	movs	r6, #15
 8003794:	0ca3      	lsrs	r3, r4, #18
 8003796:	4033      	ands	r3, r6
 8003798:	5cd5      	ldrb	r5, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800379a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800379c:	03e4      	lsls	r4, r4, #15
 800379e:	d506      	bpl.n	80037ae <HAL_RCC_GetSysClockFreq+0x4e>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037a0:	401e      	ands	r6, r3
 80037a2:	5d89      	ldrb	r1, [r1, r6]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037a4:	4809      	ldr	r0, [pc, #36]	; (80037cc <HAL_RCC_GetSysClockFreq+0x6c>)
 80037a6:	f7fc fcaf 	bl	8000108 <__udivsi3>
 80037aa:	4368      	muls	r0, r5
 80037ac:	e7ef      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x2e>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80037ae:	016a      	lsls	r2, r5, #5
 80037b0:	1b52      	subs	r2, r2, r5
 80037b2:	0193      	lsls	r3, r2, #6
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	195b      	adds	r3, r3, r5
 80037ba:	0218      	lsls	r0, r3, #8
 80037bc:	e7e7      	b.n	800378e <HAL_RCC_GetSysClockFreq+0x2e>
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	08006d78 	.word	0x08006d78
 80037c4:	08006d8c 	.word	0x08006d8c
 80037c8:	40021000 	.word	0x40021000
 80037cc:	007a1200 	.word	0x007a1200

080037d0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
}
 80037d4:	4770      	bx	lr
 80037d6:	46c0      	nop			; (mov r8, r8)
 80037d8:	20000714 	.word	0x20000714

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	4905      	ldr	r1, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80037e4:	055b      	lsls	r3, r3, #21
 80037e6:	0f5b      	lsrs	r3, r3, #29
 80037e8:	5ccb      	ldrb	r3, [r1, r3]
 80037ea:	6810      	ldr	r0, [r2, #0]
 80037ec:	40d8      	lsrs	r0, r3
}    
 80037ee:	4770      	bx	lr
 80037f0:	40021000 	.word	0x40021000
 80037f4:	20000714 	.word	0x20000714
 80037f8:	08006d70 	.word	0x08006d70

080037fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fe:	46ce      	mov	lr, r9
 8003800:	4647      	mov	r7, r8
 8003802:	b580      	push	{r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003804:	6803      	ldr	r3, [r0, #0]
{
 8003806:	0004      	movs	r4, r0
 8003808:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800380a:	03da      	lsls	r2, r3, #15
 800380c:	d530      	bpl.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x74>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380e:	2280      	movs	r2, #128	; 0x80
 8003810:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003812:	0552      	lsls	r2, r2, #21
 8003814:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003816:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003818:	4211      	tst	r1, r2
 800381a:	d041      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	2680      	movs	r6, #128	; 0x80
 800381e:	4d41      	ldr	r5, [pc, #260]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8003820:	0076      	lsls	r6, r6, #1
 8003822:	682b      	ldr	r3, [r5, #0]
 8003824:	4233      	tst	r3, r6
 8003826:	d049      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003828:	4d3d      	ldr	r5, [pc, #244]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800382a:	23c0      	movs	r3, #192	; 0xc0
 800382c:	6a2a      	ldr	r2, [r5, #32]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	0010      	movs	r0, r2
 8003832:	4018      	ands	r0, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003834:	421a      	tst	r2, r3
 8003836:	d063      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003838:	6861      	ldr	r1, [r4, #4]
 800383a:	400b      	ands	r3, r1
 800383c:	4283      	cmp	r3, r0
 800383e:	d00e      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003840:	2080      	movs	r0, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003842:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003844:	6a2e      	ldr	r6, [r5, #32]
 8003846:	0240      	lsls	r0, r0, #9
 8003848:	4330      	orrs	r0, r6
 800384a:	6228      	str	r0, [r5, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800384c:	6a28      	ldr	r0, [r5, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384e:	4a36      	ldr	r2, [pc, #216]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003850:	4e36      	ldr	r6, [pc, #216]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x130>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003852:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003854:	4030      	ands	r0, r6
 8003856:	6228      	str	r0, [r5, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003858:	622a      	str	r2, [r5, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800385a:	07db      	lsls	r3, r3, #31
 800385c:	d43f      	bmi.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800385e:	4a30      	ldr	r2, [pc, #192]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003860:	4831      	ldr	r0, [pc, #196]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003862:	6a13      	ldr	r3, [r2, #32]
 8003864:	4003      	ands	r3, r0
 8003866:	430b      	orrs	r3, r1
 8003868:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800386a:	2f01      	cmp	r7, #1
 800386c:	d051      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x116>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800386e:	6823      	ldr	r3, [r4, #0]
 8003870:	07da      	lsls	r2, r3, #31
 8003872:	d506      	bpl.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003874:	2003      	movs	r0, #3
 8003876:	492a      	ldr	r1, [pc, #168]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003878:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800387a:	4382      	bics	r2, r0
 800387c:	68a0      	ldr	r0, [r4, #8]
 800387e:	4302      	orrs	r2, r0
 8003880:	630a      	str	r2, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003882:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003884:	069b      	lsls	r3, r3, #26
 8003886:	d506      	bpl.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003888:	2110      	movs	r1, #16
 800388a:	4a25      	ldr	r2, [pc, #148]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800388c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800388e:	438b      	bics	r3, r1
 8003890:	68e1      	ldr	r1, [r4, #12]
 8003892:	430b      	orrs	r3, r1
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
}
 8003896:	b003      	add	sp, #12
 8003898:	bcc0      	pop	{r6, r7}
 800389a:	46b9      	mov	r9, r7
 800389c:	46b0      	mov	r8, r6
 800389e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a0:	2680      	movs	r6, #128	; 0x80
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a2:	69d9      	ldr	r1, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a4:	4d1f      	ldr	r5, [pc, #124]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a6:	4311      	orrs	r1, r2
 80038a8:	61d9      	str	r1, [r3, #28]
 80038aa:	69db      	ldr	r3, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038ac:	0076      	lsls	r6, r6, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ae:	4013      	ands	r3, r2
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	682b      	ldr	r3, [r5, #0]
      pwrclkchanged = SET;
 80038b6:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b8:	4233      	tst	r3, r6
 80038ba:	d1b5      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	4333      	orrs	r3, r6
 80038c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80038c2:	f7ff f953 	bl	8002b6c <HAL_GetTick>
 80038c6:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	682b      	ldr	r3, [r5, #0]
 80038ca:	4233      	tst	r3, r6
 80038cc:	d1ac      	bne.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x2c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ce:	f7ff f94d 	bl	8002b6c <HAL_GetTick>
 80038d2:	4643      	mov	r3, r8
 80038d4:	1ac0      	subs	r0, r0, r3
 80038d6:	2864      	cmp	r0, #100	; 0x64
 80038d8:	d9f6      	bls.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80038da:	2003      	movs	r0, #3
 80038dc:	e7db      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        tickstart = HAL_GetTick();
 80038de:	f7ff f945 	bl	8002b6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e2:	2302      	movs	r3, #2
 80038e4:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	4b12      	ldr	r3, [pc, #72]	; (8003930 <HAL_RCCEx_PeriphCLKConfig+0x134>)
        tickstart = HAL_GetTick();
 80038e8:	0006      	movs	r6, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ea:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ec:	e004      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ee:	f7ff f93d 	bl	8002b6c <HAL_GetTick>
 80038f2:	1b80      	subs	r0, r0, r6
 80038f4:	4548      	cmp	r0, r9
 80038f6:	d8f0      	bhi.n	80038da <HAL_RCCEx_PeriphCLKConfig+0xde>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f8:	4642      	mov	r2, r8
 80038fa:	6a2b      	ldr	r3, [r5, #32]
 80038fc:	421a      	tst	r2, r3
 80038fe:	d0f6      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003902:	4809      	ldr	r0, [pc, #36]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003904:	6a13      	ldr	r3, [r2, #32]
 8003906:	6861      	ldr	r1, [r4, #4]
 8003908:	4003      	ands	r3, r0
 800390a:	430b      	orrs	r3, r1
 800390c:	6213      	str	r3, [r2, #32]
    if(pwrclkchanged == SET)
 800390e:	2f01      	cmp	r7, #1
 8003910:	d1ad      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003912:	69d3      	ldr	r3, [r2, #28]
 8003914:	4907      	ldr	r1, [pc, #28]	; (8003934 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8003916:	400b      	ands	r3, r1
 8003918:	61d3      	str	r3, [r2, #28]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	e7a8      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	40021000 	.word	0x40021000
 8003924:	40007000 	.word	0x40007000
 8003928:	fffffcff 	.word	0xfffffcff
 800392c:	fffeffff 	.word	0xfffeffff
 8003930:	00001388 	.word	0x00001388
 8003934:	efffffff 	.word	0xefffffff

08003938 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b510      	push	{r4, lr}
 800393a:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	d066      	beq.n	8003a0c <HAL_TIM_PWM_Init+0xd4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	233d      	movs	r3, #61	; 0x3d
 8003940:	5cc3      	ldrb	r3, [r0, r3]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	2b00      	cmp	r3, #0
 8003946:	d041      	beq.n	80039cc <HAL_TIM_PWM_Init+0x94>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	233d      	movs	r3, #61	; 0x3d
 800394a:	2202      	movs	r2, #2
 800394c:	54e2      	strb	r2, [r4, r3]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800394e:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	492f      	ldr	r1, [pc, #188]	; (8003a10 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 8003952:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003954:	428a      	cmp	r2, r1
 8003956:	d045      	beq.n	80039e4 <HAL_TIM_PWM_Init+0xac>
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	05c9      	lsls	r1, r1, #23
 800395c:	428a      	cmp	r2, r1
 800395e:	d02c      	beq.n	80039ba <HAL_TIM_PWM_Init+0x82>
 8003960:	492c      	ldr	r1, [pc, #176]	; (8003a14 <HAL_TIM_PWM_Init+0xdc>)
 8003962:	428a      	cmp	r2, r1
 8003964:	d029      	beq.n	80039ba <HAL_TIM_PWM_Init+0x82>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003966:	492c      	ldr	r1, [pc, #176]	; (8003a18 <HAL_TIM_PWM_Init+0xe0>)
 8003968:	428a      	cmp	r2, r1
 800396a:	d02a      	beq.n	80039c2 <HAL_TIM_PWM_Init+0x8a>
 800396c:	492b      	ldr	r1, [pc, #172]	; (8003a1c <HAL_TIM_PWM_Init+0xe4>)
 800396e:	428a      	cmp	r2, r1
 8003970:	d03c      	beq.n	80039ec <HAL_TIM_PWM_Init+0xb4>
 8003972:	492b      	ldr	r1, [pc, #172]	; (8003a20 <HAL_TIM_PWM_Init+0xe8>)
 8003974:	428a      	cmp	r2, r1
 8003976:	d039      	beq.n	80039ec <HAL_TIM_PWM_Init+0xb4>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	438b      	bics	r3, r1
 800397c:	69a1      	ldr	r1, [r4, #24]
 800397e:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8003980:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003982:	68e3      	ldr	r3, [r4, #12]
 8003984:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800398a:	2301      	movs	r3, #1
 800398c:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398e:	2246      	movs	r2, #70	; 0x46
  return HAL_OK;
 8003990:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003992:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003994:	3a08      	subs	r2, #8
 8003996:	54a3      	strb	r3, [r4, r2]
 8003998:	3201      	adds	r2, #1
 800399a:	54a3      	strb	r3, [r4, r2]
 800399c:	3201      	adds	r2, #1
 800399e:	54a3      	strb	r3, [r4, r2]
 80039a0:	3201      	adds	r2, #1
 80039a2:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	3201      	adds	r2, #1
 80039a6:	54a3      	strb	r3, [r4, r2]
 80039a8:	3201      	adds	r2, #1
 80039aa:	54a3      	strb	r3, [r4, r2]
 80039ac:	3201      	adds	r2, #1
 80039ae:	54a3      	strb	r3, [r4, r2]
 80039b0:	3201      	adds	r2, #1
 80039b2:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80039b4:	3a08      	subs	r2, #8
 80039b6:	54a3      	strb	r3, [r4, r2]
}
 80039b8:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039ba:	2170      	movs	r1, #112	; 0x70
 80039bc:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80039be:	68a1      	ldr	r1, [r4, #8]
 80039c0:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	4918      	ldr	r1, [pc, #96]	; (8003a24 <HAL_TIM_PWM_Init+0xec>)
 80039c4:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039c6:	6921      	ldr	r1, [r4, #16]
 80039c8:	430b      	orrs	r3, r1
 80039ca:	e7d5      	b.n	8003978 <HAL_TIM_PWM_Init+0x40>
    htim->Lock = HAL_UNLOCKED;
 80039cc:	333c      	adds	r3, #60	; 0x3c
 80039ce:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_PWM_MspInit(htim);
 80039d0:	f7fe fadc 	bl	8001f8c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	233d      	movs	r3, #61	; 0x3d
 80039d6:	2202      	movs	r2, #2
 80039d8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039da:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <HAL_TIM_PWM_Init+0xd8>)
  tmpcr1 = TIMx->CR1;
 80039de:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	428a      	cmp	r2, r1
 80039e2:	d1b9      	bne.n	8003958 <HAL_TIM_PWM_Init+0x20>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039e4:	2170      	movs	r1, #112	; 0x70
 80039e6:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 80039e8:	68a1      	ldr	r1, [r4, #8]
 80039ea:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ec:	490d      	ldr	r1, [pc, #52]	; (8003a24 <HAL_TIM_PWM_Init+0xec>)
 80039ee:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f0:	6921      	ldr	r1, [r4, #16]
 80039f2:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f4:	2180      	movs	r1, #128	; 0x80
 80039f6:	438b      	bics	r3, r1
 80039f8:	69a1      	ldr	r1, [r4, #24]
 80039fa:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80039fc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fe:	68e3      	ldr	r3, [r4, #12]
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a02:	6863      	ldr	r3, [r4, #4]
 8003a04:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a06:	6963      	ldr	r3, [r4, #20]
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	e7be      	b.n	800398a <HAL_TIM_PWM_Init+0x52>
    return HAL_ERROR;
 8003a0c:	2001      	movs	r0, #1
 8003a0e:	e7d3      	b.n	80039b8 <HAL_TIM_PWM_Init+0x80>
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40002000 	.word	0x40002000
 8003a1c:	40014400 	.word	0x40014400
 8003a20:	40014800 	.word	0x40014800
 8003a24:	fffffcff 	.word	0xfffffcff

08003a28 <HAL_TIM_PWM_ConfigChannel>:
{
 8003a28:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8003a2a:	203c      	movs	r0, #60	; 0x3c
{
 8003a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8003a2e:	5c1c      	ldrb	r4, [r3, r0]
 8003a30:	2c01      	cmp	r4, #1
 8003a32:	d100      	bne.n	8003a36 <HAL_TIM_PWM_ConfigChannel+0xe>
 8003a34:	e0de      	b.n	8003bf4 <HAL_TIM_PWM_ConfigChannel+0x1cc>
 8003a36:	2401      	movs	r4, #1
 8003a38:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8003a3a:	2a08      	cmp	r2, #8
 8003a3c:	d100      	bne.n	8003a40 <HAL_TIM_PWM_ConfigChannel+0x18>
 8003a3e:	e0ac      	b.n	8003b9a <HAL_TIM_PWM_ConfigChannel+0x172>
 8003a40:	d834      	bhi.n	8003aac <HAL_TIM_PWM_ConfigChannel+0x84>
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d100      	bne.n	8003a48 <HAL_TIM_PWM_ConfigChannel+0x20>
 8003a46:	e07d      	b.n	8003b44 <HAL_TIM_PWM_ConfigChannel+0x11c>
 8003a48:	2a04      	cmp	r2, #4
 8003a4a:	d161      	bne.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0xe8>
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4c:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a4e:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a50:	4d77      	ldr	r5, [pc, #476]	; (8003c30 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a52:	6a10      	ldr	r0, [r2, #32]
 8003a54:	43a0      	bics	r0, r4
 8003a56:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003a58:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003a5a:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003a5c:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a5e:	402c      	ands	r4, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a60:	680d      	ldr	r5, [r1, #0]
 8003a62:	022d      	lsls	r5, r5, #8
 8003a64:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a66:	2420      	movs	r4, #32
 8003a68:	43a0      	bics	r0, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a6a:	688c      	ldr	r4, [r1, #8]
 8003a6c:	0124      	lsls	r4, r4, #4
 8003a6e:	4304      	orrs	r4, r0

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a70:	4870      	ldr	r0, [pc, #448]	; (8003c34 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003a72:	4282      	cmp	r2, r0
 8003a74:	d057      	beq.n	8003b26 <HAL_TIM_PWM_ConfigChannel+0xfe>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a76:	4870      	ldr	r0, [pc, #448]	; (8003c38 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003a78:	4282      	cmp	r2, r0
 8003a7a:	d05b      	beq.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8003a7c:	486f      	ldr	r0, [pc, #444]	; (8003c3c <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003a7e:	4282      	cmp	r2, r0
 8003a80:	d058      	beq.n	8003b34 <HAL_TIM_PWM_ConfigChannel+0x10c>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a82:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003a84:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003a86:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003a88:	6390      	str	r0, [r2, #56]	; 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8a:	2080      	movs	r0, #128	; 0x80

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8e:	6994      	ldr	r4, [r2, #24]
 8003a90:	0100      	lsls	r0, r0, #4
 8003a92:	4320      	orrs	r0, r4
 8003a94:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a96:	6990      	ldr	r0, [r2, #24]
 8003a98:	4c69      	ldr	r4, [pc, #420]	; (8003c40 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a9c:	4020      	ands	r0, r4
 8003a9e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa0:	6990      	ldr	r0, [r2, #24]
 8003aa2:	0209      	lsls	r1, r1, #8
 8003aa4:	4301      	orrs	r1, r0
 8003aa6:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa8:	2000      	movs	r0, #0
      break;
 8003aaa:	e032      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003aac:	2a0c      	cmp	r2, #12
 8003aae:	d12f      	bne.n	8003b10 <HAL_TIM_PWM_ConfigChannel+0xe8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab0:	681a      	ldr	r2, [r3, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab2:	4c64      	ldr	r4, [pc, #400]	; (8003c44 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 8003ab4:	6a10      	ldr	r0, [r2, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ab6:	4d5e      	ldr	r5, [pc, #376]	; (8003c30 <HAL_TIM_PWM_ConfigChannel+0x208>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab8:	4020      	ands	r0, r4
 8003aba:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003abc:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003abe:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003ac0:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ac2:	4028      	ands	r0, r5

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac4:	680d      	ldr	r5, [r1, #0]
 8003ac6:	022d      	lsls	r5, r5, #8
 8003ac8:	4305      	orrs	r5, r0

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003aca:	485f      	ldr	r0, [pc, #380]	; (8003c48 <HAL_TIM_PWM_ConfigChannel+0x220>)
 8003acc:	4004      	ands	r4, r0
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ace:	6888      	ldr	r0, [r1, #8]
 8003ad0:	0300      	lsls	r0, r0, #12
 8003ad2:	4320      	orrs	r0, r4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad4:	4c57      	ldr	r4, [pc, #348]	; (8003c34 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003ad6:	42a2      	cmp	r2, r4
 8003ad8:	d01f      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003ada:	4c57      	ldr	r4, [pc, #348]	; (8003c38 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003adc:	42a2      	cmp	r2, r4
 8003ade:	d01c      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0xf2>
 8003ae0:	4c56      	ldr	r4, [pc, #344]	; (8003c3c <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003ae2:	42a2      	cmp	r2, r4
 8003ae4:	d019      	beq.n	8003b1a <HAL_TIM_PWM_ConfigChannel+0xf2>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ae6:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ae8:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003aea:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003aec:	6414      	str	r4, [r2, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aee:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003af0:	2080      	movs	r0, #128	; 0x80
 8003af2:	69d4      	ldr	r4, [r2, #28]
 8003af4:	0100      	lsls	r0, r0, #4
 8003af6:	4320      	orrs	r0, r4
 8003af8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003afa:	69d0      	ldr	r0, [r2, #28]
 8003afc:	4c50      	ldr	r4, [pc, #320]	; (8003c40 <HAL_TIM_PWM_ConfigChannel+0x218>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003afe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b00:	4020      	ands	r0, r4
 8003b02:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b04:	69d0      	ldr	r0, [r2, #28]
 8003b06:	0209      	lsls	r1, r1, #8
 8003b08:	4301      	orrs	r1, r0
 8003b0a:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0c:	2000      	movs	r0, #0
      break;
 8003b0e:	e000      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0xea>
  switch (Channel)
 8003b10:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003b12:	223c      	movs	r2, #60	; 0x3c
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]
}
 8003b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b1a:	4c4c      	ldr	r4, [pc, #304]	; (8003c4c <HAL_TIM_PWM_ConfigChannel+0x224>)
 8003b1c:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b1e:	694e      	ldr	r6, [r1, #20]
 8003b20:	01b6      	lsls	r6, r6, #6
 8003b22:	4326      	orrs	r6, r4
 8003b24:	e7df      	b.n	8003ae6 <HAL_TIM_PWM_ConfigChannel+0xbe>
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b26:	2080      	movs	r0, #128	; 0x80
 8003b28:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b2a:	68c8      	ldr	r0, [r1, #12]
 8003b2c:	0100      	lsls	r0, r0, #4
 8003b2e:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b30:	2040      	movs	r0, #64	; 0x40
 8003b32:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b34:	4846      	ldr	r0, [pc, #280]	; (8003c50 <HAL_TIM_PWM_ConfigChannel+0x228>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b36:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b38:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b3a:	698e      	ldr	r6, [r1, #24]
 8003b3c:	433e      	orrs	r6, r7
 8003b3e:	00b6      	lsls	r6, r6, #2
 8003b40:	4306      	orrs	r6, r0
 8003b42:	e79e      	b.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x5a>
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b44:	2673      	movs	r6, #115	; 0x73
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b46:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b48:	6a10      	ldr	r0, [r2, #32]
 8003b4a:	43a0      	bics	r0, r4
 8003b4c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003b4e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003b50:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8003b52:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b54:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003b56:	680e      	ldr	r6, [r1, #0]
 8003b58:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8003b5a:	2602      	movs	r6, #2
 8003b5c:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8003b5e:	688e      	ldr	r6, [r1, #8]
 8003b60:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b62:	4e34      	ldr	r6, [pc, #208]	; (8003c34 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003b64:	42b2      	cmp	r2, r6
 8003b66:	d047      	beq.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003b68:	4e33      	ldr	r6, [pc, #204]	; (8003c38 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003b6a:	42b2      	cmp	r2, r6
 8003b6c:	d044      	beq.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
 8003b6e:	4e33      	ldr	r6, [pc, #204]	; (8003c3c <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003b70:	42b2      	cmp	r2, r6
 8003b72:	d041      	beq.n	8003bf8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
  TIMx->CR2 = tmpcr2;
 8003b74:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b76:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b78:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b7a:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8003b7c:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b7e:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003b80:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b82:	6990      	ldr	r0, [r2, #24]
 8003b84:	4320      	orrs	r0, r4
 8003b86:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b88:	6990      	ldr	r0, [r2, #24]
 8003b8a:	3c04      	subs	r4, #4
 8003b8c:	43a0      	bics	r0, r4
 8003b8e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b90:	6990      	ldr	r0, [r2, #24]
 8003b92:	4301      	orrs	r1, r0
 8003b94:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2000      	movs	r0, #0
      break;
 8003b98:	e7bb      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0xea>
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9a:	2673      	movs	r6, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b9c:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9e:	4c2d      	ldr	r4, [pc, #180]	; (8003c54 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8003ba0:	6a10      	ldr	r0, [r2, #32]
 8003ba2:	4020      	ands	r0, r4
 8003ba4:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8003ba6:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8003ba8:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8003baa:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bac:	43b4      	bics	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8003bae:	680e      	ldr	r6, [r1, #0]
 8003bb0:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb2:	4c29      	ldr	r4, [pc, #164]	; (8003c58 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8003bb4:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	688c      	ldr	r4, [r1, #8]
 8003bb8:	0224      	lsls	r4, r4, #8
 8003bba:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bbc:	4c1d      	ldr	r4, [pc, #116]	; (8003c34 <HAL_TIM_PWM_ConfigChannel+0x20c>)
 8003bbe:	42a2      	cmp	r2, r4
 8003bc0:	d027      	beq.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc2:	4c1d      	ldr	r4, [pc, #116]	; (8003c38 <HAL_TIM_PWM_ConfigChannel+0x210>)
 8003bc4:	42a2      	cmp	r2, r4
 8003bc6:	d02b      	beq.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8003bc8:	4c1c      	ldr	r4, [pc, #112]	; (8003c3c <HAL_TIM_PWM_ConfigChannel+0x214>)
 8003bca:	42a2      	cmp	r2, r4
 8003bcc:	d028      	beq.n	8003c20 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR3 = OC_Config->Pulse;
 8003bce:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003bd0:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003bd2:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003bd4:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bd6:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8003bd8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bda:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bdc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bde:	4320      	orrs	r0, r4
 8003be0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003be2:	69d0      	ldr	r0, [r2, #28]
 8003be4:	3c04      	subs	r4, #4
 8003be6:	43a0      	bics	r0, r4
 8003be8:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bea:	69d0      	ldr	r0, [r2, #28]
 8003bec:	4301      	orrs	r1, r0
 8003bee:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2000      	movs	r0, #0
      break;
 8003bf2:	e78e      	b.n	8003b12 <HAL_TIM_PWM_ConfigChannel+0xea>
  __HAL_LOCK(htim);
 8003bf4:	2002      	movs	r0, #2
 8003bf6:	e78f      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0xf0>
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bf8:	2608      	movs	r6, #8
 8003bfa:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8003bfc:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bfe:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8003c00:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c02:	2604      	movs	r6, #4
 8003c04:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c06:	4e15      	ldr	r6, [pc, #84]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x234>)
 8003c08:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c0a:	694d      	ldr	r5, [r1, #20]
 8003c0c:	433d      	orrs	r5, r7
 8003c0e:	4335      	orrs	r5, r6
 8003c10:	e7b0      	b.n	8003b74 <HAL_TIM_PWM_ConfigChannel+0x14c>
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c12:	4c13      	ldr	r4, [pc, #76]	; (8003c60 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8003c14:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c16:	68cc      	ldr	r4, [r1, #12]
 8003c18:	0224      	lsls	r4, r4, #8
 8003c1a:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c1c:	4808      	ldr	r0, [pc, #32]	; (8003c40 <HAL_TIM_PWM_ConfigChannel+0x218>)
 8003c1e:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c20:	4c10      	ldr	r4, [pc, #64]	; (8003c64 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c22:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c24:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c26:	698d      	ldr	r5, [r1, #24]
 8003c28:	433d      	orrs	r5, r7
 8003c2a:	012d      	lsls	r5, r5, #4
 8003c2c:	4325      	orrs	r5, r4
 8003c2e:	e7ce      	b.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8003c30:	ffff8cff 	.word	0xffff8cff
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800
 8003c40:	fffffbff 	.word	0xfffffbff
 8003c44:	ffffefff 	.word	0xffffefff
 8003c48:	ffffdfff 	.word	0xffffdfff
 8003c4c:	ffffbfff 	.word	0xffffbfff
 8003c50:	fffff3ff 	.word	0xfffff3ff
 8003c54:	fffffeff 	.word	0xfffffeff
 8003c58:	fffffdff 	.word	0xfffffdff
 8003c5c:	fffffcff 	.word	0xfffffcff
 8003c60:	fffff7ff 	.word	0xfffff7ff
 8003c64:	ffffcfff 	.word	0xffffcfff

08003c68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c68:	233c      	movs	r3, #60	; 0x3c
{
 8003c6a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8003c6c:	5cc3      	ldrb	r3, [r0, r3]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d021      	beq.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c72:	233d      	movs	r3, #61	; 0x3d
 8003c74:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c76:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8003c7a:	6803      	ldr	r3, [r0, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003c7e:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c80:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c82:	680d      	ldr	r5, [r1, #0]
 8003c84:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c88:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d006      	beq.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	05d2      	lsls	r2, r2, #23
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d002      	beq.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d104      	bne.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca0:	684a      	ldr	r2, [r1, #4]
 8003ca2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca6:	233d      	movs	r3, #61	; 0x3d
 8003ca8:	2201      	movs	r2, #1
 8003caa:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8003cac:	2200      	movs	r2, #0
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003cb2:	2000      	movs	r0, #0
}
 8003cb4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003cb6:	2002      	movs	r0, #2
 8003cb8:	e7fc      	b.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cba:	46c0      	nop			; (mov r8, r8)
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40000400 	.word	0x40000400

08003cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc4:	223c      	movs	r2, #60	; 0x3c
{
 8003cc6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8003cc8:	5c83      	ldrb	r3, [r0, r2]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d01e      	beq.n	8003d0c <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cce:	68cb      	ldr	r3, [r1, #12]
 8003cd0:	4c0f      	ldr	r4, [pc, #60]	; (8003d10 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>)
 8003cd2:	4023      	ands	r3, r4
 8003cd4:	688c      	ldr	r4, [r1, #8]
 8003cd6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cd8:	4c0e      	ldr	r4, [pc, #56]	; (8003d14 <HAL_TIMEx_ConfigBreakDeadTime+0x50>)
 8003cda:	4023      	ands	r3, r4
 8003cdc:	684c      	ldr	r4, [r1, #4]
 8003cde:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ce0:	4c0d      	ldr	r4, [pc, #52]	; (8003d18 <HAL_TIMEx_ConfigBreakDeadTime+0x54>)
 8003ce2:	4023      	ands	r3, r4
 8003ce4:	680c      	ldr	r4, [r1, #0]
 8003ce6:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ce8:	4c0c      	ldr	r4, [pc, #48]	; (8003d1c <HAL_TIMEx_ConfigBreakDeadTime+0x58>)
 8003cea:	4023      	ands	r3, r4
 8003cec:	690c      	ldr	r4, [r1, #16]
 8003cee:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cf0:	4c0b      	ldr	r4, [pc, #44]	; (8003d20 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8003cf2:	4023      	ands	r3, r4
 8003cf4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cf6:	69c9      	ldr	r1, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003cf8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cfa:	4c0a      	ldr	r4, [pc, #40]	; (8003d24 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8003cfc:	4023      	ands	r3, r4
 8003cfe:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d00:	6801      	ldr	r1, [r0, #0]
 8003d02:	644b      	str	r3, [r1, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d04:	2300      	movs	r3, #0
 8003d06:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8003d08:	2000      	movs	r0, #0
}
 8003d0a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	e7fc      	b.n	8003d0a <HAL_TIMEx_ConfigBreakDeadTime+0x46>
 8003d10:	fffffcff 	.word	0xfffffcff
 8003d14:	fffffbff 	.word	0xfffffbff
 8003d18:	fffff7ff 	.word	0xfffff7ff
 8003d1c:	ffffefff 	.word	0xffffefff
 8003d20:	ffffdfff 	.word	0xffffdfff
 8003d24:	ffffbfff 	.word	0xffffbfff

08003d28 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d28:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003d2a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d2c:	07da      	lsls	r2, r3, #31
 8003d2e:	d506      	bpl.n	8003d3e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d30:	6801      	ldr	r1, [r0, #0]
 8003d32:	4c28      	ldr	r4, [pc, #160]	; (8003dd4 <UART_AdvFeatureConfig+0xac>)
 8003d34:	684a      	ldr	r2, [r1, #4]
 8003d36:	4022      	ands	r2, r4
 8003d38:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003d3a:	4322      	orrs	r2, r4
 8003d3c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d3e:	079a      	lsls	r2, r3, #30
 8003d40:	d506      	bpl.n	8003d50 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d42:	6801      	ldr	r1, [r0, #0]
 8003d44:	4c24      	ldr	r4, [pc, #144]	; (8003dd8 <UART_AdvFeatureConfig+0xb0>)
 8003d46:	684a      	ldr	r2, [r1, #4]
 8003d48:	4022      	ands	r2, r4
 8003d4a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003d4c:	4322      	orrs	r2, r4
 8003d4e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d50:	075a      	lsls	r2, r3, #29
 8003d52:	d506      	bpl.n	8003d62 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d54:	6801      	ldr	r1, [r0, #0]
 8003d56:	4c21      	ldr	r4, [pc, #132]	; (8003ddc <UART_AdvFeatureConfig+0xb4>)
 8003d58:	684a      	ldr	r2, [r1, #4]
 8003d5a:	4022      	ands	r2, r4
 8003d5c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003d5e:	4322      	orrs	r2, r4
 8003d60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d62:	071a      	lsls	r2, r3, #28
 8003d64:	d506      	bpl.n	8003d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d66:	6801      	ldr	r1, [r0, #0]
 8003d68:	4c1d      	ldr	r4, [pc, #116]	; (8003de0 <UART_AdvFeatureConfig+0xb8>)
 8003d6a:	684a      	ldr	r2, [r1, #4]
 8003d6c:	4022      	ands	r2, r4
 8003d6e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003d70:	4322      	orrs	r2, r4
 8003d72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d74:	06da      	lsls	r2, r3, #27
 8003d76:	d506      	bpl.n	8003d86 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d78:	6801      	ldr	r1, [r0, #0]
 8003d7a:	4c1a      	ldr	r4, [pc, #104]	; (8003de4 <UART_AdvFeatureConfig+0xbc>)
 8003d7c:	688a      	ldr	r2, [r1, #8]
 8003d7e:	4022      	ands	r2, r4
 8003d80:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003d82:	4322      	orrs	r2, r4
 8003d84:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d86:	069a      	lsls	r2, r3, #26
 8003d88:	d506      	bpl.n	8003d98 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8a:	6801      	ldr	r1, [r0, #0]
 8003d8c:	4c16      	ldr	r4, [pc, #88]	; (8003de8 <UART_AdvFeatureConfig+0xc0>)
 8003d8e:	688a      	ldr	r2, [r1, #8]
 8003d90:	4022      	ands	r2, r4
 8003d92:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003d94:	4322      	orrs	r2, r4
 8003d96:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d98:	065a      	lsls	r2, r3, #25
 8003d9a:	d50a      	bpl.n	8003db2 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d9c:	6801      	ldr	r1, [r0, #0]
 8003d9e:	4d13      	ldr	r5, [pc, #76]	; (8003dec <UART_AdvFeatureConfig+0xc4>)
 8003da0:	684a      	ldr	r2, [r1, #4]
 8003da2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003da4:	402a      	ands	r2, r5
 8003da6:	4322      	orrs	r2, r4
 8003da8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003daa:	2280      	movs	r2, #128	; 0x80
 8003dac:	0352      	lsls	r2, r2, #13
 8003dae:	4294      	cmp	r4, r2
 8003db0:	d009      	beq.n	8003dc6 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003db2:	061b      	lsls	r3, r3, #24
 8003db4:	d506      	bpl.n	8003dc4 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003db6:	6802      	ldr	r2, [r0, #0]
 8003db8:	490d      	ldr	r1, [pc, #52]	; (8003df0 <UART_AdvFeatureConfig+0xc8>)
 8003dba:	6853      	ldr	r3, [r2, #4]
 8003dbc:	400b      	ands	r3, r1
 8003dbe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003dc0:	430b      	orrs	r3, r1
 8003dc2:	6053      	str	r3, [r2, #4]
  }
}
 8003dc4:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc6:	684a      	ldr	r2, [r1, #4]
 8003dc8:	4c0a      	ldr	r4, [pc, #40]	; (8003df4 <UART_AdvFeatureConfig+0xcc>)
 8003dca:	4022      	ands	r2, r4
 8003dcc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003dce:	4322      	orrs	r2, r4
 8003dd0:	604a      	str	r2, [r1, #4]
 8003dd2:	e7ee      	b.n	8003db2 <UART_AdvFeatureConfig+0x8a>
 8003dd4:	fffdffff 	.word	0xfffdffff
 8003dd8:	fffeffff 	.word	0xfffeffff
 8003ddc:	fffbffff 	.word	0xfffbffff
 8003de0:	ffff7fff 	.word	0xffff7fff
 8003de4:	ffffefff 	.word	0xffffefff
 8003de8:	ffffdfff 	.word	0xffffdfff
 8003dec:	ffefffff 	.word	0xffefffff
 8003df0:	fff7ffff 	.word	0xfff7ffff
 8003df4:	ff9fffff 	.word	0xff9fffff

08003df8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfa:	4646      	mov	r6, r8
 8003dfc:	4698      	mov	r8, r3
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dfe:	2304      	movs	r3, #4
{
 8003e00:	464f      	mov	r7, r9
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e02:	4699      	mov	r9, r3
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e04:	2380      	movs	r3, #128	; 0x80
{
 8003e06:	46d6      	mov	lr, sl
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e08:	011b      	lsls	r3, r3, #4
{
 8003e0a:	b5c0      	push	{r6, r7, lr}
 8003e0c:	0015      	movs	r5, r2
 8003e0e:	0007      	movs	r7, r0
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e10:	469a      	mov	sl, r3
{
 8003e12:	000c      	movs	r4, r1
 8003e14:	9e08      	ldr	r6, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e16:	6801      	ldr	r1, [r0, #0]
 8003e18:	1c73      	adds	r3, r6, #1
 8003e1a:	d10c      	bne.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x3e>
 8003e1c:	69cb      	ldr	r3, [r1, #28]
 8003e1e:	4023      	ands	r3, r4
 8003e20:	1b1b      	subs	r3, r3, r4
 8003e22:	425a      	negs	r2, r3
 8003e24:	4153      	adcs	r3, r2
 8003e26:	42ab      	cmp	r3, r5
 8003e28:	d0f8      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003e2a:	2000      	movs	r0, #0
}
 8003e2c:	bce0      	pop	{r5, r6, r7}
 8003e2e:	46ba      	mov	sl, r7
 8003e30:	46b1      	mov	r9, r6
 8003e32:	46a8      	mov	r8, r5
 8003e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e36:	69cb      	ldr	r3, [r1, #28]
 8003e38:	4023      	ands	r3, r4
 8003e3a:	1b1b      	subs	r3, r3, r4
 8003e3c:	425a      	negs	r2, r3
 8003e3e:	4153      	adcs	r3, r2
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	d1f2      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x32>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e44:	f7fe fe92 	bl	8002b6c <HAL_GetTick>
 8003e48:	4643      	mov	r3, r8
 8003e4a:	1ac0      	subs	r0, r0, r3
 8003e4c:	42b0      	cmp	r0, r6
 8003e4e:	d82b      	bhi.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0xb0>
 8003e50:	2e00      	cmp	r6, #0
 8003e52:	d029      	beq.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0xb0>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e54:	464a      	mov	r2, r9
 8003e56:	6839      	ldr	r1, [r7, #0]
 8003e58:	680b      	ldr	r3, [r1, #0]
 8003e5a:	421a      	tst	r2, r3
 8003e5c:	d0dc      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e5e:	4652      	mov	r2, sl
 8003e60:	69cb      	ldr	r3, [r1, #28]
 8003e62:	4213      	tst	r3, r2
 8003e64:	d0d8      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e66:	620a      	str	r2, [r1, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e68:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e72:	6839      	ldr	r1, [r7, #0]
 8003e74:	4c1b      	ldr	r4, [pc, #108]	; (8003ee4 <UART_WaitOnFlagUntilTimeout+0xec>)
 8003e76:	680b      	ldr	r3, [r1, #0]
 8003e78:	4023      	ands	r3, r4
 8003e7a:	600b      	str	r3, [r1, #0]
 8003e7c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e80:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e84:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	688b      	ldr	r3, [r1, #8]
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	608b      	str	r3, [r1, #8]
 8003e90:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003e94:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e96:	327f      	adds	r2, #127	; 0x7f
          huart->gState = HAL_UART_STATE_READY;
 8003e98:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e9a:	67fb      	str	r3, [r7, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e9c:	50bb      	str	r3, [r7, r2]
          __HAL_UNLOCK(huart);
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	3354      	adds	r3, #84	; 0x54
          return HAL_TIMEOUT;
 8003ea2:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8003ea4:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8003ea6:	e7c1      	b.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	2201      	movs	r2, #1
 8003eae:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb2:	6839      	ldr	r1, [r7, #0]
 8003eb4:	4c0b      	ldr	r4, [pc, #44]	; (8003ee4 <UART_WaitOnFlagUntilTimeout+0xec>)
 8003eb6:	680b      	ldr	r3, [r1, #0]
 8003eb8:	4023      	ands	r3, r4
 8003eba:	600b      	str	r3, [r1, #0]
 8003ebc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec8:	6839      	ldr	r1, [r7, #0]
 8003eca:	688b      	ldr	r3, [r1, #8]
 8003ecc:	4393      	bics	r3, r2
 8003ece:	608b      	str	r3, [r1, #8]
 8003ed0:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8003ed4:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003ed6:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8003ed8:	67bb      	str	r3, [r7, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003eda:	67fb      	str	r3, [r7, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003edc:	3354      	adds	r3, #84	; 0x54
        return HAL_TIMEOUT;
 8003ede:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8003ee0:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8003ee2:	e7a3      	b.n	8003e2c <UART_WaitOnFlagUntilTimeout+0x34>
 8003ee4:	fffffe5f 	.word	0xfffffe5f

08003ee8 <HAL_UART_Init>:
{
 8003ee8:	b530      	push	{r4, r5, lr}
 8003eea:	0004      	movs	r4, r0
 8003eec:	b083      	sub	sp, #12
  if (huart == NULL)
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d100      	bne.n	8003ef4 <HAL_UART_Init+0xc>
 8003ef2:	e0a8      	b.n	8004046 <HAL_UART_Init+0x15e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d100      	bne.n	8003efc <HAL_UART_Init+0x14>
 8003efa:	e07c      	b.n	8003ff6 <HAL_UART_Init+0x10e>
  huart->gState = HAL_UART_STATE_BUSY;
 8003efc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003efe:	2101      	movs	r1, #1
 8003f00:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003f02:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003f04:	6813      	ldr	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f06:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003f08:	438b      	bics	r3, r1
 8003f0a:	6013      	str	r3, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f0c:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f0e:	6810      	ldr	r0, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f10:	432b      	orrs	r3, r5
 8003f12:	6965      	ldr	r5, [r4, #20]
 8003f14:	69e1      	ldr	r1, [r4, #28]
 8003f16:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f18:	4d62      	ldr	r5, [pc, #392]	; (80040a4 <HAL_UART_Init+0x1bc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f1a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f1c:	4028      	ands	r0, r5
 8003f1e:	4303      	orrs	r3, r0
 8003f20:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f22:	6853      	ldr	r3, [r2, #4]
 8003f24:	4860      	ldr	r0, [pc, #384]	; (80040a8 <HAL_UART_Init+0x1c0>)
  tmpreg |= huart->Init.OneBitSampling;
 8003f26:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f28:	4003      	ands	r3, r0
 8003f2a:	68e0      	ldr	r0, [r4, #12]
 8003f2c:	4303      	orrs	r3, r0
 8003f2e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f30:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f32:	6890      	ldr	r0, [r2, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003f34:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f36:	4d5d      	ldr	r5, [pc, #372]	; (80040ac <HAL_UART_Init+0x1c4>)
 8003f38:	4028      	ands	r0, r5
 8003f3a:	4303      	orrs	r3, r0
 8003f3c:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_UART_Init+0x1c8>)
 8003f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f42:	2303      	movs	r3, #3
 8003f44:	4013      	ands	r3, r2
 8003f46:	3b01      	subs	r3, #1
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d931      	bls.n	8003fb0 <HAL_UART_Init+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	4299      	cmp	r1, r3
 8003f52:	d100      	bne.n	8003f56 <HAL_UART_Init+0x6e>
 8003f54:	e0a2      	b.n	800409c <HAL_UART_Init+0x1b4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f56:	f7ff fc41 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d136      	bne.n	8003fcc <HAL_UART_Init+0xe4>
  huart->RxISR = NULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003f62:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d166      	bne.n	8004038 <HAL_UART_Init+0x150>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	4951      	ldr	r1, [pc, #324]	; (80040b4 <HAL_UART_Init+0x1cc>)
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f72:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	438a      	bics	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	3929      	subs	r1, #41	; 0x29
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f84:	2200      	movs	r2, #0
 8003f86:	2380      	movs	r3, #128	; 0x80
 8003f88:	50e2      	str	r2, [r4, r3]
  tickstart = HAL_GetTick();
 8003f8a:	f7fe fdef 	bl	8002b6c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f8e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003f90:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f92:	6811      	ldr	r1, [r2, #0]
 8003f94:	0709      	lsls	r1, r1, #28
 8003f96:	d433      	bmi.n	8004000 <HAL_UART_Init+0x118>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f98:	6812      	ldr	r2, [r2, #0]
 8003f9a:	0752      	lsls	r2, r2, #29
 8003f9c:	d43f      	bmi.n	800401e <HAL_UART_Init+0x136>
  huart->gState = HAL_UART_STATE_READY;
 8003f9e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003fa0:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 8003fa2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	2300      	movs	r3, #0
  return HAL_OK;
 8003fa8:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003faa:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003fac:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003fae:	e01d      	b.n	8003fec <HAL_UART_Init+0x104>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb0:	2080      	movs	r0, #128	; 0x80
 8003fb2:	4a41      	ldr	r2, [pc, #260]	; (80040b8 <HAL_UART_Init+0x1d0>)
 8003fb4:	0200      	lsls	r0, r0, #8
 8003fb6:	5cd3      	ldrb	r3, [r2, r3]
 8003fb8:	4281      	cmp	r1, r0
 8003fba:	d046      	beq.n	800404a <HAL_UART_Init+0x162>
    switch (clocksource)
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d064      	beq.n	800408a <HAL_UART_Init+0x1a2>
 8003fc0:	d816      	bhi.n	8003ff0 <HAL_UART_Init+0x108>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0c7      	beq.n	8003f56 <HAL_UART_Init+0x6e>
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d10c      	bne.n	8003fe4 <HAL_UART_Init+0xfc>
        pclk = (uint32_t) HSI_VALUE;
 8003fca:	483c      	ldr	r0, [pc, #240]	; (80040bc <HAL_UART_Init+0x1d4>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fcc:	6861      	ldr	r1, [r4, #4]
 8003fce:	084b      	lsrs	r3, r1, #1
 8003fd0:	1818      	adds	r0, r3, r0
 8003fd2:	f7fc f899 	bl	8000108 <__udivsi3>
 8003fd6:	0400      	lsls	r0, r0, #16
 8003fd8:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fda:	0002      	movs	r2, r0
 8003fdc:	4b38      	ldr	r3, [pc, #224]	; (80040c0 <HAL_UART_Init+0x1d8>)
 8003fde:	3a10      	subs	r2, #16
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d92d      	bls.n	8004040 <HAL_UART_Init+0x158>
  huart->RxISR = NULL;
 8003fe4:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003fe6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003fe8:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003fea:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8003fec:	b003      	add	sp, #12
 8003fee:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d0eb      	beq.n	8003fcc <HAL_UART_Init+0xe4>
 8003ff4:	e7f6      	b.n	8003fe4 <HAL_UART_Init+0xfc>
    huart->Lock = HAL_UNLOCKED;
 8003ff6:	2274      	movs	r2, #116	; 0x74
 8003ff8:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8003ffa:	f7fe f83f 	bl	800207c <HAL_UART_MspInit>
 8003ffe:	e77d      	b.n	8003efc <HAL_UART_Init+0x14>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004000:	2180      	movs	r1, #128	; 0x80
 8004002:	4b30      	ldr	r3, [pc, #192]	; (80040c4 <HAL_UART_Init+0x1dc>)
 8004004:	2200      	movs	r2, #0
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	0389      	lsls	r1, r1, #14
 800400a:	0003      	movs	r3, r0
 800400c:	0020      	movs	r0, r4
 800400e:	f7ff fef3 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8004012:	2800      	cmp	r0, #0
 8004014:	d10e      	bne.n	8004034 <HAL_UART_Init+0x14c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	0752      	lsls	r2, r2, #29
 800401c:	d5bf      	bpl.n	8003f9e <HAL_UART_Init+0xb6>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800401e:	2180      	movs	r1, #128	; 0x80
 8004020:	4b28      	ldr	r3, [pc, #160]	; (80040c4 <HAL_UART_Init+0x1dc>)
 8004022:	2200      	movs	r2, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	0020      	movs	r0, r4
 8004028:	002b      	movs	r3, r5
 800402a:	03c9      	lsls	r1, r1, #15
 800402c:	f7ff fee4 	bl	8003df8 <UART_WaitOnFlagUntilTimeout>
 8004030:	2800      	cmp	r0, #0
 8004032:	d0b4      	beq.n	8003f9e <HAL_UART_Init+0xb6>
      return HAL_TIMEOUT;
 8004034:	2003      	movs	r0, #3
 8004036:	e7d9      	b.n	8003fec <HAL_UART_Init+0x104>
    UART_AdvFeatureConfig(huart);
 8004038:	0020      	movs	r0, r4
 800403a:	f7ff fe75 	bl	8003d28 <UART_AdvFeatureConfig>
 800403e:	e794      	b.n	8003f6a <HAL_UART_Init+0x82>
        huart->Instance->BRR = usartdiv;
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	60d8      	str	r0, [r3, #12]
  return ret;
 8004044:	e78b      	b.n	8003f5e <HAL_UART_Init+0x76>
    return HAL_ERROR;
 8004046:	2001      	movs	r0, #1
 8004048:	e7d0      	b.n	8003fec <HAL_UART_Init+0x104>
    switch (clocksource)
 800404a:	2b04      	cmp	r3, #4
 800404c:	d020      	beq.n	8004090 <HAL_UART_Init+0x1a8>
 800404e:	d817      	bhi.n	8004080 <HAL_UART_Init+0x198>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d023      	beq.n	800409c <HAL_UART_Init+0x1b4>
 8004054:	2b02      	cmp	r3, #2
 8004056:	d1c5      	bne.n	8003fe4 <HAL_UART_Init+0xfc>
 8004058:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_UART_Init+0x1e0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800405a:	6861      	ldr	r1, [r4, #4]
 800405c:	0848      	lsrs	r0, r1, #1
 800405e:	18c0      	adds	r0, r0, r3
 8004060:	f7fc f852 	bl	8000108 <__udivsi3>
 8004064:	0403      	lsls	r3, r0, #16
 8004066:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	4915      	ldr	r1, [pc, #84]	; (80040c0 <HAL_UART_Init+0x1d8>)
 800406a:	3a10      	subs	r2, #16
 800406c:	428a      	cmp	r2, r1
 800406e:	d8b9      	bhi.n	8003fe4 <HAL_UART_Init+0xfc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004070:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_UART_Init+0x1e4>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004072:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004074:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004076:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8004078:	6822      	ldr	r2, [r4, #0]
 800407a:	4318      	orrs	r0, r3
 800407c:	60d0      	str	r0, [r2, #12]
  return ret;
 800407e:	e76e      	b.n	8003f5e <HAL_UART_Init+0x76>
    switch (clocksource)
 8004080:	2b08      	cmp	r3, #8
 8004082:	d1af      	bne.n	8003fe4 <HAL_UART_Init+0xfc>
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	025b      	lsls	r3, r3, #9
 8004088:	e7e7      	b.n	800405a <HAL_UART_Init+0x172>
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7ff fb69 	bl	8003760 <HAL_RCC_GetSysClockFreq>
        break;
 800408e:	e764      	b.n	8003f5a <HAL_UART_Init+0x72>
        pclk = HAL_RCC_GetSysClockFreq();
 8004090:	f7ff fb66 	bl	8003760 <HAL_RCC_GetSysClockFreq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004094:	0043      	lsls	r3, r0, #1
    if (pclk != 0U)
 8004096:	2800      	cmp	r0, #0
 8004098:	d1df      	bne.n	800405a <HAL_UART_Init+0x172>
 800409a:	e760      	b.n	8003f5e <HAL_UART_Init+0x76>
        pclk = HAL_RCC_GetPCLK1Freq();
 800409c:	f7ff fb9e 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
        break;
 80040a0:	e7f8      	b.n	8004094 <HAL_UART_Init+0x1ac>
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	ffff69f3 	.word	0xffff69f3
 80040a8:	ffffcfff 	.word	0xffffcfff
 80040ac:	fffff4ff 	.word	0xfffff4ff
 80040b0:	40021000 	.word	0x40021000
 80040b4:	ffffb7ff 	.word	0xffffb7ff
 80040b8:	08006da0 	.word	0x08006da0
 80040bc:	007a1200 	.word	0x007a1200
 80040c0:	0000ffef 	.word	0x0000ffef
 80040c4:	01ffffff 	.word	0x01ffffff
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	0000fff0 	.word	0x0000fff0

080040d0 <VBS_GetAvBusVoltage_d>:
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
 80040d0:	88c0      	ldrh	r0, [r0, #6]
}
 80040d2:	4770      	bx	lr

080040d4 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 80040d4:	0003      	movs	r3, r0
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80040d6:	88c0      	ldrh	r0, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80040d8:	885b      	ldrh	r3, [r3, #2]
 80040da:	4358      	muls	r0, r3
  temp /= 65536u;

  return ( ( uint16_t )temp );
 80040dc:	0c00      	lsrs	r0, r0, #16
}
 80040de:	4770      	bx	lr

080040e0 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80040e0:	b510      	push	{r4, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	b20b      	sxth	r3, r1
 80040e6:	9101      	str	r1, [sp, #4]
 80040e8:	1409      	asrs	r1, r1, #16
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80040ea:	001a      	movs	r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 80040ec:	000c      	movs	r4, r1
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80040ee:	435a      	muls	r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 80040f0:	434c      	muls	r4, r1
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80040f2:	1912      	adds	r2, r2, r4

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80040f4:	8804      	ldrh	r4, [r0, #0]
 80040f6:	4364      	muls	r4, r4
 80040f8:	42a2      	cmp	r2, r4
 80040fa:	d917      	bls.n	800412c <Circle_Limitation+0x4c>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80040fc:	24b2      	movs	r4, #178	; 0xb2
 80040fe:	5d04      	ldrb	r4, [r0, r4]
    uw_temp /= ( uint32_t )( 16777216 );
 8004100:	0e12      	lsrs	r2, r2, #24
    uw_temp -= pHandle->Start_index;
 8004102:	1b12      	subs	r2, r2, r4

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 8004104:	24ff      	movs	r4, #255	; 0xff
 8004106:	4022      	ands	r2, r4
 8004108:	0052      	lsls	r2, r2, #1
 800410a:	1880      	adds	r0, r0, r2

    sw_temp = Vqd.q * ( int32_t )table_element;
 800410c:	8884      	ldrh	r4, [r0, #4]
 800410e:	4363      	muls	r3, r4
 8004110:	0018      	movs	r0, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );

    sw_temp = Vqd.d * ( int32_t )( table_element );
 8004112:	434c      	muls	r4, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004114:	17da      	asrs	r2, r3, #31
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004116:	17e1      	asrs	r1, r4, #31
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004118:	0452      	lsls	r2, r2, #17
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800411a:	0449      	lsls	r1, r1, #17
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800411c:	0c53      	lsrs	r3, r2, #17
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800411e:	0c49      	lsrs	r1, r1, #17
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004120:	181b      	adds	r3, r3, r0
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004122:	1909      	adds	r1, r1, r4
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004124:	13db      	asrs	r3, r3, #15
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 8004126:	13c9      	asrs	r1, r1, #15
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 8004128:	b21b      	sxth	r3, r3
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800412a:	b209      	sxth	r1, r1
  }

  return ( local_vqd );
 800412c:	0418      	lsls	r0, r3, #16
 800412e:	0409      	lsls	r1, r1, #16
 8004130:	0c00      	lsrs	r0, r0, #16
 8004132:	4308      	orrs	r0, r1
}
 8004134:	b004      	add	sp, #16
 8004136:	bd10      	pop	{r4, pc}

08004138 <FD_Init>:
  * @param  pHandle pointer on the handle of the component to initialize.
  */
__weak void FD_Init( FastDiv_Handle_t * pHandle )
{
  uint8_t i;
  pHandle->fd_div_element = 0;
 8004138:	2300      	movs	r3, #0
 800413a:	7003      	strb	r3, [r0, #0]

  for ( i = 0u; i < FD_MAX_FDIV; i++ )
  {
    pHandle->fd_m[i].M = 0;
 800413c:	6043      	str	r3, [r0, #4]
    pHandle->fd_m[i].s = 0;
 800413e:	6083      	str	r3, [r0, #8]
    pHandle->fd_m[i].d = 0;
 8004140:	60c3      	str	r3, [r0, #12]
    pHandle->fd_m[i].M = 0;
 8004142:	6103      	str	r3, [r0, #16]
    pHandle->fd_m[i].s = 0;
 8004144:	6143      	str	r3, [r0, #20]
    pHandle->fd_m[i].d = 0;
 8004146:	6183      	str	r3, [r0, #24]
    pHandle->fd_m[i].M = 0;
 8004148:	61c3      	str	r3, [r0, #28]
    pHandle->fd_m[i].s = 0;
 800414a:	6203      	str	r3, [r0, #32]
    pHandle->fd_m[i].d = 0;
 800414c:	6243      	str	r3, [r0, #36]	; 0x24
    pHandle->fd_m[i].M = 0;
 800414e:	6283      	str	r3, [r0, #40]	; 0x28
    pHandle->fd_m[i].s = 0;
 8004150:	62c3      	str	r3, [r0, #44]	; 0x2c
    pHandle->fd_m[i].d = 0;
 8004152:	6303      	str	r3, [r0, #48]	; 0x30
    pHandle->fd_m[i].M = 0;
 8004154:	6343      	str	r3, [r0, #52]	; 0x34
    pHandle->fd_m[i].s = 0;
 8004156:	6383      	str	r3, [r0, #56]	; 0x38
    pHandle->fd_m[i].d = 0;
 8004158:	63c3      	str	r3, [r0, #60]	; 0x3c
  }
}
 800415a:	4770      	bx	lr

0800415c <FD_FastDiv>:
  * @param  n Numerator
  * @param  d Denominator
  * @retval resault of the integer division of n by d
  */
__weak int32_t FD_FastDiv( FastDiv_Handle_t * pHandle, int32_t n, int32_t d )
{
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	4657      	mov	r7, sl
 8004160:	464e      	mov	r6, r9
 8004162:	4645      	mov	r5, r8
 8004164:	46de      	mov	lr, fp
 8004166:	b5e0      	push	{r5, r6, r7, lr}
 8004168:	4681      	mov	r9, r0
 800416a:	468a      	mov	sl, r1
 800416c:	4690      	mov	r8, r2
 800416e:	b083      	sub	sp, #12
  int8_t i = 0, findAtElement = -1;
  FD_FastDivMagicNumber_t x;
  int8_t fd_div_element = pHandle->fd_div_element;
  uint32_t absN = (n>0)?n:-n;

  if ( d == 0 )
 8004170:	2a00      	cmp	r2, #0
 8004172:	d05e      	beq.n	8004232 <FD_FastDiv+0xd6>
  {
    return 0; /* Division by zero */
  }

  if ( d == 1 )
 8004174:	0008      	movs	r0, r1
 8004176:	2a01      	cmp	r2, #1
 8004178:	d05c      	beq.n	8004234 <FD_FastDiv+0xd8>
    return n; /* Division by 1 */
  }
  
  for ( i = 0; i < FD_MAX_FDIV; i++ )
  {
    if ( d == pHandle->fd_m[i].d )
 800417a:	464b      	mov	r3, r9
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	429a      	cmp	r2, r3
 8004180:	d100      	bne.n	8004184 <FD_FastDiv+0x28>
 8004182:	e098      	b.n	80042b6 <FD_FastDiv+0x15a>
 8004184:	464b      	mov	r3, r9
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	429a      	cmp	r2, r3
 800418a:	d100      	bne.n	800418e <FD_FastDiv+0x32>
 800418c:	e09b      	b.n	80042c6 <FD_FastDiv+0x16a>
 800418e:	464b      	mov	r3, r9
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	429a      	cmp	r2, r3
 8004194:	d100      	bne.n	8004198 <FD_FastDiv+0x3c>
 8004196:	e098      	b.n	80042ca <FD_FastDiv+0x16e>
 8004198:	464b      	mov	r3, r9
 800419a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419c:	429a      	cmp	r2, r3
 800419e:	d100      	bne.n	80041a2 <FD_FastDiv+0x46>
 80041a0:	e095      	b.n	80042ce <FD_FastDiv+0x172>
 80041a2:	464b      	mov	r3, r9
 80041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d100      	bne.n	80041ac <FD_FastDiv+0x50>
 80041aa:	e092      	b.n	80042d2 <FD_FastDiv+0x176>
  const uint32_t two31 = 0x80000000;

  FD_FastDivMagicNumber_t retVal;
  retVal.d = d;

  ad = FD_abs( d );
 80041ac:	17d3      	asrs	r3, r2, #31
 80041ae:	18d7      	adds	r7, r2, r3
 80041b0:	405f      	eors	r7, r3
  t = two31 + ( ( uint32_t )d >> 31 );
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	0fd4      	lsrs	r4, r2, #31
 80041b6:	061b      	lsls	r3, r3, #24
 80041b8:	18e0      	adds	r0, r4, r3
  anc = t - 1 - t % ad;
 80041ba:	0039      	movs	r1, r7
 80041bc:	f7fc f82a 	bl	8000214 <__aeabi_uidivmod>
 80041c0:	4a45      	ldr	r2, [pc, #276]	; (80042d8 <FD_FastDiv+0x17c>)
 80041c2:	0023      	movs	r3, r4
 80041c4:	4694      	mov	ip, r2

  p = 31;
  q1 = two31 / anc;
 80041c6:	2080      	movs	r0, #128	; 0x80
 80041c8:	4463      	add	r3, ip
  anc = t - 1 - t % ad;
 80041ca:	1a5a      	subs	r2, r3, r1
 80041cc:	9100      	str	r1, [sp, #0]
  q1 = two31 / anc;
 80041ce:	0600      	lsls	r0, r0, #24
 80041d0:	0011      	movs	r1, r2
  anc = t - 1 - t % ad;
 80041d2:	4693      	mov	fp, r2
 80041d4:	9301      	str	r3, [sp, #4]
  q1 = two31 / anc;
 80041d6:	f7fb ff97 	bl	8000108 <__udivsi3>
 80041da:	0005      	movs	r5, r0
  r1 = two31 - q1 * anc;
 80041dc:	2080      	movs	r0, #128	; 0x80
 80041de:	4659      	mov	r1, fp
 80041e0:	0600      	lsls	r0, r0, #24
 80041e2:	f7fc f817 	bl	8000214 <__aeabi_uidivmod>
  q2 = two31 / ad;
 80041e6:	2080      	movs	r0, #128	; 0x80
 80041e8:	000e      	movs	r6, r1
 80041ea:	0600      	lsls	r0, r0, #24
 80041ec:	0039      	movs	r1, r7
 80041ee:	f7fb ff8b 	bl	8000108 <__udivsi3>
 80041f2:	0004      	movs	r4, r0
  r2 = two31 - q2 * ad;
 80041f4:	2080      	movs	r0, #128	; 0x80
 80041f6:	0039      	movs	r1, r7
 80041f8:	0600      	lsls	r0, r0, #24
 80041fa:	f7fc f80b 	bl	8000214 <__aeabi_uidivmod>
    q1 = 2 * q1;
    r1 = 2 * r1;
    if ( r1 >= anc )
    {
      q1 = q1 + 1;
      r1 = r1 - anc;
 80041fe:	9800      	ldr	r0, [sp, #0]
 8004200:	9b01      	ldr	r3, [sp, #4]
  p = 31;
 8004202:	221f      	movs	r2, #31
      r1 = r1 - anc;
 8004204:	1ac3      	subs	r3, r0, r3
 8004206:	469c      	mov	ip, r3
    p = p + 1;
 8004208:	1c50      	adds	r0, r2, #1
    q1 = 2 * q1;
 800420a:	006d      	lsls	r5, r5, #1
    r1 = 2 * r1;
 800420c:	0076      	lsls	r6, r6, #1
    if ( r1 >= anc )
 800420e:	45b3      	cmp	fp, r6
 8004210:	d801      	bhi.n	8004216 <FD_FastDiv+0xba>
      q1 = q1 + 1;
 8004212:	3501      	adds	r5, #1
      r1 = r1 - anc;
 8004214:	4466      	add	r6, ip
    }
    q2 = 2 * q2;
 8004216:	0064      	lsls	r4, r4, #1
    r2 = 2 * r2;
 8004218:	0049      	lsls	r1, r1, #1

    if ( r2 >= ad )
 800421a:	428f      	cmp	r7, r1
 800421c:	d801      	bhi.n	8004222 <FD_FastDiv+0xc6>
    {
      q2 = q2 + 1;
 800421e:	3401      	adds	r4, #1
      r2 = r2 - ad;
 8004220:	1bc9      	subs	r1, r1, r7
    }
    delta = ad - r2;
 8004222:	1a7b      	subs	r3, r7, r1
  }
  while ( q1 < delta || ( q1 == delta && r1 == 0 ) );
 8004224:	42ab      	cmp	r3, r5
 8004226:	d802      	bhi.n	800422e <FD_FastDiv+0xd2>
 8004228:	d10b      	bne.n	8004242 <FD_FastDiv+0xe6>
 800422a:	2e00      	cmp	r6, #0
 800422c:	d109      	bne.n	8004242 <FD_FastDiv+0xe6>
{
 800422e:	0002      	movs	r2, r0
 8004230:	e7ea      	b.n	8004208 <FD_FastDiv+0xac>
    return 0; /* Division by zero */
 8004232:	2000      	movs	r0, #0
}
 8004234:	b003      	add	sp, #12
 8004236:	bcf0      	pop	{r4, r5, r6, r7}
 8004238:	46bb      	mov	fp, r7
 800423a:	46b2      	mov	sl, r6
 800423c:	46a9      	mov	r9, r5
 800423e:	46a0      	mov	r8, r4
 8004240:	bdf0      	pop	{r4, r5, r6, r7, pc}
  retVal.M = q2 + 1;
  if ( d < 0 )
 8004242:	4643      	mov	r3, r8
  retVal.M = q2 + 1;
 8004244:	3401      	adds	r4, #1
  if ( d < 0 )
 8004246:	2b00      	cmp	r3, #0
 8004248:	da00      	bge.n	800424c <FD_FastDiv+0xf0>
  {
    retVal.M = -retVal.M;
 800424a:	4264      	negs	r4, r4
  int8_t fd_div_element = pHandle->fd_div_element;
 800424c:	464b      	mov	r3, r9
    pHandle->fd_m[fd_div_element] = x;
 800424e:	4640      	mov	r0, r8
  int8_t fd_div_element = pHandle->fd_div_element;
 8004250:	781b      	ldrb	r3, [r3, #0]
      fd_div_element = 0;
 8004252:	2500      	movs	r5, #0
  int8_t fd_div_element = pHandle->fd_div_element;
 8004254:	b25b      	sxtb	r3, r3
  }
  retVal.s = p - 32;
 8004256:	0059      	lsls	r1, r3, #1
 8004258:	18c9      	adds	r1, r1, r3
 800425a:	0089      	lsls	r1, r1, #2
 800425c:	4449      	add	r1, r9
    pHandle->fd_m[fd_div_element] = x;
 800425e:	60c8      	str	r0, [r1, #12]
      fd_div_element = 0;
 8004260:	2004      	movs	r0, #4
    fd_div_element++;
 8004262:	3301      	adds	r3, #1
 8004264:	b25b      	sxtb	r3, r3
  retVal.s = p - 32;
 8004266:	3a1f      	subs	r2, #31
    pHandle->fd_m[fd_div_element] = x;
 8004268:	604c      	str	r4, [r1, #4]
 800426a:	608a      	str	r2, [r1, #8]
      fd_div_element = 0;
 800426c:	0fd9      	lsrs	r1, r3, #31
 800426e:	4298      	cmp	r0, r3
 8004270:	4169      	adcs	r1, r5
 8004272:	4249      	negs	r1, r1
 8004274:	400b      	ands	r3, r1
    pHandle->fd_div_element = fd_div_element;
 8004276:	4649      	mov	r1, r9
 8004278:	700b      	strb	r3, [r1, #0]
  uint32_t absN = (n>0)?n:-n;
 800427a:	4651      	mov	r1, sl
{
  uint32_t u0, v0, w0;
  uint32_t u1, v1, w1, w2, t;
  u0 = u & 0xFFFF;
  u1 = u >> 16;
  v0 = v & 0xFFFF;
 800427c:	0420      	lsls	r0, r4, #16
  uint32_t absN = (n>0)?n:-n;
 800427e:	17cb      	asrs	r3, r1, #31
 8004280:	18c9      	adds	r1, r1, r3
  v0 = v & 0xFFFF;
 8004282:	0c00      	lsrs	r0, r0, #16
  uint32_t absN = (n>0)?n:-n;
 8004284:	4059      	eors	r1, r3
  v1 = v >> 16;
  w0 = u0 * v0;
 8004286:	0003      	movs	r3, r0
  u0 = u & 0xFFFF;
 8004288:	040d      	lsls	r5, r1, #16
 800428a:	0c2d      	lsrs	r5, r5, #16
  u1 = u >> 16;
 800428c:	0c09      	lsrs	r1, r1, #16
  w0 = u0 * v0;
 800428e:	436b      	muls	r3, r5
  t = u1 * v0 + ( w0 >> 16 );
 8004290:	4348      	muls	r0, r1
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	1818      	adds	r0, r3, r0
  return (n>0)?qf:-qf;
 8004296:	4653      	mov	r3, sl
  v1 = v >> 16;
 8004298:	0c24      	lsrs	r4, r4, #16
  w1 = t & 0xFFFF;
  w2 = t >> 16;
  w1 = u0 * v1 + w1;
  return ( u1 * v1 + w2 + ( w1 >> 16 ) );
 800429a:	4361      	muls	r1, r4
  w1 = u0 * v1 + w1;
 800429c:	436c      	muls	r4, r5
  w1 = t & 0xFFFF;
 800429e:	0406      	lsls	r6, r0, #16
 80042a0:	0c36      	lsrs	r6, r6, #16
  w2 = t >> 16;
 80042a2:	0c00      	lsrs	r0, r0, #16
  w1 = u0 * v1 + w1;
 80042a4:	19a4      	adds	r4, r4, r6
  return ( u1 * v1 + w2 + ( w1 >> 16 ) );
 80042a6:	1840      	adds	r0, r0, r1
 80042a8:	0c24      	lsrs	r4, r4, #16
 80042aa:	1900      	adds	r0, r0, r4
  qf >>= x.s;
 80042ac:	4110      	asrs	r0, r2
  return (n>0)?qf:-qf;
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	dcc0      	bgt.n	8004234 <FD_FastDiv+0xd8>
 80042b2:	4240      	negs	r0, r0
 80042b4:	e7be      	b.n	8004234 <FD_FastDiv+0xd8>
    if ( d == pHandle->fd_m[i].d )
 80042b6:	2200      	movs	r2, #0
    x = pHandle->fd_m[findAtElement];
 80042b8:	0053      	lsls	r3, r2, #1
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	444b      	add	r3, r9
 80042c0:	689a      	ldr	r2, [r3, #8]
  qf = FD_mulhs( absN, x.M );
 80042c2:	685c      	ldr	r4, [r3, #4]
 80042c4:	e7d9      	b.n	800427a <FD_FastDiv+0x11e>
    if ( d == pHandle->fd_m[i].d )
 80042c6:	2201      	movs	r2, #1
 80042c8:	e7f6      	b.n	80042b8 <FD_FastDiv+0x15c>
 80042ca:	2202      	movs	r2, #2
 80042cc:	e7f4      	b.n	80042b8 <FD_FastDiv+0x15c>
 80042ce:	2203      	movs	r2, #3
 80042d0:	e7f2      	b.n	80042b8 <FD_FastDiv+0x15c>
 80042d2:	2204      	movs	r2, #4
 80042d4:	e7f0      	b.n	80042b8 <FD_FastDiv+0x15c>
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	7fffffff 	.word	0x7fffffff

080042dc <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 80042dc:	2300      	movs	r3, #0

  pHandle->TxFrame.Code = 0x0;
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 80042de:	2196      	movs	r1, #150	; 0x96
  pHandle->RxTimeoutCountdown = 0;
 80042e0:	2200      	movs	r2, #0
 80042e2:	8243      	strh	r3, [r0, #18]
  pHandle->TxFrame.Code = 0x0;
 80042e4:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.FrameCRC = 0;
 80042e6:	5243      	strh	r3, [r0, r1]
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;
 80042e8:	3102      	adds	r1, #2
 80042ea:	5243      	strh	r3, [r0, r1]

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 80042ec:	3102      	adds	r1, #2
 80042ee:	5442      	strb	r2, [r0, r1]
  pHandle->RxFrame.FrameCRC = 0;
 80042f0:	211c      	movs	r1, #28
 80042f2:	31ff      	adds	r1, #255	; 0xff
 80042f4:	5442      	strb	r2, [r0, r1]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 80042f6:	228e      	movs	r2, #142	; 0x8e
 80042f8:	0052      	lsls	r2, r2, #1
 80042fa:	5283      	strh	r3, [r0, r2]
  pHandle->RxFrameLevel = 0;
}
 80042fc:	4770      	bx	lr
 80042fe:	46c0      	nop			; (mov r8, r8)

08004300 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8004300:	2800      	cmp	r0, #0
 8004302:	d004      	beq.n	800430e <FCP_SetClient+0xe>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 8004304:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8004306:	9b00      	ldr	r3, [sp, #0]
    pHandle->ClientEntity = pClient;
 8004308:	6001      	str	r1, [r0, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800430a:	6042      	str	r2, [r0, #4]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800430c:	60c3      	str	r3, [r0, #12]
  }
}
 800430e:	4770      	bx	lr

08004310 <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 8004310:	b510      	push	{r4, lr}
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8004312:	2800      	cmp	r0, #0
 8004314:	d011      	beq.n	800433a <FCP_CalcCRC+0x2a>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 8004316:	7844      	ldrb	r4, [r0, #1]
    nSum += pFrame->Code;
 8004318:	7803      	ldrb	r3, [r0, #0]
    nSum += pFrame->Size;
 800431a:	191b      	adds	r3, r3, r4

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800431c:	2c00      	cmp	r4, #0
 800431e:	d008      	beq.n	8004332 <FCP_CalcCRC+0x22>
 8004320:	2200      	movs	r2, #0
 8004322:	3002      	adds	r0, #2
    {
      nSum += pFrame->Buffer[idx];
 8004324:	5c81      	ldrb	r1, [r0, r2]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 8004326:	3201      	adds	r2, #1
      nSum += pFrame->Buffer[idx];
 8004328:	185b      	adds	r3, r3, r1
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800432a:	b2d1      	uxtb	r1, r2
      nSum += pFrame->Buffer[idx];
 800432c:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800432e:	428c      	cmp	r4, r1
 8004330:	d8f8      	bhi.n	8004324 <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 8004332:	0a1a      	lsrs	r2, r3, #8
 8004334:	189b      	adds	r3, r3, r2
 8004336:	b2d8      	uxtb	r0, r3
  }

  return nCRC ;
}
 8004338:	bd10      	pop	{r4, pc}
  uint8_t nCRC = 0;
 800433a:	2000      	movs	r0, #0
 800433c:	e7fc      	b.n	8004338 <FCP_CalcCRC+0x28>
 800433e:	46c0      	nop			; (mov r8, r8)

08004340 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 8004340:	b570      	push	{r4, r5, r6, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 8004342:	2580      	movs	r5, #128	; 0x80
 8004344:	006d      	lsls	r5, r5, #1
 8004346:	002a      	movs	r2, r5
 8004348:	2100      	movs	r1, #0
{
 800434a:	0004      	movs	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 800434c:	f001 ff36 	bl	80061bc <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
  pHandle->hLastMeasBufferIndex = 0u;
 8004350:	2281      	movs	r2, #129	; 0x81
  pHandle->hNextMeasBufferIndex = 0u;
 8004352:	2300      	movs	r3, #0
  pHandle->hLastMeasBufferIndex = 0u;
 8004354:	0052      	lsls	r2, r2, #1
  pHandle->hNextMeasBufferIndex = 0u;
 8004356:	5363      	strh	r3, [r4, r5]
  pHandle->hLastMeasBufferIndex = 0u;
 8004358:	52a3      	strh	r3, [r4, r2]

}
 800435a:	bd70      	pop	{r4, r5, r6, pc}

0800435c <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 800435c:	b570      	push	{r4, r5, r6, lr}
 800435e:	0005      	movs	r5, r0
 8004360:	0008      	movs	r0, r1
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	0049      	lsls	r1, r1, #1
 8004366:	5a6b      	ldrh	r3, [r5, r1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8004368:	247f      	movs	r4, #127	; 0x7f
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800436a:	005a      	lsls	r2, r3, #1
 800436c:	5350      	strh	r0, [r2, r5]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800436e:	2281      	movs	r2, #129	; 0x81
 8004370:	0052      	lsls	r2, r2, #1
 8004372:	52ab      	strh	r3, [r5, r2]
    pHandle->hNextMeasBufferIndex = 0u;
 8004374:	2200      	movs	r2, #0
  pHandle->hNextMeasBufferIndex++;
 8004376:	3301      	adds	r3, #1
 8004378:	b29b      	uxth	r3, r3
    pHandle->hNextMeasBufferIndex = 0u;
 800437a:	429c      	cmp	r4, r3
 800437c:	4152      	adcs	r2, r2
 800437e:	4252      	negs	r2, r2
 8004380:	4013      	ands	r3, r2
 8004382:	526b      	strh	r3, [r5, r1]
  int32_t wAux = 0;
 8004384:	2200      	movs	r2, #0
 8004386:	002b      	movs	r3, r5
 8004388:	186c      	adds	r4, r5, r1
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800438a:	2600      	movs	r6, #0
 800438c:	5f99      	ldrsh	r1, [r3, r6]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800438e:	3302      	adds	r3, #2
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8004390:	1852      	adds	r2, r2, r1
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8004392:	42a3      	cmp	r3, r4
 8004394:	d1f9      	bne.n	800438a <MPM_CalcElMotorPower+0x2e>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8004396:	237f      	movs	r3, #127	; 0x7f
 8004398:	17d1      	asrs	r1, r2, #31
 800439a:	400b      	ands	r3, r1
 800439c:	189b      	adds	r3, r3, r2
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800439e:	2282      	movs	r2, #130	; 0x82
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 80043a0:	11db      	asrs	r3, r3, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 80043a2:	0052      	lsls	r2, r2, #1
 80043a4:	52ab      	strh	r3, [r5, r2]
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 80043a6:	bd70      	pop	{r4, r5, r6, pc}

080043a8 <MPM_GetAvrgElMotorPowerW>:
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
 80043a8:	2382      	movs	r3, #130	; 0x82
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	5ec0      	ldrsh	r0, [r0, r3]
}
 80043ae:	4770      	bx	lr

080043b0 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80043b0:	8a02      	ldrh	r2, [r0, #16]
 80043b2:	8b41      	ldrh	r1, [r0, #26]
{
 80043b4:	0003      	movs	r3, r0
  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 80043b6:	4291      	cmp	r1, r2
 80043b8:	d306      	bcc.n	80043c8 <NTC_SetFaultState+0x18>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80043ba:	8b81      	ldrh	r1, [r0, #28]
  {
    hFault = MC_NO_ERROR;
 80043bc:	2000      	movs	r0, #0
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 80043be:	4291      	cmp	r1, r2
 80043c0:	d900      	bls.n	80043c4 <NTC_SetFaultState+0x14>
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 80043c2:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 80043c4:	8ad8      	ldrh	r0, [r3, #22]
 80043c6:	e7fc      	b.n	80043c2 <NTC_SetFaultState+0x12>
    hFault = MC_OVER_TEMP;
 80043c8:	2008      	movs	r0, #8
 80043ca:	e7fa      	b.n	80043c2 <NTC_SetFaultState+0x12>

080043cc <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 80043cc:	2300      	movs	r3, #0
 80043ce:	8203      	strh	r3, [r0, #16]
}
 80043d0:	4770      	bx	lr
 80043d2:	46c0      	nop			; (mov r8, r8)

080043d4 <NTC_Init>:
  if ( pHandle->bSensorType == REAL_SENSOR )
 80043d4:	7803      	ldrb	r3, [r0, #0]
{
 80043d6:	b510      	push	{r4, lr}
 80043d8:	0004      	movs	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <NTC_Init+0x14>
    pHandle->hFaultState = MC_NO_ERROR;
 80043de:	2300      	movs	r3, #0
 80043e0:	82c3      	strh	r3, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80043e2:	8a43      	ldrh	r3, [r0, #18]
 80043e4:	8203      	strh	r3, [r0, #16]
}
 80043e6:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 80043e8:	3004      	adds	r0, #4
 80043ea:	f7fd fb43 	bl	8001a74 <RCM_RegisterRegConv>
 80043ee:	2326      	movs	r3, #38	; 0x26
 80043f0:	54e0      	strb	r0, [r4, r3]
    NTC_Clear( pHandle );
 80043f2:	0020      	movs	r0, r4
 80043f4:	f7ff ffea 	bl	80043cc <NTC_Clear>
 80043f8:	e7f5      	b.n	80043e6 <NTC_Init+0x12>
 80043fa:	46c0      	nop			; (mov r8, r8)

080043fc <NTC_CalcAvTemp>:
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80043fc:	7803      	ldrb	r3, [r0, #0]
{
 80043fe:	b510      	push	{r4, lr}
 8004400:	0004      	movs	r4, r0
 8004402:	2000      	movs	r0, #0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <NTC_CalcAvTemp+0x10>
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8004408:	82e0      	strh	r0, [r4, #22]
  {
    pHandle->hFaultState = MC_NO_ERROR;
  }

  return ( pHandle->hFaultState );
}
 800440a:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800440c:	3326      	adds	r3, #38	; 0x26
 800440e:	5ce0      	ldrb	r0, [r4, r3]
 8004410:	f7fd fbea 	bl	8001be8 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8004414:	4b07      	ldr	r3, [pc, #28]	; (8004434 <NTC_CalcAvTemp+0x38>)
 8004416:	4298      	cmp	r0, r3
 8004418:	d007      	beq.n	800442a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800441a:	8b21      	ldrh	r1, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800441c:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800441e:	1e4b      	subs	r3, r1, #1
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8004420:	4353      	muls	r3, r2
      wtemp += hAux;
 8004422:	18c0      	adds	r0, r0, r3
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8004424:	f7fb fe70 	bl	8000108 <__udivsi3>
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8004428:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800442a:	0020      	movs	r0, r4
 800442c:	f7ff ffc0 	bl	80043b0 <NTC_SetFaultState>
 8004430:	e7ea      	b.n	8004408 <NTC_CalcAvTemp+0xc>
 8004432:	46c0      	nop			; (mov r8, r8)
 8004434:	0000ffff 	.word	0x0000ffff

08004438 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8004438:	7803      	ldrb	r3, [r0, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10e      	bne.n	800445c <NTC_GetAvTemp_C+0x24>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
    wTemp -= ( int32_t )( pHandle->wV0 );
 800443e:	6a03      	ldr	r3, [r0, #32]
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8004440:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8004442:	1ad2      	subs	r2, r2, r3
    wTemp *= pHandle->hSensitivity;
 8004444:	211e      	movs	r1, #30
 8004446:	5e43      	ldrsh	r3, [r0, r1]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8004448:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp *= pHandle->hSensitivity;
 800444a:	435a      	muls	r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800444c:	17d3      	asrs	r3, r2, #31
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	189b      	adds	r3, r3, r2
 8004454:	141b      	asrs	r3, r3, #16
 8004456:	18c0      	adds	r0, r0, r3
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
 8004458:	b200      	sxth	r0, r0
}
 800445a:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 800445c:	8a80      	ldrh	r0, [r0, #20]
 800445e:	e7fb      	b.n	8004458 <NTC_GetAvTemp_C+0x20>

08004460 <PID_HandleInit>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8004460:	6803      	ldr	r3, [r0, #0]
 8004462:	6043      	str	r3, [r0, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8004464:	8c03      	ldrh	r3, [r0, #32]
 8004466:	8443      	strh	r3, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8004468:	2300      	movs	r3, #0
 800446a:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800446c:	6283      	str	r3, [r0, #40]	; 0x28
}
 800446e:	4770      	bx	lr

08004470 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8004470:	8081      	strh	r1, [r0, #4]
}
 8004472:	4770      	bx	lr

08004474 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8004474:	80c1      	strh	r1, [r0, #6]
}
 8004476:	4770      	bx	lr

08004478 <PID_GetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
 8004478:	2304      	movs	r3, #4
 800447a:	5ec0      	ldrsh	r0, [r0, r3]
}
 800447c:	4770      	bx	lr
 800447e:	46c0      	nop			; (mov r8, r8)

08004480 <PID_GetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
 8004480:	2306      	movs	r3, #6
 8004482:	5ec0      	ldrsh	r0, [r0, r3]
}
 8004484:	4770      	bx	lr
 8004486:	46c0      	nop			; (mov r8, r8)

08004488 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8004488:	6081      	str	r1, [r0, #8]

  return;
}
 800448a:	4770      	bx	lr

0800448c <PID_GetKPDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
 800448c:	8b00      	ldrh	r0, [r0, #24]
}
 800448e:	4770      	bx	lr

08004490 <PID_GetKIDivisor>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
 8004490:	8b40      	ldrh	r0, [r0, #26]
}
 8004492:	4770      	bx	lr

08004494 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8004494:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8004496:	4770      	bx	lr

08004498 <PID_GetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
 8004498:	2322      	movs	r3, #34	; 0x22
 800449a:	5ec0      	ldrsh	r0, [r0, r3]
}
 800449c:	4770      	bx	lr
 800449e:	46c0      	nop			; (mov r8, r8)

080044a0 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 80044a0:	0003      	movs	r3, r0
 80044a2:	b570      	push	{r4, r5, r6, lr}
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80044a4:	2216      	movs	r2, #22
 80044a6:	5e9e      	ldrsh	r6, [r3, r2]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80044a8:	2214      	movs	r2, #20
 80044aa:	5e80      	ldrsh	r0, [r0, r2]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 80044ac:	2406      	movs	r4, #6
 80044ae:	5f1d      	ldrsh	r5, [r3, r4]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80044b0:	2404      	movs	r4, #4
 80044b2:	5f1a      	ldrsh	r2, [r3, r4]
 80044b4:	2400      	movs	r4, #0
 80044b6:	434a      	muls	r2, r1
  if ( pHandle->hKiGain == 0 )
 80044b8:	2d00      	cmp	r5, #0
 80044ba:	d00b      	beq.n	80044d4 <PI_Controller+0x34>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80044bc:	4369      	muls	r1, r5
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80044be:	689c      	ldr	r4, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 80044c0:	1865      	adds	r5, r4, r1
 80044c2:	d41b      	bmi.n	80044fc <PI_Controller+0x5c>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 80044c4:	4021      	ands	r1, r4
 80044c6:	d424      	bmi.n	8004512 <PI_Controller+0x72>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 80044c8:	68dc      	ldr	r4, [r3, #12]
 80044ca:	42ac      	cmp	r4, r5
 80044cc:	db02      	blt.n	80044d4 <PI_Controller+0x34>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 80044ce:	691c      	ldr	r4, [r3, #16]
 80044d0:	42ac      	cmp	r4, r5
 80044d2:	dd1c      	ble.n	800450e <PI_Controller+0x6e>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 80044d4:	0025      	movs	r5, r4
 80044d6:	8b99      	ldrh	r1, [r3, #28]
 80044d8:	410a      	asrs	r2, r1
 80044da:	8bd9      	ldrh	r1, [r3, #30]
 80044dc:	410d      	asrs	r5, r1
 80044de:	1952      	adds	r2, r2, r5
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 80044e0:	4290      	cmp	r0, r2
 80044e2:	da03      	bge.n	80044ec <PI_Controller+0x4c>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 80044e4:	1a82      	subs	r2, r0, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 80044e6:	18a4      	adds	r4, r4, r2
 80044e8:	609c      	str	r4, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 80044ec:	4296      	cmp	r6, r2
 80044ee:	dd03      	ble.n	80044f8 <PI_Controller+0x58>
    wDischarge = hLowerOutputLimit - wOutput_32;
 80044f0:	1ab2      	subs	r2, r6, r2
 80044f2:	0030      	movs	r0, r6
  pHandle->wIntegralTerm += wDischarge;
 80044f4:	18a4      	adds	r4, r4, r2
 80044f6:	e7f7      	b.n	80044e8 <PI_Controller+0x48>
  return ( ( int16_t )( wOutput_32 ) );
 80044f8:	b210      	sxth	r0, r2
 80044fa:	e7f5      	b.n	80044e8 <PI_Controller+0x48>
      if ( pHandle->wIntegralTerm > 0 )
 80044fc:	2c00      	cmp	r4, #0
 80044fe:	dde3      	ble.n	80044c8 <PI_Controller+0x28>
        if ( wIntegral_Term > 0 )
 8004500:	2900      	cmp	r1, #0
 8004502:	dde1      	ble.n	80044c8 <PI_Controller+0x28>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8004504:	68dc      	ldr	r4, [r3, #12]
 8004506:	4904      	ldr	r1, [pc, #16]	; (8004518 <PI_Controller+0x78>)
          wIntegral_sum_temp = INT32_MAX;
 8004508:	0025      	movs	r5, r4
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800450a:	428c      	cmp	r4, r1
 800450c:	d1e2      	bne.n	80044d4 <PI_Controller+0x34>
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800450e:	002c      	movs	r4, r5
 8004510:	e7e0      	b.n	80044d4 <PI_Controller+0x34>
          wIntegral_sum_temp = -INT32_MAX;
 8004512:	4d02      	ldr	r5, [pc, #8]	; (800451c <PI_Controller+0x7c>)
 8004514:	e7d8      	b.n	80044c8 <PI_Controller+0x28>
 8004516:	46c0      	nop			; (mov r8, r8)
 8004518:	7fffffff 	.word	0x7fffffff
 800451c:	80000001 	.word	0x80000001

08004520 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004520:	2386      	movs	r3, #134	; 0x86
{
 8004522:	b570      	push	{r4, r5, r6, lr}
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	58c3      	ldr	r3, [r0, r3]
{
 8004528:	0005      	movs	r5, r0
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800452a:	210c      	movs	r1, #12
 800452c:	5e5a      	ldrsh	r2, [r3, r1]
 800452e:	2116      	movs	r1, #22
 8004530:	5e5e      	ldrsh	r6, [r3, r1]
 8004532:	4356      	muls	r6, r2
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8004534:	210e      	movs	r1, #14
 8004536:	5e5a      	ldrsh	r2, [r3, r1]
 8004538:	2118      	movs	r1, #24
 800453a:	5e5b      	ldrsh	r3, [r3, r1]
 800453c:	4353      	muls	r3, r2
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800453e:	18f6      	adds	r6, r6, r3
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004540:	2384      	movs	r3, #132	; 0x84
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	58c4      	ldr	r4, [r0, r3]
 8004546:	3308      	adds	r3, #8
 8004548:	58c0      	ldr	r0, [r0, r3]
 800454a:	f7ff fdc3 	bl	80040d4 <VBS_GetAvBusVoltage_V>
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800454e:	2196      	movs	r1, #150	; 0x96
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8004550:	4360      	muls	r0, r4
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8004552:	0089      	lsls	r1, r1, #2
 8004554:	f7fb fe62 	bl	800021c <__divsi3>

  wAux3 = wAux * wAux2;
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8004558:	21a0      	movs	r1, #160	; 0xa0
  wAux /= 65536;
 800455a:	17f4      	asrs	r4, r6, #31
 800455c:	0424      	lsls	r4, r4, #16
 800455e:	0c24      	lsrs	r4, r4, #16
 8004560:	19a4      	adds	r4, r4, r6
 8004562:	1424      	asrs	r4, r4, #16
  wAux3 = wAux * wAux2;
 8004564:	4344      	muls	r4, r0
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8004566:	0060      	lsls	r0, r4, #1
 8004568:	1900      	adds	r0, r0, r4
  wAux3 /= 65536;
 800456a:	0309      	lsls	r1, r1, #12
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800456c:	0040      	lsls	r0, r0, #1
  wAux3 /= 65536;
 800456e:	f7fb fe55 	bl	800021c <__divsi3>

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8004572:	b201      	sxth	r1, r0
 8004574:	0028      	movs	r0, r5
 8004576:	f7ff fef1 	bl	800435c <MPM_CalcElMotorPower>

}
 800457a:	bd70      	pop	{r4, r5, r6, pc}

0800457c <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 800457e:	2560      	movs	r5, #96	; 0x60
 8004580:	002e      	movs	r6, r5
 8004582:	6804      	ldr	r4, [r0, #0]
 8004584:	4026      	ands	r6, r4
  if (counter_mode == 0U)
 8004586:	4225      	tst	r5, r4
 8004588:	d119      	bne.n	80045be <waitForPolarizationEnd+0x42>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800458a:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800458c:	3201      	adds	r2, #1
 800458e:	0855      	lsrs	r5, r2, #1
 8004590:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004592:	2703      	movs	r7, #3
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8004594:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8004596:	2602      	movs	r6, #2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8004598:	427f      	negs	r7, r7
 800459a:	6107      	str	r7, [r0, #16]
  while (*cnt < NB_CONVERSIONS)
 800459c:	781c      	ldrb	r4, [r3, #0]
 800459e:	2c0f      	cmp	r4, #15
 80045a0:	d80c      	bhi.n	80045bc <waitForPolarizationEnd+0x40>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80045a2:	6904      	ldr	r4, [r0, #16]
 80045a4:	4226      	tst	r6, r4
 80045a6:	d0f9      	beq.n	800459c <waitForPolarizationEnd+0x20>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 80045a8:	3201      	adds	r2, #1
 80045aa:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80045ac:	6107      	str	r7, [r0, #16]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80045ae:	4295      	cmp	r5, r2
 80045b0:	d8f4      	bhi.n	800459c <waitForPolarizationEnd+0x20>
      {
        if (*cnt < NB_CONVERSIONS)
 80045b2:	781c      	ldrb	r4, [r3, #0]
 80045b4:	2c0f      	cmp	r4, #15
 80045b6:	d8f1      	bhi.n	800459c <waitForPolarizationEnd+0x20>
        {
          *SWerror = 1u;
 80045b8:	2301      	movs	r3, #1
 80045ba:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 80045bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 80045be:	2e60      	cmp	r6, #96	; 0x60
 80045c0:	d1e4      	bne.n	800458c <waitForPolarizationEnd+0x10>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 80045c2:	3201      	adds	r2, #1
 80045c4:	0155      	lsls	r5, r2, #5
 80045c6:	e7e4      	b.n	8004592 <waitForPolarizationEnd+0x16>

080045c8 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 80045c8:	b510      	push	{r4, lr}
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 80045ca:	6843      	ldr	r3, [r0, #4]
 80045cc:	4798      	blx	r3
}
 80045ce:	bd10      	pop	{r4, pc}

080045d0 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 80045d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045d2:	46c6      	mov	lr, r8
 80045d4:	b500      	push	{lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	9101      	str	r1, [sp, #4]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80045da:	b20a      	sxth	r2, r1
{
 80045dc:	000b      	movs	r3, r1
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80045de:	8e01      	ldrh	r1, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80045e0:	141b      	asrs	r3, r3, #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 80045e2:	4351      	muls	r1, r2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 80045e4:	2250      	movs	r2, #80	; 0x50
 80045e6:	5a84      	ldrh	r4, [r0, r2]
 80045e8:	4363      	muls	r3, r4
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	425e      	negs	r6, r3

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 80045ee:	1acd      	subs	r5, r1, r3
  wZ = ( wUBeta - wUAlpha ) / 2;
 80045f0:	1a71      	subs	r1, r6, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 80045f2:	0fea      	lsrs	r2, r5, #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 80045f4:	0fcb      	lsrs	r3, r1, #31
  wY = ( wUBeta + wUAlpha ) / 2;
 80045f6:	1952      	adds	r2, r2, r5
  wZ = ( wUBeta - wUAlpha ) / 2;
 80045f8:	185b      	adds	r3, r3, r1
  wY = ( wUBeta + wUAlpha ) / 2;
 80045fa:	1052      	asrs	r2, r2, #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 80045fc:	105b      	asrs	r3, r3, #1

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 80045fe:	1c6f      	adds	r7, r5, #1
 8004600:	db59      	blt.n	80046b6 <PWMC_SetPhaseVoltage+0xe6>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8004602:	1c4f      	adds	r7, r1, #1
 8004604:	db3a      	blt.n	800467c <PWMC_SetPhaseVoltage+0xac>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	17d3      	asrs	r3, r2, #31
 800460a:	039b      	lsls	r3, r3, #14
 800460c:	0b9b      	lsrs	r3, r3, #14
 800460e:	189b      	adds	r3, r3, r2
      wTimePhB = wTimePhA + wZ / 131072;
 8004610:	17ca      	asrs	r2, r1, #31
 8004612:	0392      	lsls	r2, r2, #14
 8004614:	0b92      	lsrs	r2, r2, #14
 8004616:	1852      	adds	r2, r2, r1
      wTimePhC = wTimePhA - wY / 131072;
 8004618:	17e9      	asrs	r1, r5, #31
 800461a:	0389      	lsls	r1, r1, #14
 800461c:	0b89      	lsrs	r1, r1, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800461e:	08a4      	lsrs	r4, r4, #2
 8004620:	149b      	asrs	r3, r3, #18
      wTimePhC = wTimePhA - wY / 131072;
 8004622:	1949      	adds	r1, r1, r5
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004624:	191b      	adds	r3, r3, r4
      wTimePhC = wTimePhA - wY / 131072;
 8004626:	1489      	asrs	r1, r1, #18
 8004628:	1a59      	subs	r1, r3, r1
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 800462a:	b28c      	uxth	r4, r1
 800462c:	46a0      	mov	r8, r4
 800462e:	2401      	movs	r4, #1
 8004630:	46a4      	mov	ip, r4
      wTimePhB = wTimePhA + wZ / 131072;
 8004632:	1492      	asrs	r2, r2, #18
 8004634:	18d2      	adds	r2, r2, r3
      pHandle->lowDuty = wTimePhB;
 8004636:	b297      	uxth	r7, r2
      pHandle->midDuty = wTimePhA;
 8004638:	b29e      	uxth	r6, r3
        pHandle->Sector = SECTOR_4;
 800463a:	243a      	movs	r4, #58	; 0x3a
 800463c:	4665      	mov	r5, ip
 800463e:	5505      	strb	r5, [r0, r4]
        pHandle->highDuty = wTimePhA;
 8004640:	4645      	mov	r5, r8
 8004642:	3406      	adds	r4, #6
        pHandle->lowDuty = wTimePhC;
 8004644:	8787      	strh	r7, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8004646:	87c6      	strh	r6, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8004648:	5305      	strh	r5, [r0, r4]
        pHandle->midDuty = wTimePhB;
        pHandle->highDuty = wTimePhC;
      }
  }

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 800464a:	43dc      	mvns	r4, r3
 800464c:	17e4      	asrs	r4, r4, #31
 800464e:	4023      	ands	r3, r4
 8004650:	43d4      	mvns	r4, r2
 8004652:	17e4      	asrs	r4, r4, #31
 8004654:	4022      	ands	r2, r4
 8004656:	43cc      	mvns	r4, r1
 8004658:	17e4      	asrs	r4, r4, #31
 800465a:	4021      	ands	r1, r4
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 800465c:	244e      	movs	r4, #78	; 0x4e
 800465e:	b29b      	uxth	r3, r3
 8004660:	b292      	uxth	r2, r2
 8004662:	b289      	uxth	r1, r1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8004664:	8643      	strh	r3, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8004666:	8682      	strh	r2, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8004668:	86c1      	strh	r1, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 800466a:	5b04      	ldrh	r4, [r0, r4]
 800466c:	2c01      	cmp	r4, #1
 800466e:	d03d      	beq.n	80046ec <PWMC_SetPhaseVoltage+0x11c>
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8004670:	6983      	ldr	r3, [r0, #24]
 8004672:	4798      	blx	r3
}
 8004674:	b002      	add	sp, #8
 8004676:	bc80      	pop	{r7}
 8004678:	46b8      	mov	r8, r7
 800467a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( wX <= 0 )
 800467c:	2e00      	cmp	r6, #0
 800467e:	dd67      	ble.n	8004750 <PWMC_SetPhaseVoltage+0x180>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004680:	1af3      	subs	r3, r6, r3
 8004682:	17da      	asrs	r2, r3, #31
 8004684:	0392      	lsls	r2, r2, #14
 8004686:	0b92      	lsrs	r2, r2, #14
 8004688:	18d3      	adds	r3, r2, r3
        wTimePhB = wTimePhA + wZ / 131072;
 800468a:	17ca      	asrs	r2, r1, #31
 800468c:	0392      	lsls	r2, r2, #14
 800468e:	0b92      	lsrs	r2, r2, #14
 8004690:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhB - wX / 131072;
 8004692:	17f1      	asrs	r1, r6, #31
 8004694:	03c9      	lsls	r1, r1, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8004696:	08a4      	lsrs	r4, r4, #2
 8004698:	149b      	asrs	r3, r3, #18
        wTimePhC = wTimePhB - wX / 131072;
 800469a:	0bc9      	lsrs	r1, r1, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800469c:	191b      	adds	r3, r3, r4
        wTimePhC = wTimePhB - wX / 131072;
 800469e:	1989      	adds	r1, r1, r6
        wTimePhB = wTimePhA + wZ / 131072;
 80046a0:	1492      	asrs	r2, r2, #18
 80046a2:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhB - wX / 131072;
 80046a4:	1449      	asrs	r1, r1, #17
 80046a6:	1a51      	subs	r1, r2, r1
        pHandle->highDuty = wTimePhC;
 80046a8:	b28c      	uxth	r4, r1
 80046aa:	46a0      	mov	r8, r4
 80046ac:	2400      	movs	r4, #0
        pHandle->lowDuty = wTimePhA;
 80046ae:	b29f      	uxth	r7, r3
        pHandle->highDuty = wTimePhC;
 80046b0:	46a4      	mov	ip, r4
        pHandle->midDuty = wTimePhB;
 80046b2:	b296      	uxth	r6, r2
        pHandle->highDuty = wTimePhC;
 80046b4:	e7c1      	b.n	800463a <PWMC_SetPhaseVoltage+0x6a>
    if ( wZ < 0 )
 80046b6:	1c4f      	adds	r7, r1, #1
 80046b8:	db65      	blt.n	8004786 <PWMC_SetPhaseVoltage+0x1b6>
      if ( wX <= 0 )
 80046ba:	2e00      	cmp	r6, #0
 80046bc:	dd2d      	ble.n	800471a <PWMC_SetPhaseVoltage+0x14a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 80046be:	1b92      	subs	r2, r2, r6
 80046c0:	17d3      	asrs	r3, r2, #31
 80046c2:	039b      	lsls	r3, r3, #14
 80046c4:	0b9b      	lsrs	r3, r3, #14
 80046c6:	189b      	adds	r3, r3, r2
 80046c8:	08a4      	lsrs	r4, r4, #2
 80046ca:	149b      	asrs	r3, r3, #18
 80046cc:	191b      	adds	r3, r3, r4
        pHandle->highDuty = wTimePhA;
 80046ce:	b29c      	uxth	r4, r3
 80046d0:	46a0      	mov	r8, r4
 80046d2:	2402      	movs	r4, #2
        wTimePhC = wTimePhA - wY / 131072;
 80046d4:	17e9      	asrs	r1, r5, #31
 80046d6:	0389      	lsls	r1, r1, #14
 80046d8:	0b89      	lsrs	r1, r1, #14
 80046da:	1949      	adds	r1, r1, r5
 80046dc:	1489      	asrs	r1, r1, #18
 80046de:	1a59      	subs	r1, r3, r1
        wTimePhB = wTimePhC + wX / 131072;
 80046e0:	1472      	asrs	r2, r6, #17
 80046e2:	1852      	adds	r2, r2, r1
        pHandle->highDuty = wTimePhA;
 80046e4:	46a4      	mov	ip, r4
        pHandle->lowDuty = wTimePhB;
 80046e6:	b297      	uxth	r7, r2
        pHandle->midDuty = wTimePhC;
 80046e8:	b28e      	uxth	r6, r1
        pHandle->highDuty = wTimePhA;
 80046ea:	e7a6      	b.n	800463a <PWMC_SetPhaseVoltage+0x6a>
    if ( pHandle->Ia > 0 )
 80046ec:	3447      	adds	r4, #71	; 0x47
 80046ee:	5f04      	ldrsh	r4, [r0, r4]
 80046f0:	2c00      	cmp	r4, #0
 80046f2:	dd69      	ble.n	80047c8 <PWMC_SetPhaseVoltage+0x1f8>
      pHandle->CntPhA += pHandle->DTCompCnt;
 80046f4:	2454      	movs	r4, #84	; 0x54
 80046f6:	5b04      	ldrh	r4, [r0, r4]
 80046f8:	18e3      	adds	r3, r4, r3
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	8643      	strh	r3, [r0, #50]	; 0x32
    if ( pHandle->Ib > 0 )
 80046fe:	234a      	movs	r3, #74	; 0x4a
 8004700:	5ec3      	ldrsh	r3, [r0, r3]
 8004702:	2b00      	cmp	r3, #0
 8004704:	dd5d      	ble.n	80047c2 <PWMC_SetPhaseVoltage+0x1f2>
      pHandle->CntPhB += pHandle->DTCompCnt;
 8004706:	1912      	adds	r2, r2, r4
 8004708:	b292      	uxth	r2, r2
    if ( pHandle->Ic > 0 )
 800470a:	234c      	movs	r3, #76	; 0x4c
 800470c:	8682      	strh	r2, [r0, #52]	; 0x34
 800470e:	5ec3      	ldrsh	r3, [r0, r3]
 8004710:	2b00      	cmp	r3, #0
 8004712:	dd53      	ble.n	80047bc <PWMC_SetPhaseVoltage+0x1ec>
      pHandle->CntPhC += pHandle->DTCompCnt;
 8004714:	190c      	adds	r4, r1, r4
 8004716:	86c4      	strh	r4, [r0, #54]	; 0x36
 8004718:	e7aa      	b.n	8004670 <PWMC_SetPhaseVoltage+0xa0>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800471a:	1af3      	subs	r3, r6, r3
 800471c:	17da      	asrs	r2, r3, #31
 800471e:	0392      	lsls	r2, r2, #14
 8004720:	0b92      	lsrs	r2, r2, #14
 8004722:	18d3      	adds	r3, r2, r3
 8004724:	08a4      	lsrs	r4, r4, #2
 8004726:	149b      	asrs	r3, r3, #18
 8004728:	191b      	adds	r3, r3, r4
        pHandle->highDuty = wTimePhA;
 800472a:	b29c      	uxth	r4, r3
 800472c:	46a0      	mov	r8, r4
 800472e:	2403      	movs	r4, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8004730:	17ca      	asrs	r2, r1, #31
 8004732:	0392      	lsls	r2, r2, #14
 8004734:	0b92      	lsrs	r2, r2, #14
 8004736:	1852      	adds	r2, r2, r1
        wTimePhC = wTimePhB - wX / 131072;
 8004738:	17f1      	asrs	r1, r6, #31
 800473a:	03c9      	lsls	r1, r1, #15
 800473c:	0bc9      	lsrs	r1, r1, #15
 800473e:	1989      	adds	r1, r1, r6
        wTimePhB = wTimePhA + wZ / 131072;
 8004740:	1492      	asrs	r2, r2, #18
 8004742:	18d2      	adds	r2, r2, r3
        wTimePhC = wTimePhB - wX / 131072;
 8004744:	1449      	asrs	r1, r1, #17
 8004746:	1a51      	subs	r1, r2, r1
        pHandle->lowDuty = wTimePhC;
 8004748:	46a4      	mov	ip, r4
 800474a:	b28f      	uxth	r7, r1
        pHandle->midDuty = wTimePhB;
 800474c:	b296      	uxth	r6, r2
        pHandle->highDuty = wTimePhA;
 800474e:	e774      	b.n	800463a <PWMC_SetPhaseVoltage+0x6a>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004750:	1b92      	subs	r2, r2, r6
 8004752:	17d3      	asrs	r3, r2, #31
 8004754:	039b      	lsls	r3, r3, #14
 8004756:	0b9b      	lsrs	r3, r3, #14
        wTimePhC = wTimePhA - wY / 131072;
 8004758:	17e9      	asrs	r1, r5, #31
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800475a:	189b      	adds	r3, r3, r2
        wTimePhC = wTimePhA - wY / 131072;
 800475c:	0389      	lsls	r1, r1, #14
        wTimePhB = wTimePhC + wX / 131072;
 800475e:	17f2      	asrs	r2, r6, #31
        wTimePhC = wTimePhA - wY / 131072;
 8004760:	0b89      	lsrs	r1, r1, #14
        wTimePhB = wTimePhC + wX / 131072;
 8004762:	03d2      	lsls	r2, r2, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8004764:	08a4      	lsrs	r4, r4, #2
 8004766:	149b      	asrs	r3, r3, #18
        wTimePhC = wTimePhA - wY / 131072;
 8004768:	1949      	adds	r1, r1, r5
        wTimePhB = wTimePhC + wX / 131072;
 800476a:	0bd2      	lsrs	r2, r2, #15
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800476c:	191b      	adds	r3, r3, r4
        wTimePhB = wTimePhC + wX / 131072;
 800476e:	1992      	adds	r2, r2, r6
        wTimePhC = wTimePhA - wY / 131072;
 8004770:	1489      	asrs	r1, r1, #18
 8004772:	1a59      	subs	r1, r3, r1
        wTimePhB = wTimePhC + wX / 131072;
 8004774:	1452      	asrs	r2, r2, #17
 8004776:	1852      	adds	r2, r2, r1
        pHandle->highDuty = wTimePhB;
 8004778:	b294      	uxth	r4, r2
 800477a:	46a0      	mov	r8, r4
 800477c:	2405      	movs	r4, #5
        pHandle->lowDuty = wTimePhA;
 800477e:	b29f      	uxth	r7, r3
        pHandle->midDuty = wTimePhC;
 8004780:	46a4      	mov	ip, r4
 8004782:	b28e      	uxth	r6, r1
        pHandle->highDuty = wTimePhB;
 8004784:	e759      	b.n	800463a <PWMC_SetPhaseVoltage+0x6a>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004786:	1ad2      	subs	r2, r2, r3
 8004788:	17d3      	asrs	r3, r2, #31
 800478a:	039b      	lsls	r3, r3, #14
 800478c:	0b9b      	lsrs	r3, r3, #14
 800478e:	189b      	adds	r3, r3, r2
      wTimePhB = wTimePhA + wZ / 131072;
 8004790:	17ca      	asrs	r2, r1, #31
 8004792:	0392      	lsls	r2, r2, #14
 8004794:	0b92      	lsrs	r2, r2, #14
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8004796:	08a4      	lsrs	r4, r4, #2
      wTimePhB = wTimePhA + wZ / 131072;
 8004798:	1852      	adds	r2, r2, r1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800479a:	149b      	asrs	r3, r3, #18
 800479c:	191b      	adds	r3, r3, r4
      wTimePhB = wTimePhA + wZ / 131072;
 800479e:	1492      	asrs	r2, r2, #18
 80047a0:	18d2      	adds	r2, r2, r3
      pHandle->highDuty = wTimePhB;
 80047a2:	b294      	uxth	r4, r2
 80047a4:	46a0      	mov	r8, r4
 80047a6:	2404      	movs	r4, #4
      wTimePhC = wTimePhA - wY / 131072;
 80047a8:	17e9      	asrs	r1, r5, #31
 80047aa:	0389      	lsls	r1, r1, #14
 80047ac:	0b89      	lsrs	r1, r1, #14
 80047ae:	1949      	adds	r1, r1, r5
 80047b0:	1489      	asrs	r1, r1, #18
 80047b2:	1a59      	subs	r1, r3, r1
      pHandle->lowDuty = wTimePhC;
 80047b4:	46a4      	mov	ip, r4
 80047b6:	b28f      	uxth	r7, r1
      pHandle->midDuty = wTimePhA;
 80047b8:	b29e      	uxth	r6, r3
      pHandle->highDuty = wTimePhB;
 80047ba:	e73e      	b.n	800463a <PWMC_SetPhaseVoltage+0x6a>
      pHandle->CntPhC -= pHandle->DTCompCnt;
 80047bc:	1b09      	subs	r1, r1, r4
 80047be:	86c1      	strh	r1, [r0, #54]	; 0x36
 80047c0:	e756      	b.n	8004670 <PWMC_SetPhaseVoltage+0xa0>
      pHandle->CntPhB -= pHandle->DTCompCnt;
 80047c2:	1b12      	subs	r2, r2, r4
 80047c4:	b292      	uxth	r2, r2
 80047c6:	e7a0      	b.n	800470a <PWMC_SetPhaseVoltage+0x13a>
      pHandle->CntPhA -= pHandle->DTCompCnt;
 80047c8:	2454      	movs	r4, #84	; 0x54
 80047ca:	5b04      	ldrh	r4, [r0, r4]
 80047cc:	1b1b      	subs	r3, r3, r4
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	e794      	b.n	80046fc <PWMC_SetPhaseVoltage+0x12c>
 80047d2:	46c0      	nop			; (mov r8, r8)

080047d4 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 80047d4:	b510      	push	{r4, lr}
  pHandle->pFctSwitchOffPwm( pHandle );
 80047d6:	6883      	ldr	r3, [r0, #8]
 80047d8:	4798      	blx	r3
}
 80047da:	bd10      	pop	{r4, pc}

080047dc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 80047dc:	b570      	push	{r4, r5, r6, lr}
 80047de:	0004      	movs	r4, r0
  bool retVal = false;
  if ( action == CRC_START )
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d011      	beq.n	8004808 <PWMC_CurrentReadingCalibr+0x2c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 80047e4:	2901      	cmp	r1, #1
 80047e6:	d002      	beq.n	80047ee <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80047e8:	2500      	movs	r5, #0
  }
  else
  {
  }
  return retVal;
}
 80047ea:	0028      	movs	r0, r5
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80047ee:	2244      	movs	r2, #68	; 0x44
 80047f0:	5a83      	ldrh	r3, [r0, r2]
      retVal = true;
 80047f2:	2501      	movs	r5, #1
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0f8      	beq.n	80047ea <PWMC_CurrentReadingCalibr+0xe>
      pHandle->OffCalibrWaitTimeCounter--;
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	5283      	strh	r3, [r0, r2]
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f2      	bne.n	80047e8 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8004802:	6903      	ldr	r3, [r0, #16]
 8004804:	4798      	blx	r3
        retVal = true;
 8004806:	e7f0      	b.n	80047ea <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8004808:	f7ff ffe4 	bl	80047d4 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800480c:	2352      	movs	r3, #82	; 0x52
 800480e:	2244      	movs	r2, #68	; 0x44
 8004810:	5ae3      	ldrh	r3, [r4, r3]
 8004812:	52a3      	strh	r3, [r4, r2]
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e7      	bne.n	80047e8 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8004818:	0020      	movs	r0, r4
 800481a:	6923      	ldr	r3, [r4, #16]
 800481c:	4798      	blx	r3
      retVal = true;
 800481e:	2501      	movs	r5, #1
 8004820:	e7e3      	b.n	80047ea <PWMC_CurrentReadingCalibr+0xe>
 8004822:	46c0      	nop			; (mov r8, r8)

08004824 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 8004824:	b510      	push	{r4, lr}
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8004826:	69c3      	ldr	r3, [r0, #28]
 8004828:	4798      	blx	r3
}
 800482a:	bd10      	pop	{r4, pc}

0800482c <R3_1_GetPhaseCurrents>:
 * @brief  It computes and return latest converted motor phase currents
 * @param  pHdl: handler of the current instance of the PWM component
 * @retval ab_t Ia and Ib current in ab_t format
 */
__weak void R3_1_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800482c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800482e:	2470      	movs	r4, #112	; 0x70
 8004830:	4a54      	ldr	r2, [pc, #336]	; (8004984 <R3_1_GetPhaseCurrents+0x158>)
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8004832:	2504      	movs	r5, #4
 8004834:	6853      	ldr	r3, [r2, #4]
 8004836:	43a3      	bics	r3, r4
 8004838:	6053      	str	r3, [r2, #4]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);

  bSector = ( uint8_t ) pHandle->_Super.Sector;
 800483a:	233a      	movs	r3, #58	; 0x3a
 800483c:	4c52      	ldr	r4, [pc, #328]	; (8004988 <R3_1_GetPhaseCurrents+0x15c>)
 800483e:	5cc3      	ldrb	r3, [r0, r3]
 8004840:	68e2      	ldr	r2, [r4, #12]
 8004842:	43aa      	bics	r2, r5
 8004844:	60e2      	str	r2, [r4, #12]

  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004846:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004848:	009c      	lsls	r4, r3, #2
 800484a:	1912      	adds	r2, r2, r4
 800484c:	6b54      	ldr	r4, [r2, #52]	; 0x34
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 800484e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004850:	8824      	ldrh	r4, [r4, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004852:	8816      	ldrh	r6, [r2, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector];
 8004854:	b2a4      	uxth	r4, r4
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector];
 8004856:	b2b6      	uxth	r6, r6
  
  switch ( bSector )
 8004858:	2b04      	cmp	r3, #4
 800485a:	d811      	bhi.n	8004880 <R3_1_GetPhaseCurrents+0x54>
 800485c:	2b02      	cmp	r3, #2
 800485e:	d847      	bhi.n	80048f0 <R3_1_GetPhaseCurrents+0xc4>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d02e      	beq.n	80048c2 <R3_1_GetPhaseCurrents+0x96>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) ------------------------------*/
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004864:	6dc2      	ldr	r2, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8004866:	4d49      	ldr	r5, [pc, #292]	; (800498c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8004868:	1b12      	subs	r2, r2, r4
      if ( wAux < -INT16_MAX )
 800486a:	42aa      	cmp	r2, r5
 800486c:	db19      	blt.n	80048a2 <R3_1_GetPhaseCurrents+0x76>
      {
        pStator_Currents->a = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	429a      	cmp	r2, r3
 8004874:	da00      	bge.n	8004878 <R3_1_GetPhaseCurrents+0x4c>
 8004876:	e06e      	b.n	8004956 <R3_1_GetPhaseCurrents+0x12a>
 8004878:	4b45      	ldr	r3, [pc, #276]	; (8004990 <R3_1_GetPhaseCurrents+0x164>)
 800487a:	001a      	movs	r2, r3
 800487c:	001d      	movs	r5, r3
 800487e:	e012      	b.n	80048a6 <R3_1_GetPhaseCurrents+0x7a>
  switch ( bSector )
 8004880:	2b05      	cmp	r3, #5
 8004882:	d01e      	beq.n	80048c2 <R3_1_GetPhaseCurrents+0x96>

    default:
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
 8004884:	2300      	movs	r3, #0
 8004886:	5ecd      	ldrsh	r5, [r1, r3]
  pHandle->_Super.Ib = pStator_Currents->b;
 8004888:	2302      	movs	r3, #2
 800488a:	5ecc      	ldrsh	r4, [r1, r3]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800488c:	884a      	ldrh	r2, [r1, #2]
 800488e:	880b      	ldrh	r3, [r1, #0]
  pHandle->_Super.Ia = pStator_Currents->a;
 8004890:	2148      	movs	r1, #72	; 0x48
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004892:	189b      	adds	r3, r3, r2
 8004894:	224c      	movs	r2, #76	; 0x4c
  pHandle->_Super.Ia = pStator_Currents->a;
 8004896:	5245      	strh	r5, [r0, r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004898:	425b      	negs	r3, r3
  pHandle->_Super.Ib = pStator_Currents->b;
 800489a:	3102      	adds	r1, #2
 800489c:	5244      	strh	r4, [r0, r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800489e:	5283      	strh	r3, [r0, r2]
}
 80048a0:	bd70      	pop	{r4, r5, r6, pc}
 80048a2:	002a      	movs	r2, r5
 80048a4:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <R3_1_GetPhaseCurrents+0x168>)
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 80048a6:	6e44      	ldr	r4, [r0, #100]	; 0x64
        pStator_Currents->a = -INT16_MAX;
 80048a8:	800d      	strh	r5, [r1, #0]
      wAux = -wAux -  ( int32_t )pStator_Currents->a;         /* Ib  */
 80048aa:	1b34      	subs	r4, r6, r4
 80048ac:	1aa2      	subs	r2, r4, r2
      if ( wAux > INT16_MAX )
 80048ae:	2480      	movs	r4, #128	; 0x80
 80048b0:	0224      	lsls	r4, r4, #8
 80048b2:	42a2      	cmp	r2, r4
 80048b4:	da3a      	bge.n	800492c <R3_1_GetPhaseCurrents+0x100>
      else  if ( wAux < -INT16_MAX )
 80048b6:	4c35      	ldr	r4, [pc, #212]	; (800498c <R3_1_GetPhaseCurrents+0x160>)
 80048b8:	42a2      	cmp	r2, r4
 80048ba:	da54      	bge.n	8004966 <R3_1_GetPhaseCurrents+0x13a>
        pStator_Currents->b = -INT16_MAX;
 80048bc:	4a35      	ldr	r2, [pc, #212]	; (8004994 <R3_1_GetPhaseCurrents+0x168>)
 80048be:	804c      	strh	r4, [r1, #2]
 80048c0:	e7e6      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80048c2:	6e05      	ldr	r5, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 80048c4:	4b31      	ldr	r3, [pc, #196]	; (800498c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80048c6:	1b2d      	subs	r5, r5, r4
      if ( wAux < -INT16_MAX )
 80048c8:	429d      	cmp	r5, r3
 80048ca:	db33      	blt.n	8004934 <R3_1_GetPhaseCurrents+0x108>
      else  if ( wAux > INT16_MAX )
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	429d      	cmp	r5, r3
 80048d2:	da4e      	bge.n	8004972 <R3_1_GetPhaseCurrents+0x146>
        pStator_Currents->b = ( int16_t )wAux;
 80048d4:	b22c      	sxth	r4, r5
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80048d6:	b2aa      	uxth	r2, r5
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80048d8:	6e43      	ldr	r3, [r0, #100]	; 0x64
        pStator_Currents->b = -INT16_MAX;
 80048da:	804c      	strh	r4, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80048dc:	1af3      	subs	r3, r6, r3
 80048de:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 80048e0:	2580      	movs	r5, #128	; 0x80
 80048e2:	022d      	lsls	r5, r5, #8
 80048e4:	42ab      	cmp	r3, r5
 80048e6:	db30      	blt.n	800494a <R3_1_GetPhaseCurrents+0x11e>
        pStator_Currents->a = INT16_MAX;
 80048e8:	4b29      	ldr	r3, [pc, #164]	; (8004990 <R3_1_GetPhaseCurrents+0x164>)
 80048ea:	001d      	movs	r5, r3
 80048ec:	800b      	strh	r3, [r1, #0]
 80048ee:	e7cf      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80048f0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
      if ( wAux < -INT16_MAX )
 80048f2:	4a26      	ldr	r2, [pc, #152]	; (800498c <R3_1_GetPhaseCurrents+0x160>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 80048f4:	1b1b      	subs	r3, r3, r4
      if ( wAux < -INT16_MAX )
 80048f6:	0015      	movs	r5, r2
 80048f8:	4293      	cmp	r3, r2
 80048fa:	db04      	blt.n	8004906 <R3_1_GetPhaseCurrents+0xda>
      else  if ( wAux > INT16_MAX )
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	0212      	lsls	r2, r2, #8
 8004900:	4293      	cmp	r3, r2
 8004902:	da34      	bge.n	800496e <R3_1_GetPhaseCurrents+0x142>
        pStator_Currents->a = ( int16_t )wAux;
 8004904:	b21d      	sxth	r5, r3
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8004906:	6e02      	ldr	r2, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8004908:	4c20      	ldr	r4, [pc, #128]	; (800498c <R3_1_GetPhaseCurrents+0x160>)
        pStator_Currents->a = -INT16_MAX;
 800490a:	800d      	strh	r5, [r1, #0]
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800490c:	1b92      	subs	r2, r2, r6
      if ( wAux < -INT16_MAX )
 800490e:	42a2      	cmp	r2, r4
 8004910:	db08      	blt.n	8004924 <R3_1_GetPhaseCurrents+0xf8>
      else  if ( wAux > INT16_MAX )
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	429a      	cmp	r2, r3
 8004918:	db20      	blt.n	800495c <R3_1_GetPhaseCurrents+0x130>
        pStator_Currents->b = INT16_MAX;
 800491a:	4a1d      	ldr	r2, [pc, #116]	; (8004990 <R3_1_GetPhaseCurrents+0x164>)
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800491c:	b2ab      	uxth	r3, r5
 800491e:	0014      	movs	r4, r2
        pStator_Currents->b = INT16_MAX;
 8004920:	804a      	strh	r2, [r1, #2]
 8004922:	e7b5      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
        pStator_Currents->b = -INT16_MAX;
 8004924:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <R3_1_GetPhaseCurrents+0x168>)
 8004926:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004928:	b2ab      	uxth	r3, r5
 800492a:	e7b1      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
        pStator_Currents->b = INT16_MAX;
 800492c:	4a18      	ldr	r2, [pc, #96]	; (8004990 <R3_1_GetPhaseCurrents+0x164>)
 800492e:	0014      	movs	r4, r2
 8004930:	804a      	strh	r2, [r1, #2]
 8004932:	e7ad      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
 8004934:	001d      	movs	r5, r3
 8004936:	001c      	movs	r4, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8004938:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800493a:	4a16      	ldr	r2, [pc, #88]	; (8004994 <R3_1_GetPhaseCurrents+0x168>)
 800493c:	1af3      	subs	r3, r6, r3
 800493e:	1b5b      	subs	r3, r3, r5
      if ( wAux > INT16_MAX )
 8004940:	2580      	movs	r5, #128	; 0x80
        pStator_Currents->b = -INT16_MAX;
 8004942:	804c      	strh	r4, [r1, #2]
      if ( wAux > INT16_MAX )
 8004944:	022d      	lsls	r5, r5, #8
 8004946:	42ab      	cmp	r3, r5
 8004948:	dace      	bge.n	80048e8 <R3_1_GetPhaseCurrents+0xbc>
      else  if ( wAux < -INT16_MAX )
 800494a:	4d10      	ldr	r5, [pc, #64]	; (800498c <R3_1_GetPhaseCurrents+0x160>)
 800494c:	42ab      	cmp	r3, r5
 800494e:	da14      	bge.n	800497a <R3_1_GetPhaseCurrents+0x14e>
        pStator_Currents->a = -INT16_MAX;
 8004950:	4b10      	ldr	r3, [pc, #64]	; (8004994 <R3_1_GetPhaseCurrents+0x168>)
 8004952:	800d      	strh	r5, [r1, #0]
 8004954:	e79c      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
        pStator_Currents->a = ( int16_t )wAux;
 8004956:	b215      	sxth	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004958:	b293      	uxth	r3, r2
 800495a:	e7a4      	b.n	80048a6 <R3_1_GetPhaseCurrents+0x7a>
        pStator_Currents->b = ( int16_t )wAux;
 800495c:	b214      	sxth	r4, r2
 800495e:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8004960:	b2ab      	uxth	r3, r5
 8004962:	b292      	uxth	r2, r2
 8004964:	e794      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
        pStator_Currents->b = ( int16_t )wAux;
 8004966:	b214      	sxth	r4, r2
 8004968:	804c      	strh	r4, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800496a:	b292      	uxth	r2, r2
 800496c:	e790      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
 800496e:	4d08      	ldr	r5, [pc, #32]	; (8004990 <R3_1_GetPhaseCurrents+0x164>)
 8004970:	e7c9      	b.n	8004906 <R3_1_GetPhaseCurrents+0xda>
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <R3_1_GetPhaseCurrents+0x164>)
 8004974:	0015      	movs	r5, r2
 8004976:	0014      	movs	r4, r2
 8004978:	e7ae      	b.n	80048d8 <R3_1_GetPhaseCurrents+0xac>
        pStator_Currents->a = ( int16_t )wAux;
 800497a:	b21d      	sxth	r5, r3
 800497c:	800d      	strh	r5, [r1, #0]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800497e:	b29b      	uxth	r3, r3
 8004980:	e786      	b.n	8004890 <R3_1_GetPhaseCurrents+0x64>
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40012400 	.word	0x40012400
 800498c:	ffff8001 	.word	0xffff8001
 8004990:	00007fff 	.word	0x00007fff
 8004994:	00008001 	.word	0x00008001

08004998 <R3_1_HFCurrentsCalibrationAB>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 8004998:	2373      	movs	r3, #115	; 0x73
{
 800499a:	b530      	push	{r4, r5, lr}
 800499c:	2570      	movs	r5, #112	; 0x70
 800499e:	4a0f      	ldr	r2, [pc, #60]	; (80049dc <R3_1_HFCurrentsCalibrationAB+0x44>)
  uint8_t bSector = pHandle->CalibSector;
 80049a0:	5cc4      	ldrb	r4, [r0, r3]
 80049a2:	6853      	ldr	r3, [r2, #4]
 80049a4:	43ab      	bics	r3, r5
 80049a6:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80049a8:	2372      	movs	r3, #114	; 0x72
 80049aa:	5cc2      	ldrb	r2, [r0, r3]
 80049ac:	2a0f      	cmp	r2, #15
 80049ae:	d810      	bhi.n	80049d2 <R3_1_HFCurrentsCalibrationAB+0x3a>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 80049b0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80049b2:	00a4      	lsls	r4, r4, #2
 80049b4:	1912      	adds	r2, r2, r4
 80049b6:	6b54      	ldr	r4, [r2, #52]	; 0x34
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 80049b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[bSector];
 80049ba:	8825      	ldrh	r5, [r4, #0]
 80049bc:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80049be:	1964      	adds	r4, r4, r5
 80049c0:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 80049c2:	8814      	ldrh	r4, [r2, #0]
 80049c4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80049c6:	1912      	adds	r2, r2, r4
 80049c8:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 80049ca:	5cc2      	ldrb	r2, [r0, r3]
 80049cc:	3201      	adds	r2, #1
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 80049d6:	804b      	strh	r3, [r1, #2]
}
 80049d8:	bd30      	pop	{r4, r5, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	40012c00 	.word	0x40012c00

080049e0 <R3_1_HFCurrentsCalibrationC>:
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;
  uint8_t bSector = pHandle->CalibSector;
 80049e0:	2373      	movs	r3, #115	; 0x73
{
 80049e2:	b530      	push	{r4, r5, lr}
 80049e4:	2570      	movs	r5, #112	; 0x70
 80049e6:	4c0e      	ldr	r4, [pc, #56]	; (8004a20 <R3_1_HFCurrentsCalibrationC+0x40>)
  uint8_t bSector = pHandle->CalibSector;
 80049e8:	5cc2      	ldrb	r2, [r0, r3]
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	43ab      	bics	r3, r5
 80049ee:	6063      	str	r3, [r4, #4]

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  pHandle->_Super.Sector = SECTOR_1;
 80049f0:	233a      	movs	r3, #58	; 0x3a
 80049f2:	2400      	movs	r4, #0
 80049f4:	54c4      	strb	r4, [r0, r3]
  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80049f6:	3338      	adds	r3, #56	; 0x38
 80049f8:	5cc4      	ldrb	r4, [r0, r3]
 80049fa:	2c0f      	cmp	r4, #15
 80049fc:	d80c      	bhi.n	8004a18 <R3_1_HFCurrentsCalibrationC+0x38>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[bSector];
 80049fe:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8004a00:	3212      	adds	r2, #18
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	18a2      	adds	r2, r4, r2
 8004a06:	6852      	ldr	r2, [r2, #4]
 8004a08:	8814      	ldrh	r4, [r2, #0]
 8004a0a:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004a0c:	1912      	adds	r2, r2, r4
 8004a0e:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8004a10:	5cc2      	ldrb	r2, [r0, r3]
 8004a12:	3201      	adds	r2, #1
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	54c2      	strb	r2, [r0, r3]
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	800b      	strh	r3, [r1, #0]
  pStator_Currents->b = 0;
 8004a1c:	804b      	strh	r3, [r1, #2]
}
 8004a1e:	bd30      	pop	{r4, r5, pc}
 8004a20:	40012c00 	.word	0x40012c00

08004a24 <R3_1_Init>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004a24:	2104      	movs	r1, #4
 8004a26:	4a3b      	ldr	r2, [pc, #236]	; (8004b14 <R3_1_Init+0xf0>)
{
 8004a28:	b530      	push	{r4, r5, lr}
 8004a2a:	6853      	ldr	r3, [r2, #4]
 8004a2c:	0004      	movs	r4, r0
 8004a2e:	438b      	bics	r3, r1
 8004a30:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004a32:	6011      	str	r1, [r2, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
 8004a34:	6853      	ldr	r3, [r2, #4]
 8004a36:	3104      	adds	r1, #4
 8004a38:	438b      	bics	r3, r1
 8004a3a:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
 8004a3c:	6011      	str	r1, [r2, #0]
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8004a3e:	2180      	movs	r1, #128	; 0x80
 8004a40:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <R3_1_Init+0xf4>)
 8004a42:	0309      	lsls	r1, r1, #12
 8004a44:	6818      	ldr	r0, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004a46:	2580      	movs	r5, #128	; 0x80
 8004a48:	4301      	orrs	r1, r0
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004a4a:	2081      	movs	r0, #129	; 0x81
 8004a4c:	6019      	str	r1, [r3, #0]
 8004a4e:	4933      	ldr	r1, [pc, #204]	; (8004b1c <R3_1_Init+0xf8>)
 8004a50:	4240      	negs	r0, r0
 8004a52:	6108      	str	r0, [r1, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8004a54:	68c8      	ldr	r0, [r1, #12]
 8004a56:	b083      	sub	sp, #12
 8004a58:	4328      	orrs	r0, r5
 8004a5a:	60c8      	str	r0, [r1, #12]
    LL_TIM_SetCounter( TIM1, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 8004a5c:	206c      	movs	r0, #108	; 0x6c
 8004a5e:	5a20      	ldrh	r0, [r4, r0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004a60:	3d7e      	subs	r5, #126	; 0x7e
 8004a62:	3801      	subs	r0, #1
  WRITE_REG(TIMx->CNT, Counter);
 8004a64:	6248      	str	r0, [r1, #36]	; 0x24
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004a66:	2080      	movs	r0, #128	; 0x80
 8004a68:	6999      	ldr	r1, [r3, #24]
 8004a6a:	03c0      	lsls	r0, r0, #15
 8004a6c:	4301      	orrs	r1, r0
 8004a6e:	6199      	str	r1, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004a70:	699b      	ldr	r3, [r3, #24]
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB1_GRP2_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8004a72:	492b      	ldr	r1, [pc, #172]	; (8004b20 <R3_1_Init+0xfc>)
 8004a74:	4003      	ands	r3, r0
 8004a76:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004a78:	9b01      	ldr	r3, [sp, #4]
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	68c8      	ldr	r0, [r1, #12]
 8004a7e:	011b      	lsls	r3, r3, #4
 8004a80:	4303      	orrs	r3, r0
 8004a82:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(ADCx->CR,
 8004a84:	6891      	ldr	r1, [r2, #8]
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <R3_1_Init+0x100>)
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004a88:	2010      	movs	r0, #16
  MODIFY_REG(ADCx->CR,
 8004a8a:	4019      	ands	r1, r3
 8004a8c:	3318      	adds	r3, #24
 8004a8e:	430b      	orrs	r3, r1
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004a90:	2104      	movs	r1, #4
  MODIFY_REG(ADCx->CR,
 8004a92:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8004a94:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	dbfc      	blt.n	8004a94 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8004a9a:	6893      	ldr	r3, [r2, #8]
    while ((LL_ADC_IsCalibrationOnGoing(ADC1) == SET) ||
 8004a9c:	4219      	tst	r1, r3
 8004a9e:	d1f9      	bne.n	8004a94 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP));
 8004aa0:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsConversionOngoing(ADC1) == SET) ||
 8004aa2:	4218      	tst	r0, r3
 8004aa4:	d1f6      	bne.n	8004a94 <R3_1_Init+0x70>
  return (READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS));
 8004aa6:	6893      	ldr	r3, [r2, #8]
           (LL_ADC_REG_IsStopConversionOngoing(ADC1) == SET) ||
 8004aa8:	421d      	tst	r5, r3
 8004aaa:	d1f3      	bne.n	8004a94 <R3_1_Init+0x70>
  MODIFY_REG(ADCx->CR,
 8004aac:	6893      	ldr	r3, [r2, #8]
 8004aae:	491d      	ldr	r1, [pc, #116]	; (8004b24 <R3_1_Init+0x100>)
 8004ab0:	400b      	ands	r3, r1
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6093      	str	r3, [r2, #8]
    while ( LL_ADC_IsActiveFlag_ADRDY( ADC1 ) == RESET )
 8004ab8:	2201      	movs	r2, #1
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 8004aba:	4916      	ldr	r1, [pc, #88]	; (8004b14 <R3_1_Init+0xf0>)
 8004abc:	680b      	ldr	r3, [r1, #0]
 8004abe:	421a      	tst	r2, r3
 8004ac0:	d0fc      	beq.n	8004abc <R3_1_Init+0x98>
    LL_DMA_SetMemoryAddress( DMA1, LL_DMA_CHANNEL_1, ( uint32_t )pHandle->ADC1_DMA_converted );
 8004ac2:	0023      	movs	r3, r4
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004ac4:	2003      	movs	r0, #3
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8004ac6:	4918      	ldr	r1, [pc, #96]	; (8004b28 <R3_1_Init+0x104>)
 8004ac8:	336e      	adds	r3, #110	; 0x6e
 8004aca:	60cb      	str	r3, [r1, #12]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8004acc:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <R3_1_Init+0x108>)
    pHandle->ADCRegularLocked=false; 
 8004ace:	2500      	movs	r5, #0
 8004ad0:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004ad2:	684b      	ldr	r3, [r1, #4]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	041b      	lsls	r3, r3, #16
 8004ad8:	4303      	orrs	r3, r0
 8004ada:	604b      	str	r3, [r1, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004adc:	680b      	ldr	r3, [r1, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004ade:	306d      	adds	r0, #109	; 0x6d
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <R3_1_Init+0xf8>)
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	4381      	bics	r1, r0
 8004aea:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->CCER, Channels);
 8004aec:	6a18      	ldr	r0, [r3, #32]
 8004aee:	4910      	ldr	r1, [pc, #64]	; (8004b30 <R3_1_Init+0x10c>)
 8004af0:	4301      	orrs	r1, r0
 8004af2:	6219      	str	r1, [r3, #32]
    pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004af4:	2180      	movs	r1, #128	; 0x80
 8004af6:	00c9      	lsls	r1, r1, #3
 8004af8:	66a1      	str	r1, [r4, #104]	; 0x68
    pHandle->OverCurrentFlag = false;
 8004afa:	2074      	movs	r0, #116	; 0x74
 8004afc:	2100      	movs	r1, #0
 8004afe:	5221      	strh	r1, [r4, r0]
    pHandle->ADCRegularLocked=false; 
 8004b00:	3003      	adds	r0, #3
 8004b02:	5425      	strb	r5, [r4, r0]
    pHandle->_Super.DTTest = 0u;
 8004b04:	3829      	subs	r0, #41	; 0x29
 8004b06:	5221      	strh	r1, [r4, r0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004b08:	6819      	ldr	r1, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	b003      	add	sp, #12
 8004b10:	bd30      	pop	{r4, r5, pc}
 8004b12:	46c0      	nop			; (mov r8, r8)
 8004b14:	40012400 	.word	0x40012400
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40015800 	.word	0x40015800
 8004b24:	7fffffe8 	.word	0x7fffffe8
 8004b28:	40020008 	.word	0x40020008
 8004b2c:	40012440 	.word	0x40012440
 8004b30:	00000555 	.word	0x00000555

08004b34 <R3_1_WriteTIMRegisters>:
{
 8004b34:	0003      	movs	r3, r0
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004b36:	6f82      	ldr	r2, [r0, #120]	; 0x78
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t)pHandle->_Super.CntPhA );
 8004b38:	8e40      	ldrh	r0, [r0, #50]	; 0x32
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8004b3a:	6812      	ldr	r2, [r2, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004b3c:	6350      	str	r0, [r2, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t)pHandle->_Super.CntPhB );
 8004b3e:	8e98      	ldrh	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004b40:	6390      	str	r0, [r2, #56]	; 0x38
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t)pHandle->_Super.CntPhC );
 8004b42:	8ed8      	ldrh	r0, [r3, #54]	; 0x36
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004b44:	63d0      	str	r0, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004b46:	6411      	str	r1, [r2, #64]	; 0x40
  if ( pHandle->_Super.SWerror == 1u )
 8004b48:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8004b4a:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8004b4c:	2801      	cmp	r0, #1
 8004b4e:	d005      	beq.n	8004b5c <R3_1_WriteTIMRegisters+0x28>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8004b50:	2070      	movs	r0, #112	; 0x70
 8004b52:	4010      	ands	r0, r2
 8004b54:	1e43      	subs	r3, r0, #1
 8004b56:	4198      	sbcs	r0, r3
    hAux = MC_FOC_DURATION;
 8004b58:	b280      	uxth	r0, r0
}
 8004b5a:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	871a      	strh	r2, [r3, #56]	; 0x38
 8004b60:	e7fb      	b.n	8004b5a <R3_1_WriteTIMRegisters+0x26>
 8004b62:	46c0      	nop			; (mov r8, r8)

08004b64 <R3_1_SetADCSampPointCalibration>:
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	00db      	lsls	r3, r3, #3
{
 8004b68:	b510      	push	{r4, lr}
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004b6a:	6683      	str	r3, [r0, #104]	; 0x68
  pHandle->_Super.Sector = pHandle->CalibSector;
 8004b6c:	2373      	movs	r3, #115	; 0x73
 8004b6e:	5cc2      	ldrb	r2, [r0, r3]
 8004b70:	3b39      	subs	r3, #57	; 0x39
 8004b72:	54c2      	strb	r2, [r0, r3]
  return R3_1_WriteTIMRegisters( pHdl,  ( uint16_t )( pHandle->Half_PWMPeriod ) - 1u);
 8004b74:	3332      	adds	r3, #50	; 0x32
 8004b76:	5ac1      	ldrh	r1, [r0, r3]
 8004b78:	3901      	subs	r1, #1
 8004b7a:	b289      	uxth	r1, r1
 8004b7c:	f7ff ffda 	bl	8004b34 <R3_1_WriteTIMRegisters>
}
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)

08004b84 <R3_1_SetADCSampPointSectX>:
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004b84:	236c      	movs	r3, #108	; 0x6c
 8004b86:	2166      	movs	r1, #102	; 0x66
{
 8004b88:	b570      	push	{r4, r5, r6, lr}
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004b8a:	6f86      	ldr	r6, [r0, #120]	; 0x78
  register uint16_t lowDuty = pHdl->lowDuty;
 8004b8c:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004b8e:	5ac4      	ldrh	r4, [r0, r3]
 8004b90:	5a71      	ldrh	r1, [r6, r1]
 8004b92:	1b63      	subs	r3, r4, r5
 8004b94:	b29b      	uxth	r3, r3
  register uint16_t midDuty = pHdl->midDuty;
 8004b96:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	d907      	bls.n	8004bac <R3_1_SetADCSampPointSectX+0x28>
    pHandle->_Super.Sector = SECTOR_5;
 8004b9c:	233a      	movs	r3, #58	; 0x3a
 8004b9e:	2204      	movs	r2, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8004ba0:	3c01      	subs	r4, #1
    pHandle->_Super.Sector = SECTOR_5;
 8004ba2:	54c2      	strb	r2, [r0, r3]
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8004ba4:	b2a1      	uxth	r1, r4
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
 8004ba6:	f7ff ffc5 	bl	8004b34 <R3_1_WriteTIMRegisters>
}
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8004bac:	1aaa      	subs	r2, r5, r2
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d904      	bls.n	8004bc0 <R3_1_SetADCSampPointSectX+0x3c>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8004bb6:	2368      	movs	r3, #104	; 0x68
 8004bb8:	5af1      	ldrh	r1, [r6, r3]
 8004bba:	1a69      	subs	r1, r5, r1
 8004bbc:	b289      	uxth	r1, r1
 8004bbe:	e7f2      	b.n	8004ba6 <R3_1_SetADCSampPointSectX+0x22>
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8004bc0:	1949      	adds	r1, r1, r5
 8004bc2:	b289      	uxth	r1, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8004bc4:	428c      	cmp	r4, r1
 8004bc6:	d8ee      	bhi.n	8004ba6 <R3_1_SetADCSampPointSectX+0x22>
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8004bc8:	2380      	movs	r3, #128	; 0x80
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004bca:	0064      	lsls	r4, r4, #1
 8004bcc:	3c01      	subs	r4, #1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8004bce:	011b      	lsls	r3, r3, #4
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004bd0:	1a61      	subs	r1, r4, r1
        pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_FALLING;
 8004bd2:	6683      	str	r3, [r0, #104]	; 0x68
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8004bd4:	b289      	uxth	r1, r1
 8004bd6:	e7e6      	b.n	8004ba6 <R3_1_SetADCSampPointSectX+0x22>

08004bd8 <R3_1_TurnOnLowSides>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = true;
 8004bd8:	2342      	movs	r3, #66	; 0x42
 8004bda:	2201      	movs	r2, #1
 8004bdc:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <R3_1_TurnOnLowSides+0x44>)
 8004be0:	3a03      	subs	r2, #3
 8004be2:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004be4:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004be6:	2101      	movs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004be8:	635a      	str	r2, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004bec:	63da      	str	r2, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	4211      	tst	r1, r2
 8004bf2:	d0fc      	beq.n	8004bee <R3_1_TurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004bf4:	2280      	movs	r2, #128	; 0x80
 8004bf6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004bf8:	0212      	lsls	r2, r2, #8
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	645a      	str	r2, [r3, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004bfe:	2272      	movs	r2, #114	; 0x72
 8004c00:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004c02:	5c9a      	ldrb	r2, [r3, r2]
 8004c04:	2a02      	cmp	r2, #2
 8004c06:	d108      	bne.n	8004c1a <R3_1_TurnOnLowSides+0x42>
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	6919      	ldr	r1, [r3, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004c0c:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	6959      	ldr	r1, [r3, #20]
 8004c12:	6191      	str	r1, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004c14:	68da      	ldr	r2, [r3, #12]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	6193      	str	r3, [r2, #24]

  }
  return;
}
 8004c1a:	4770      	bx	lr
 8004c1c:	40012c00 	.word	0x40012c00

08004c20 <R3_1_SwitchOnPWM>:
#if defined (__ICCARM__)
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  TIM_TypeDef * TIMx = TIM1;

  pHandle->_Super.TurnOnLowSidesAction = false;
 8004c20:	2342      	movs	r3, #66	; 0x42
 8004c22:	2200      	movs	r2, #0
{
 8004c24:	b570      	push	{r4, r5, r6, lr}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8004c26:	54c2      	strb	r2, [r0, r3]

  /* We forbid ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=true; 
 8004c28:	3335      	adds	r3, #53	; 0x35
 8004c2a:	3201      	adds	r2, #1
 8004c2c:	54c2      	strb	r2, [r0, r3]
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
 8004c2e:	3b0b      	subs	r3, #11
 8004c30:	5ac2      	ldrh	r2, [r0, r3]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004c32:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <R3_1_SwitchOnPWM+0xd8>)
 8004c34:	0851      	lsrs	r1, r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8004c36:	3a05      	subs	r2, #5
 8004c38:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004c3a:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004c3c:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004c40:	2202      	movs	r2, #2
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004c42:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004c44:	4252      	negs	r2, r2
 8004c46:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	4211      	tst	r1, r2
 8004c4c:	d0fc      	beq.n	8004c48 <R3_1_SwitchOnPWM+0x28>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004c4e:	2202      	movs	r2, #2
 8004c50:	4252      	negs	r2, r2
 8004c52:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004c58:	00d2      	lsls	r2, r2, #3
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004c62:	0212      	lsls	r2, r2, #8
 8004c64:	430a      	orrs	r2, r1
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004c66:	2172      	movs	r1, #114	; 0x72
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
 8004c6a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004c6c:	5c51      	ldrb	r1, [r2, r1]
 8004c6e:	2902      	cmp	r1, #2
 8004c70:	d029      	beq.n	8004cc6 <R3_1_SwitchOnPWM+0xa6>

	  
    /* Configuration of DMA and ADC to next conversions */
    /* It's possible write the CHSELR resgister because the ADC conversion
       is stopped by the R3_1_SwitchOffPWM function */
    LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8004c72:	236a      	movs	r3, #106	; 0x6a
 8004c74:	5cd3      	ldrb	r3, [r2, r3]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c76:	2207      	movs	r2, #7
 8004c78:	4920      	ldr	r1, [pc, #128]	; (8004cfc <R3_1_SwitchOnPWM+0xdc>)
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004c7a:	2402      	movs	r4, #2
 8004c7c:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004c7e:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c80:	4390      	bics	r0, r2
 8004c82:	4303      	orrs	r3, r0
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004c84:	2001      	movs	r0, #1
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004c86:	2603      	movs	r6, #3
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004c88:	614b      	str	r3, [r1, #20]
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <R3_1_SwitchOnPWM+0xe0>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4382      	bics	r2, r0
 8004c90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	0c12      	lsrs	r2, r2, #16
 8004c96:	0412      	lsls	r2, r2, #16
 8004c98:	4322      	orrs	r2, r4
 8004c9a:	605a      	str	r2, [r3, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4302      	orrs	r2, r0
 8004ca0:	601a      	str	r2, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004ca2:	600d      	str	r5, [r1, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG, DMATransfer);
 8004ca4:	68ca      	ldr	r2, [r1, #12]
 8004ca6:	43b2      	bics	r2, r6
 8004ca8:	4302      	orrs	r2, r0
 8004caa:	60ca      	str	r2, [r1, #12]
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF1);
 8004cac:	4a15      	ldr	r2, [pc, #84]	; (8004d04 <R3_1_SwitchOnPWM+0xe4>)
 8004cae:	6055      	str	r5, [r2, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4322      	orrs	r2, r4
 8004cb4:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <R3_1_SwitchOnPWM+0xd8>)
 8004cba:	4252      	negs	r2, r2
 8004cbc:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004cbe:	68da      	ldr	r2, [r3, #12]
 8004cc0:	4302      	orrs	r2, r0
 8004cc2:	60da      	str	r2, [r3, #12]
    LL_TIM_ClearFlag_UPDATE( TIMx );
    /* Enable Update IRQ */
    LL_TIM_EnableIT_UPDATE( TIMx );
  
  return;
}
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	490f      	ldr	r1, [pc, #60]	; (8004d08 <R3_1_SwitchOnPWM+0xe8>)
 8004cca:	400b      	ands	r3, r1
 8004ccc:	428b      	cmp	r3, r1
 8004cce:	d009      	beq.n	8004ce4 <R3_1_SwitchOnPWM+0xc4>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004cd0:	6853      	ldr	r3, [r2, #4]
 8004cd2:	6911      	ldr	r1, [r2, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8004cd4:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004cd6:	6893      	ldr	r3, [r2, #8]
 8004cd8:	6951      	ldr	r1, [r2, #20]
 8004cda:	6299      	str	r1, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004cdc:	68d3      	ldr	r3, [r2, #12]
 8004cde:	6991      	ldr	r1, [r2, #24]
 8004ce0:	6299      	str	r1, [r3, #40]	; 0x28
}
 8004ce2:	e7c6      	b.n	8004c72 <R3_1_SwitchOnPWM+0x52>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004ce4:	6853      	ldr	r3, [r2, #4]
 8004ce6:	6911      	ldr	r1, [r2, #16]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004ce8:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004cea:	6893      	ldr	r3, [r2, #8]
 8004cec:	6951      	ldr	r1, [r2, #20]
 8004cee:	6199      	str	r1, [r3, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004cf0:	68d3      	ldr	r3, [r2, #12]
 8004cf2:	6991      	ldr	r1, [r2, #24]
 8004cf4:	6199      	str	r1, [r3, #24]
}
 8004cf6:	e7bc      	b.n	8004c72 <R3_1_SwitchOnPWM+0x52>
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40012400 	.word	0x40012400
 8004d00:	40020008 	.word	0x40020008
 8004d04:	40020000 	.word	0x40020000
 8004d08:	00000555 	.word	0x00000555

08004d0c <R3_1_SwitchOffPWM>:
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <R3_1_SwitchOffPWM+0x8c>)
  *         MOE bit and reset the TIM status
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_1_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 8004d10:	b510      	push	{r4, lr}
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	438a      	bics	r2, r1
 8004d16:	60da      	str	r2, [r3, #12]
  TIM_TypeDef * TIMx = TIM1;

  /* Enable Update IRQ */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8004d18:	2100      	movs	r1, #0
 8004d1a:	2242      	movs	r2, #66	; 0x42
 8004d1c:	5481      	strb	r1, [r0, r2]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8004d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d20:	491e      	ldr	r1, [pc, #120]	; (8004d9c <R3_1_SwitchOffPWM+0x90>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	645a      	str	r2, [r3, #68]	; 0x44

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if ( pHandle->BrakeActionLock == true )
 8004d26:	2376      	movs	r3, #118	; 0x76
 8004d28:	5cc3      	ldrb	r3, [r0, r3]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d104      	bne.n	8004d38 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004d2e:	2272      	movs	r2, #114	; 0x72
 8004d30:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004d32:	5c9a      	ldrb	r2, [r3, r2]
 8004d34:	2a02      	cmp	r2, #2
 8004d36:	d025      	beq.n	8004d84 <R3_1_SwitchOffPWM+0x78>
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8004d38:	2102      	movs	r1, #2
 8004d3a:	4a19      	ldr	r2, [pc, #100]	; (8004da0 <R3_1_SwitchOffPWM+0x94>)
  MODIFY_REG(ADCx->CR,
 8004d3c:	4c19      	ldr	r4, [pc, #100]	; (8004da4 <R3_1_SwitchOffPWM+0x98>)
 8004d3e:	6813      	ldr	r3, [r2, #0]
 8004d40:	438b      	bics	r3, r1
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <R3_1_SwitchOffPWM+0x9c>)
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	4022      	ands	r2, r4
 8004d4a:	2410      	movs	r4, #16
 8004d4c:	4322      	orrs	r2, r4
 8004d4e:	609a      	str	r2, [r3, #8]
  LL_DMA_DisableIT_TC( DMA1, LL_DMA_CHANNEL_1 );

  LL_ADC_REG_StopConversion( ADC1 );

  /* Disable ADC DMA request*/
  ADC1->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	3c0f      	subs	r4, #15
 8004d54:	43a2      	bics	r2, r4
 8004d56:	60da      	str	r2, [r3, #12]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <R3_1_SwitchOffPWM+0xa0>)
 8004d5a:	6051      	str	r1, [r2, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	4913      	ldr	r1, [pc, #76]	; (8004db0 <R3_1_SwitchOffPWM+0xa4>)
 8004d64:	400a      	ands	r2, r1
 8004d66:	60da      	str	r2, [r3, #12]

  /* The ADC is not triggered anymore by the PWM timer */
  LL_ADC_REG_SetTriggerSource (ADC1, LL_ADC_REG_TRIG_SOFTWARE);
  
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8004d68:	2377      	movs	r3, #119	; 0x77
 8004d6a:	2200      	movs	r2, #0
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	54c2      	strb	r2, [r0, r3]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <R3_1_SwitchOffPWM+0x8c>)
 8004d72:	3a02      	subs	r2, #2
 8004d74:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	4211      	tst	r1, r2
 8004d7a:	d0fc      	beq.n	8004d76 <R3_1_SwitchOffPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004d7c:	2202      	movs	r2, #2
 8004d7e:	4252      	negs	r2, r2
 8004d80:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  return;
}
 8004d82:	bd10      	pop	{r4, pc}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	6919      	ldr	r1, [r3, #16]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004d88:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004d8a:	689a      	ldr	r2, [r3, #8]
 8004d8c:	6959      	ldr	r1, [r3, #20]
 8004d8e:	6291      	str	r1, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004d96:	e7cf      	b.n	8004d38 <R3_1_SwitchOffPWM+0x2c>
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	ffff7fff 	.word	0xffff7fff
 8004da0:	40020008 	.word	0x40020008
 8004da4:	7fffffe8 	.word	0x7fffffe8
 8004da8:	40012400 	.word	0x40012400
 8004dac:	40020000 	.word	0x40020000
 8004db0:	fffff23f 	.word	0xfffff23f

08004db4 <R3_1_CurrentReadingCalibration>:
{
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	46de      	mov	lr, fp
 8004db8:	4657      	mov	r7, sl
 8004dba:	464e      	mov	r6, r9
 8004dbc:	4645      	mov	r5, r8
  pHandle->PolarizationCounter = 0u;
 8004dbe:	2372      	movs	r3, #114	; 0x72
{
 8004dc0:	b5e0      	push	{r5, r6, r7, lr}
  pHandle-> PhaseAOffset = 0u;
 8004dc2:	2600      	movs	r6, #0
  CLEAR_BIT(TIMx->CCER, Channels);
 8004dc4:	4d3b      	ldr	r5, [pc, #236]	; (8004eb4 <R3_1_CurrentReadingCalibration+0x100>)
 8004dc6:	65c6      	str	r6, [r0, #92]	; 0x5c
  pHandle-> PhaseBOffset = 0u;
 8004dc8:	6606      	str	r6, [r0, #96]	; 0x60
  pHandle-> PhaseCOffset = 0u;
 8004dca:	6646      	str	r6, [r0, #100]	; 0x64
  pHandle->PolarizationCounter = 0u;
 8004dcc:	54c6      	strb	r6, [r0, r3]
 8004dce:	6a2b      	ldr	r3, [r5, #32]
 8004dd0:	4a39      	ldr	r2, [pc, #228]	; (8004eb8 <R3_1_CurrentReadingCalibration+0x104>)
  pHandle->_Super.Sector = SECTOR_5;
 8004dd2:	273a      	movs	r7, #58	; 0x3a
 8004dd4:	4013      	ands	r3, r2
  pHandle->CalibSector = SECTOR_5;
 8004dd6:	2273      	movs	r2, #115	; 0x73
 8004dd8:	4693      	mov	fp, r2
 8004dda:	3a6f      	subs	r2, #111	; 0x6f
 8004ddc:	4690      	mov	r8, r2
 8004dde:	465a      	mov	r2, fp
 8004de0:	4641      	mov	r1, r8
 8004de2:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8004de4:	4b35      	ldr	r3, [pc, #212]	; (8004ebc <R3_1_CurrentReadingCalibration+0x108>)
{
 8004de6:	0004      	movs	r4, r0
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_HFCurrentsCalibrationAB;
 8004de8:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 8004dea:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <R3_1_CurrentReadingCalibration+0x10c>)
 8004dec:	6183      	str	r3, [r0, #24]
  pHandle->CalibSector = SECTOR_5;
 8004dee:	5481      	strb	r1, [r0, r2]
  pHandle->_Super.Sector = SECTOR_5;
 8004df0:	55c1      	strb	r1, [r0, r7]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8004df2:	f7ff ff15 	bl	8004c20 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8004df6:	2238      	movs	r2, #56	; 0x38
 8004df8:	4691      	mov	r9, r2
 8004dfa:	323a      	adds	r2, #58	; 0x3a
 8004dfc:	4692      	mov	sl, r2
  						  pHandle->pParams_str->RepetitionCounter,
 8004dfe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  waitForPolarizationEnd( TIMx,
 8004e00:	44a1      	add	r9, r4
 8004e02:	44a2      	add	sl, r4
 8004e04:	3a07      	subs	r2, #7
 8004e06:	4649      	mov	r1, r9
 8004e08:	5c9a      	ldrb	r2, [r3, r2]
 8004e0a:	0028      	movs	r0, r5
 8004e0c:	4653      	mov	r3, sl
 8004e0e:	f7ff fbb5 	bl	800457c <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8004e12:	0020      	movs	r0, r4
 8004e14:	f7ff ff7a 	bl	8004d0c <R3_1_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8004e18:	4b2a      	ldr	r3, [pc, #168]	; (8004ec4 <R3_1_CurrentReadingCalibration+0x110>)
  pHandle->CalibSector = SECTOR_1;
 8004e1a:	4659      	mov	r1, fp
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8004e1c:	6063      	str	r3, [r4, #4]
  pHandle->PolarizationCounter = 0;
 8004e1e:	2372      	movs	r3, #114	; 0x72
  pHandle->CalibSector = SECTOR_1;
 8004e20:	5466      	strb	r6, [r4, r1]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8004e22:	0020      	movs	r0, r4
  pHandle->_Super.Sector = SECTOR_1;
 8004e24:	55e6      	strb	r6, [r4, r7]
  pHandle->PolarizationCounter = 0;
 8004e26:	54e6      	strb	r6, [r4, r3]
  R3_1_SwitchOnPWM( &pHandle->_Super );
 8004e28:	f7ff fefa 	bl	8004c20 <R3_1_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8004e2c:	226b      	movs	r2, #107	; 0x6b
  						  pHandle->pParams_str->RepetitionCounter,
 8004e2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
  waitForPolarizationEnd( TIMx,
 8004e30:	4649      	mov	r1, r9
 8004e32:	0028      	movs	r0, r5
 8004e34:	5c9a      	ldrb	r2, [r3, r2]
 8004e36:	4653      	mov	r3, sl
 8004e38:	f7ff fba0 	bl	800457c <waitForPolarizationEnd>
  R3_1_SwitchOffPWM( &pHandle->_Super );
 8004e3c:	0020      	movs	r0, r4
 8004e3e:	f7ff ff65 	bl	8004d0c <R3_1_SwitchOffPWM>
  pHandle->_Super.Sector = SECTOR_5;
 8004e42:	4643      	mov	r3, r8
 8004e44:	55e3      	strb	r3, [r4, r7]
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8004e46:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004e48:	491f      	ldr	r1, [pc, #124]	; (8004ec8 <R3_1_CurrentReadingCalibration+0x114>)
  pHandle->PhaseAOffset = pHandle->PhaseAOffset / NB_CONVERSIONS;
 8004e4a:	091b      	lsrs	r3, r3, #4
 8004e4c:	65e3      	str	r3, [r4, #92]	; 0x5c
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 8004e4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004e50:	2008      	movs	r0, #8
  pHandle->PhaseBOffset = pHandle->PhaseBOffset / NB_CONVERSIONS;
 8004e52:	091b      	lsrs	r3, r3, #4
 8004e54:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->PhaseCOffset = pHandle->PhaseCOffset / NB_CONVERSIONS;
 8004e56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e58:	091b      	lsrs	r3, r3, #4
 8004e5a:	6663      	str	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents     = &R3_1_GetPhaseCurrents;
 8004e5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ecc <R3_1_CurrentReadingCalibration+0x118>)
 8004e5e:	6063      	str	r3, [r4, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointSectX;
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <R3_1_CurrentReadingCalibration+0x11c>)
 8004e62:	61a3      	str	r3, [r4, #24]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <R3_1_CurrentReadingCalibration+0x120>)
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	400a      	ands	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	400a      	ands	r2, r1
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	400a      	ands	r2, r1
 8004e76:	601a      	str	r2, [r3, #0]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->Half_PWMPeriod );
 8004e78:	226c      	movs	r2, #108	; 0x6c
 8004e7a:	5aa2      	ldrh	r2, [r4, r2]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e7c:	636a      	str	r2, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e7e:	63aa      	str	r2, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004e80:	63ea      	str	r2, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <R3_1_CurrentReadingCalibration+0x124>)
 8004e84:	6811      	ldr	r1, [r2, #0]
 8004e86:	4301      	orrs	r1, r0
 8004e88:	6011      	str	r1, [r2, #0]
 8004e8a:	2180      	movs	r1, #128	; 0x80
 8004e8c:	6817      	ldr	r7, [r2, #0]
 8004e8e:	0109      	lsls	r1, r1, #4
 8004e90:	4339      	orrs	r1, r7
 8004e92:	6011      	str	r1, [r2, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4302      	orrs	r2, r0
 8004e98:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->CCER, Channels);
 8004e9a:	6a2a      	ldr	r2, [r5, #32]
 8004e9c:	4b0f      	ldr	r3, [pc, #60]	; (8004edc <R3_1_CurrentReadingCalibration+0x128>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	622b      	str	r3, [r5, #32]
  pHandle->BrakeActionLock = false;
 8004ea2:	2376      	movs	r3, #118	; 0x76
 8004ea4:	54e6      	strb	r6, [r4, r3]
}
 8004ea6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ea8:	46bb      	mov	fp, r7
 8004eaa:	46b2      	mov	sl, r6
 8004eac:	46a9      	mov	r9, r5
 8004eae:	46a0      	mov	r8, r4
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	fffffaaa 	.word	0xfffffaaa
 8004ebc:	08004999 	.word	0x08004999
 8004ec0:	08004b65 	.word	0x08004b65
 8004ec4:	080049e1 	.word	0x080049e1
 8004ec8:	fffff7ff 	.word	0xfffff7ff
 8004ecc:	0800482d 	.word	0x0800482d
 8004ed0:	08004b85 	.word	0x08004b85
 8004ed4:	40012c1c 	.word	0x40012c1c
 8004ed8:	40012c18 	.word	0x40012c18
 8004edc:	00000555 	.word	0x00000555

08004ee0 <R3_1_TIMx_UP_IRQHandler>:
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <R3_1_TIMx_UP_IRQHandler+0x68>)
  * @brief  It contains the TIMx Update event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
 8004ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* Set the trigger polarity as computed inside SetADCSampPointSectX*/
  LL_ADC_REG_SetTriggerEdge (ADC1, pHandle->ADCTriggerEdge);
 8004ee4:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8004ee6:	4c19      	ldr	r4, [pc, #100]	; (8004f4c <R3_1_TIMx_UP_IRQHandler+0x6c>)
 8004ee8:	68da      	ldr	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8004eea:	2504      	movs	r5, #4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8004eec:	4022      	ands	r2, r4
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004eee:	2480      	movs	r4, #128	; 0x80
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN, ExternalTriggerEdge);
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_EXTEN | ADC_CFGR1_EXTSEL, TriggerSource);
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	4916      	ldr	r1, [pc, #88]	; (8004f50 <R3_1_TIMx_UP_IRQHandler+0x70>)
 8004ef8:	00e4      	lsls	r4, r4, #3
 8004efa:	400a      	ands	r2, r1
 8004efc:	4322      	orrs	r2, r4
 8004efe:	60da      	str	r2, [r3, #12]
  /* set ADC trigger source */
  LL_ADC_REG_SetTriggerSource(ADC1, LL_ADC_REG_TRIG_EXT_TIM1_TRGO);
  /* Set scan direction according to the sector */  
  LL_ADC_REG_SetSequencerScanDirection(ADC1, pHandle->pParams_str->ADCScandir[pHandle->_Super.Sector]<<ADC_CFGR1_SCANDIR_Pos);
 8004f00:	223a      	movs	r2, #58	; 0x3a
 8004f02:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8004f04:	5c82      	ldrb	r2, [r0, r2]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8004f06:	68df      	ldr	r7, [r3, #12]
 8004f08:	18b1      	adds	r1, r6, r2
 8004f0a:	316c      	adds	r1, #108	; 0x6c
 8004f0c:	7809      	ldrb	r1, [r1, #0]
 8004f0e:	43af      	bics	r7, r5
 8004f10:	0089      	lsls	r1, r1, #2
  /* Configure the ADC scheduler as selected inside SetADCSampPointSectX*/
  ADC1->CHSELR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8004f12:	3206      	adds	r2, #6
 8004f14:	4339      	orrs	r1, r7
 8004f16:	0092      	lsls	r2, r2, #2
 8004f18:	60d9      	str	r1, [r3, #12]
 8004f1a:	18b2      	adds	r2, r6, r2
 8004f1c:	6852      	ldr	r2, [r2, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	; 0x28
  /* ReConfigure sampling time, as deconfigured by reg_conv_manager */
  LL_ADC_SetSamplingTimeCommonChannels ( ADC1, pHandle->pParams_str->b_ISamplingTime );
 8004f20:	226a      	movs	r2, #106	; 0x6a
 8004f22:	5cb2      	ldrb	r2, [r6, r2]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8004f24:	2607      	movs	r6, #7
 8004f26:	6959      	ldr	r1, [r3, #20]
 8004f28:	43b1      	bics	r1, r6
 8004f2a:	430a      	orrs	r2, r1
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f2c:	4909      	ldr	r1, [pc, #36]	; (8004f54 <R3_1_TIMx_UP_IRQHandler+0x74>)
 8004f2e:	615a      	str	r2, [r3, #20]
 8004f30:	684a      	ldr	r2, [r1, #4]
 8004f32:	3669      	adds	r6, #105	; 0x69
 8004f34:	4332      	orrs	r2, r6
 8004f36:	604a      	str	r2, [r1, #4]
  MODIFY_REG(ADCx->CR,
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	4907      	ldr	r1, [pc, #28]	; (8004f58 <R3_1_TIMx_UP_IRQHandler+0x78>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	432a      	orrs	r2, r5
 8004f40:	609a      	str	r2, [r3, #8]
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_OC4REF);
  /* ADC needs to be restarted because DMA is configured as limited */
  LL_ADC_REG_StartConversion( ADC1 );

  /* Reset the ADC trigger edge for next conversion */
  pHandle->ADCTriggerEdge = LL_ADC_REG_TRIG_EXT_RISING;
 8004f42:	6684      	str	r4, [r0, #104]	; 0x68

  return &pHandle->_Super.Motor;
 8004f44:	3046      	adds	r0, #70	; 0x46
}
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f48:	40012400 	.word	0x40012400
 8004f4c:	fffff3ff 	.word	0xfffff3ff
 8004f50:	fffff23f 	.word	0xfffff23f
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	7fffffe8 	.word	0x7fffffe8

08004f5c <F0XX_BRK_IRQHandler>:
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
__weak void * F0XX_BRK_IRQHandler( PWMC_R3_1_Handle_t * pHandle )
{
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8004f5c:	2272      	movs	r2, #114	; 0x72
 8004f5e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004f60:	5c9a      	ldrb	r2, [r3, r2]
 8004f62:	2a02      	cmp	r2, #2
 8004f64:	d108      	bne.n	8004f78 <F0XX_BRK_IRQHandler+0x1c>
  {
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	6919      	ldr	r1, [r3, #16]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004f6a:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	6959      	ldr	r1, [r3, #20]
 8004f70:	6291      	str	r1, [r2, #40]	; 0x28
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	6293      	str	r3, [r2, #40]	; 0x28
  }
  pHandle->OverCurrentFlag = true;
 8004f78:	2374      	movs	r3, #116	; 0x74
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	54c2      	strb	r2, [r0, r3]

  return MC_NULL;
}
 8004f7e:	2000      	movs	r0, #0
 8004f80:	4770      	bx	lr
 8004f82:	46c0      	nop			; (mov r8, r8)

08004f84 <R3_1_IsOverCurrentOccurred>:
#pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif
  uint16_t retVal = MC_NO_FAULTS;


  if ( pHandle->OverVoltageFlag == true )
 8004f84:	2275      	movs	r2, #117	; 0x75
{
 8004f86:	b510      	push	{r4, lr}
  if ( pHandle->OverVoltageFlag == true )
 8004f88:	5c81      	ldrb	r1, [r0, r2]
{
 8004f8a:	0003      	movs	r3, r0
  if ( pHandle->OverVoltageFlag == true )
 8004f8c:	2900      	cmp	r1, #0
 8004f8e:	d00b      	beq.n	8004fa8 <R3_1_IsOverCurrentOccurred+0x24>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8004f90:	2100      	movs	r1, #0
 8004f92:	2442      	movs	r4, #66	; 0x42
 8004f94:	5481      	strb	r1, [r0, r2]
    retVal = MC_OVER_VOLT;
 8004f96:	2002      	movs	r0, #2
  }

  if ( pHandle->OverCurrentFlag == true )
 8004f98:	2274      	movs	r2, #116	; 0x74
 8004f9a:	5c99      	ldrb	r1, [r3, r2]
 8004f9c:	2900      	cmp	r1, #0
 8004f9e:	d002      	beq.n	8004fa6 <R3_1_IsOverCurrentOccurred+0x22>
  {
    retVal |= MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 8004fa0:	2100      	movs	r1, #0
    retVal |= MC_BREAK_IN;
 8004fa2:	0020      	movs	r0, r4
    pHandle->OverCurrentFlag = false;
 8004fa4:	5499      	strb	r1, [r3, r2]
  }
  return retVal;
}
 8004fa6:	bd10      	pop	{r4, pc}
 8004fa8:	2440      	movs	r4, #64	; 0x40
  uint16_t retVal = MC_NO_FAULTS;
 8004faa:	2000      	movs	r0, #0
 8004fac:	e7f4      	b.n	8004f98 <R3_1_IsOverCurrentOccurred+0x14>
 8004fae:	46c0      	nop			; (mov r8, r8)

08004fb0 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8004fb0:	8b83      	ldrh	r3, [r0, #28]
 8004fb2:	8b41      	ldrh	r1, [r0, #26]
{
 8004fb4:	b530      	push	{r4, r5, lr}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8004fb6:	18c9      	adds	r1, r1, r3
 8004fb8:	0849      	lsrs	r1, r1, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8004fba:	8b03      	ldrh	r3, [r0, #24]
 8004fbc:	040d      	lsls	r5, r1, #16
 8004fbe:	430d      	orrs	r5, r1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <RVBS_Clear+0x26>
 8004fc4:	2300      	movs	r3, #0
  {
    pHandle->aBuffer[index] = aux;
 8004fc6:	6a04      	ldr	r4, [r0, #32]
 8004fc8:	005a      	lsls	r2, r3, #1
 8004fca:	5311      	strh	r1, [r2, r4]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8004fcc:	3301      	adds	r3, #1
 8004fce:	8b02      	ldrh	r2, [r0, #24]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d8f8      	bhi.n	8004fc8 <RVBS_Clear+0x18>
  }
  pHandle->_Super.LatestConv = aux;
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8004fd6:	2325      	movs	r3, #37	; 0x25
 8004fd8:	2200      	movs	r2, #0
  pHandle->_Super.LatestConv = aux;
 8004fda:	6045      	str	r5, [r0, #4]
  pHandle->index = 0;
 8004fdc:	54c2      	strb	r2, [r0, r3]
}
 8004fde:	bd30      	pop	{r4, r5, pc}

08004fe0 <RVBS_Init>:
{
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	0004      	movs	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8004fe4:	300c      	adds	r0, #12
 8004fe6:	f7fc fd45 	bl	8001a74 <RCM_RegisterRegConv>
 8004fea:	2326      	movs	r3, #38	; 0x26
 8004fec:	54e0      	strb	r0, [r4, r3]
  RVBS_Clear( pHandle );
 8004fee:	0020      	movs	r0, r4
 8004ff0:	f7ff ffde 	bl	8004fb0 <RVBS_Clear>
}
 8004ff4:	bd10      	pop	{r4, pc}
 8004ff6:	46c0      	nop			; (mov r8, r8)

08004ff8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8004ff8:	88c3      	ldrh	r3, [r0, #6]
 8004ffa:	8b42      	ldrh	r2, [r0, #26]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d305      	bcc.n	800500c <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8005000:	8b80      	ldrh	r0, [r0, #28]
 8005002:	4283      	cmp	r3, r0
 8005004:	4180      	sbcs	r0, r0
 8005006:	4240      	negs	r0, r0
 8005008:	0080      	lsls	r0, r0, #2
  else
  {
    fault = MC_NO_ERROR;
  }
  return fault;
}
 800500a:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800500c:	2002      	movs	r0, #2
 800500e:	e7fc      	b.n	800500a <RVBS_CheckFaultState+0x12>

08005010 <RVBS_CalcAvVbus>:
{
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005012:	2326      	movs	r3, #38	; 0x26
{
 8005014:	0004      	movs	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005016:	5cc0      	ldrb	r0, [r0, r3]
 8005018:	f7fc fde6 	bl	8001be8 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800501c:	4b15      	ldr	r3, [pc, #84]	; (8005074 <RVBS_CalcAvVbus+0x64>)
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800501e:	0006      	movs	r6, r0
  if ( hAux != 0xFFFF )
 8005020:	4298      	cmp	r0, r3
 8005022:	d01b      	beq.n	800505c <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8005024:	2325      	movs	r3, #37	; 0x25
 8005026:	5ce7      	ldrb	r7, [r4, r3]
 8005028:	6a21      	ldr	r1, [r4, #32]
 800502a:	007b      	lsls	r3, r7, #1
 800502c:	5258      	strh	r0, [r3, r1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800502e:	8b25      	ldrh	r5, [r4, #24]
 8005030:	2d00      	cmp	r5, #0
 8005032:	d018      	beq.n	8005066 <RVBS_CalcAvVbus+0x56>
 8005034:	2200      	movs	r2, #0
    wtemp = 0;
 8005036:	2000      	movs	r0, #0
      wtemp += pHandle->aBuffer[i];
 8005038:	0053      	lsls	r3, r2, #1
 800503a:	5a5b      	ldrh	r3, [r3, r1]
 800503c:	18c0      	adds	r0, r0, r3
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800503e:	1c53      	adds	r3, r2, #1
 8005040:	b2da      	uxtb	r2, r3
 8005042:	42aa      	cmp	r2, r5
 8005044:	d3f8      	bcc.n	8005038 <RVBS_CalcAvVbus+0x28>
    wtemp /= pHandle->LowPassFilterBW;
 8005046:	0029      	movs	r1, r5
 8005048:	f7fb f85e 	bl	8000108 <__udivsi3>
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800504c:	3d01      	subs	r5, #1
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800504e:	80e0      	strh	r0, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005050:	80a6      	strh	r6, [r4, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8005052:	42af      	cmp	r7, r5
 8005054:	da09      	bge.n	800506a <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8005056:	2325      	movs	r3, #37	; 0x25
 8005058:	3701      	adds	r7, #1
 800505a:	54e7      	strb	r7, [r4, r3]
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800505c:	0020      	movs	r0, r4
 800505e:	f7ff ffcb 	bl	8004ff8 <RVBS_CheckFaultState>
 8005062:	8120      	strh	r0, [r4, #8]
}
 8005064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8005066:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8005068:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 800506a:	2325      	movs	r3, #37	; 0x25
 800506c:	2200      	movs	r2, #0
 800506e:	54e2      	strb	r2, [r4, r3]
 8005070:	e7f4      	b.n	800505c <RVBS_CalcAvVbus+0x4c>
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	0000ffff 	.word	0x0000ffff

08005078 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8005078:	2300      	movs	r3, #0
{
 800507a:	b510      	push	{r4, lr}
  pHandle->Ext = 0;
 800507c:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 800507e:	6043      	str	r3, [r0, #4]
  pHandle->RampRemainingStep = 0u;
 8005080:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8005082:	6103      	str	r3, [r0, #16]
  pHandle->ScalingFactor = 1u;
 8005084:	3301      	adds	r3, #1
 8005086:	6143      	str	r3, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
 8005088:	3018      	adds	r0, #24
 800508a:	f7ff f855 	bl	8004138 <FD_Init>
#endif

}
 800508e:	bd10      	pop	{r4, pc}

08005090 <REMNG_Calc>:
  int32_t current_ref;

  current_ref = pHandle->Ext;

  /* Update the variable and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8005090:	68c3      	ldr	r3, [r0, #12]
{
 8005092:	b510      	push	{r4, lr}
  current_ref = pHandle->Ext;
 8005094:	6881      	ldr	r1, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 8005096:	2b01      	cmp	r3, #1
 8005098:	d909      	bls.n	80050ae <REMNG_Calc+0x1e>
  {
    /* Increment/decrement the reference value. */
    current_ref += pHandle->IncDecAmount;
 800509a:	6902      	ldr	r2, [r0, #16]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep --;
 800509c:	3b01      	subs	r3, #1
    current_ref += pHandle->IncDecAmount;
 800509e:	1889      	adds	r1, r1, r2
  }
  else if ( pHandle->RampRemainingStep == 1u )
  {
    /* Set the backup value of TargetFinal. */
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80050a0:	6942      	ldr	r2, [r0, #20]
    pHandle->RampRemainingStep --;
 80050a2:	60c3      	str	r3, [r0, #12]
  else
  {
    /* Do nothing. */
  }

  pHandle->Ext = current_ref;
 80050a4:	6081      	str	r1, [r0, #8]

#ifdef FASTDIV
  ret_val = FD_FastDiv( & ( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
 80050a6:	3018      	adds	r0, #24
 80050a8:	f7ff f858 	bl	800415c <FD_FastDiv>
#else
  ret_val = pHandle->Ext / ( int32_t )( pHandle->ScalingFactor );
#endif

  return ret_val;
}
 80050ac:	bd10      	pop	{r4, pc}
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80050ae:	6942      	ldr	r2, [r0, #20]
  else if ( pHandle->RampRemainingStep == 1u )
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d1f7      	bne.n	80050a4 <REMNG_Calc+0x14>
    pHandle->RampRemainingStep = 0u;
 80050b4:	2300      	movs	r3, #0
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80050b6:	6841      	ldr	r1, [r0, #4]
    pHandle->RampRemainingStep = 0u;
 80050b8:	60c3      	str	r3, [r0, #12]
    current_ref = pHandle->TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 80050ba:	4351      	muls	r1, r2
    pHandle->RampRemainingStep = 0u;
 80050bc:	e7f2      	b.n	80050a4 <REMNG_Calc+0x14>
 80050be:	46c0      	nop			; (mov r8, r8)

080050c0 <REMNG_RampCompleted>:
  * @retval bool It returns true if the ramp is completed, false otherwise.
  */
__weak bool REMNG_RampCompleted( RampExtMngr_Handle_t * pHandle )
{
  bool retVal = false;
  if ( pHandle->RampRemainingStep == 0u )
 80050c0:	68c0      	ldr	r0, [r0, #12]
 80050c2:	4243      	negs	r3, r0
 80050c4:	4158      	adcs	r0, r3
  {
    retVal = true;
  }
  return retVal;
 80050c6:	b2c0      	uxtb	r0, r0
}
 80050c8:	4770      	bx	lr
 80050ca:	46c0      	nop			; (mov r8, r8)

080050cc <getScalingFactor>:
  {
    TargetAbs = ( uint32_t )( Target );
  }
  for ( i = 1u; i < 32u; i++ )
  {
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80050cc:	2180      	movs	r1, #128	; 0x80
    aux = -Target;
 80050ce:	17c3      	asrs	r3, r0, #31
 80050d0:	18c0      	adds	r0, r0, r3
 80050d2:	4058      	eors	r0, r3
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80050d4:	0609      	lsls	r1, r1, #24
{
 80050d6:	2301      	movs	r3, #1
 80050d8:	e002      	b.n	80050e0 <getScalingFactor+0x14>
  for ( i = 1u; i < 32u; i++ )
 80050da:	3301      	adds	r3, #1
 80050dc:	2b20      	cmp	r3, #32
 80050de:	d007      	beq.n	80050f0 <getScalingFactor+0x24>
    uint32_t limit = ( ( uint32_t )( 1 ) << ( 31u - i ) );
 80050e0:	000a      	movs	r2, r1
 80050e2:	40da      	lsrs	r2, r3
    if ( TargetAbs >= limit )
 80050e4:	4290      	cmp	r0, r2
 80050e6:	d3f8      	bcc.n	80050da <getScalingFactor+0xe>
    {
      break;
    }
  }
  return ( ( uint32_t )( 1u ) << ( i - 1u ) );
 80050e8:	2001      	movs	r0, #1
 80050ea:	3b01      	subs	r3, #1
 80050ec:	4098      	lsls	r0, r3
}
 80050ee:	4770      	bx	lr
 80050f0:	2080      	movs	r0, #128	; 0x80
 80050f2:	0600      	lsls	r0, r0, #24
 80050f4:	e7fb      	b.n	80050ee <getScalingFactor+0x22>
 80050f6:	46c0      	nop			; (mov r8, r8)

080050f8 <REMNG_ExecRamp>:
{
 80050f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050fa:	46d6      	mov	lr, sl
 80050fc:	464f      	mov	r7, r9
 80050fe:	4646      	mov	r6, r8
 8005100:	0004      	movs	r4, r0
 8005102:	b5c0      	push	{r6, r7, lr}
 8005104:	0015      	movs	r5, r2
 8005106:	000f      	movs	r7, r1
  current_ref = FD_FastDiv( &( pHandle->fd ), pHandle->Ext, ( int32_t )( pHandle->ScalingFactor ) );
 8005108:	6942      	ldr	r2, [r0, #20]
 800510a:	6881      	ldr	r1, [r0, #8]
 800510c:	3018      	adds	r0, #24
 800510e:	f7ff f825 	bl	800415c <FD_FastDiv>
 8005112:	4680      	mov	r8, r0
  if ( Durationms == 0u )
 8005114:	2d00      	cmp	r5, #0
 8005116:	d10e      	bne.n	8005136 <REMNG_ExecRamp+0x3e>
    pHandle->ScalingFactor = getScalingFactor( TargetFinal );
 8005118:	0038      	movs	r0, r7
 800511a:	f7ff ffd7 	bl	80050cc <getScalingFactor>
 800511e:	6160      	str	r0, [r4, #20]
    pHandle->Ext = TargetFinal * ( int32_t )( pHandle->ScalingFactor );
 8005120:	4378      	muls	r0, r7
 8005122:	60a0      	str	r0, [r4, #8]
    pHandle->IncDecAmount = 0;
 8005124:	2000      	movs	r0, #0
    pHandle->RampRemainingStep = 0u;
 8005126:	60e5      	str	r5, [r4, #12]
    pHandle->IncDecAmount = 0;
 8005128:	6120      	str	r0, [r4, #16]
}
 800512a:	2001      	movs	r0, #1
 800512c:	bce0      	pop	{r5, r6, r7}
 800512e:	46ba      	mov	sl, r7
 8005130:	46b1      	mov	r9, r6
 8005132:	46a8      	mov	r8, r5
 8005134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t wScalingFactor = getScalingFactor( TargetFinal - current_ref );
 8005136:	1a3b      	subs	r3, r7, r0
 8005138:	0018      	movs	r0, r3
 800513a:	4699      	mov	r9, r3
 800513c:	f7ff ffc6 	bl	80050cc <getScalingFactor>
 8005140:	4682      	mov	sl, r0
    uint32_t wScalingFactor2 = getScalingFactor( current_ref );
 8005142:	4640      	mov	r0, r8
 8005144:	f7ff ffc2 	bl	80050cc <getScalingFactor>
 8005148:	0006      	movs	r6, r0
    uint32_t wScalingFactor3 = getScalingFactor( TargetFinal );
 800514a:	0038      	movs	r0, r7
 800514c:	f7ff ffbe 	bl	80050cc <getScalingFactor>
    if ( wScalingFactor <  wScalingFactor2 )
 8005150:	45b2      	cmp	sl, r6
 8005152:	d214      	bcs.n	800517e <REMNG_ExecRamp+0x86>
      if ( wScalingFactor < wScalingFactor3 )
 8005154:	4656      	mov	r6, sl
 8005156:	4286      	cmp	r6, r0
 8005158:	d813      	bhi.n	8005182 <REMNG_ExecRamp+0x8a>
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800515a:	4643      	mov	r3, r8
    aux /= 1000u;
 800515c:	21fa      	movs	r1, #250	; 0xfa
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 800515e:	4373      	muls	r3, r6
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005160:	6820      	ldr	r0, [r4, #0]
    pHandle->ScalingFactor = wScalingFactorMin;
 8005162:	6166      	str	r6, [r4, #20]
    aux = Durationms * ( uint32_t )pHandle->FrequencyHz; /* Check for overflow and use prescaler */
 8005164:	4368      	muls	r0, r5
    pHandle->Ext = current_ref * ( int32_t )( pHandle->ScalingFactor );
 8005166:	60a3      	str	r3, [r4, #8]
    pHandle->TargetFinal = TargetFinal;
 8005168:	6067      	str	r7, [r4, #4]
    aux /= 1000u;
 800516a:	0089      	lsls	r1, r1, #2
 800516c:	f7fa ffcc 	bl	8000108 <__udivsi3>
    pHandle->RampRemainingStep++;
 8005170:	1c45      	adds	r5, r0, #1
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8005172:	4648      	mov	r0, r9
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8005174:	0029      	movs	r1, r5
    aux1 = ( TargetFinal - current_ref ) * ( int32_t )( pHandle->ScalingFactor );
 8005176:	4370      	muls	r0, r6
    aux1 /= ( int32_t )( pHandle->RampRemainingStep );
 8005178:	f7fb f850 	bl	800021c <__divsi3>
    pHandle->IncDecAmount = aux1;
 800517c:	e7d3      	b.n	8005126 <REMNG_ExecRamp+0x2e>
      if ( wScalingFactor2 < wScalingFactor3 )
 800517e:	4286      	cmp	r6, r0
 8005180:	d9eb      	bls.n	800515a <REMNG_ExecRamp+0x62>
 8005182:	0006      	movs	r6, r0
 8005184:	e7e9      	b.n	800515a <REMNG_ExecRamp+0x62>
 8005186:	46c0      	nop			; (mov r8, r8)

08005188 <RUC_Init>:
__weak void RUC_Init( RevUpCtrl_Handle_t * pHandle,
               SpeednTorqCtrl_Handle_t * pSTC,
               VirtualSpeedSensor_Handle_t * pVSS,
               STO_Handle_t * pSNSL,
               PWMC_Handle_t * pPWM )
{
 8005188:	b510      	push	{r4, lr}
  RevUpCtrl_PhaseParams_t * pRUCPhaseParams = &pHandle->ParamsData[0];
  uint8_t bPhase = 0u;

  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pSNSL = pSNSL;
 800518a:	6703      	str	r3, [r0, #112]	; 0x70
  pHandle->pPWM = pPWM;
 800518c:	9b02      	ldr	r3, [sp, #8]
  pHandle->pVSS = pVSS;
 800518e:	66c2      	str	r2, [r0, #108]	; 0x6c
  pHandle->pPWM = pPWM;
 8005190:	6743      	str	r3, [r0, #116]	; 0x74
  pHandle->OTFSCLowside = false;
 8005192:	2200      	movs	r2, #0
 8005194:	2354      	movs	r3, #84	; 0x54
  pHandle->pSTC = pSTC;
 8005196:	6681      	str	r1, [r0, #104]	; 0x68
  pHandle->OTFSCLowside = false;
 8005198:	52c2      	strh	r2, [r0, r3]
  pHandle->EnteredZone1 = false;

  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
  {
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 800519a:	6943      	ldr	r3, [r0, #20]
{
 800519c:	0004      	movs	r4, r0
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d01f      	beq.n	80051e2 <RUC_Init+0x5a>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 80051a2:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01f      	beq.n	80051e8 <RUC_Init+0x60>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 80051a8:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01f      	beq.n	80051ee <RUC_Init+0x66>
    pRUCPhaseParams = pRUCPhaseParams->pNext;
 80051ae:	689b      	ldr	r3, [r3, #8]
  while ( ( pRUCPhaseParams != MC_NULL ) && ( bPhase < RUC_MAX_PHASE_NUMBER ) )
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d01f      	beq.n	80051f4 <RUC_Init+0x6c>
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2105      	movs	r1, #5
 80051b8:	3204      	adds	r2, #4
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d012      	beq.n	80051e4 <RUC_Init+0x5c>
    bPhase++;
  }
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80051be:	0053      	lsls	r3, r2, #1
 80051c0:	189b      	adds	r3, r3, r2
 80051c2:	2200      	movs	r2, #0
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	18e3      	adds	r3, r4, r3
 80051c8:	615a      	str	r2, [r3, #20]

  pHandle->bPhaseNbr = bPhase;
 80051ca:	2348      	movs	r3, #72	; 0x48

  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 80051cc:	2064      	movs	r0, #100	; 0x64
  pHandle->bPhaseNbr = bPhase;
 80051ce:	54e1      	strb	r1, [r4, r3]
  pHandle->bResetPLLTh = ( uint8_t )( ( RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz ) / 1000u );
 80051d0:	21fa      	movs	r1, #250	; 0xfa
 80051d2:	8823      	ldrh	r3, [r4, #0]
 80051d4:	0089      	lsls	r1, r1, #2
 80051d6:	4358      	muls	r0, r3
 80051d8:	f7fa ff96 	bl	8000108 <__udivsi3>
 80051dc:	2356      	movs	r3, #86	; 0x56
 80051de:	54e0      	strb	r0, [r4, r3]

}
 80051e0:	bd10      	pop	{r4, pc}
    bPhase++;
 80051e2:	2101      	movs	r1, #1
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80051e4:	1e4a      	subs	r2, r1, #1
 80051e6:	e7ea      	b.n	80051be <RUC_Init+0x36>
    bPhase++;
 80051e8:	2102      	movs	r1, #2
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80051ea:	1e4a      	subs	r2, r1, #1
 80051ec:	e7e7      	b.n	80051be <RUC_Init+0x36>
    bPhase++;
 80051ee:	2103      	movs	r1, #3
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80051f0:	1e4a      	subs	r2, r1, #1
 80051f2:	e7e4      	b.n	80051be <RUC_Init+0x36>
    bPhase++;
 80051f4:	2104      	movs	r1, #4
  pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 80051f6:	1e4a      	subs	r2, r1, #1
 80051f8:	e7e1      	b.n	80051be <RUC_Init+0x36>
 80051fa:	46c0      	nop			; (mov r8, r8)

080051fc <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear( RevUpCtrl_Handle_t * pHandle, int16_t hMotorDirection )
{
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  pHandle->hDirection = hMotorDirection;
  pHandle->EnteredZone1 = false;

  /*Initializes the rev up stages counter.*/
  pHandle->bStageCnt = 0u;
 80051fe:	2258      	movs	r2, #88	; 0x58
 8005200:	2300      	movs	r3, #0
{
 8005202:	0004      	movs	r4, r0
 8005204:	000d      	movs	r5, r1
  SpeednTorqCtrl_Handle_t * pSTC = pHandle->pSTC;
 8005206:	6e87      	ldr	r7, [r0, #104]	; 0x68
  VirtualSpeedSensor_Handle_t * pVSS = pHandle->pVSS;
 8005208:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
  pHandle->hDirection = hMotorDirection;
 800520a:	80c1      	strh	r1, [r0, #6]
  pHandle->bStageCnt = 0u;
 800520c:	5483      	strb	r3, [r0, r2]
  pHandle->bOTFRelCounter = 0u;
 800520e:	3a05      	subs	r2, #5
 8005210:	5483      	strb	r3, [r0, r2]
  pHandle->OTFSCLowside = false;
 8005212:	3201      	adds	r2, #1
 8005214:	5283      	strh	r3, [r0, r2]

  /* Calls the clear method of VSS.*/
  VSS_Clear( pVSS );
 8005216:	0030      	movs	r0, r6
 8005218:	f000 fe9c 	bl	8005f54 <VSS_Clear>

  /* Sets the STC in torque mode.*/
  STC_SetControlMode( pSTC, STC_TORQUE_MODE );
 800521c:	0038      	movs	r0, r7
 800521e:	2100      	movs	r1, #0
 8005220:	f000 f90c 	bl	800543c <STC_SetControlMode>

  /* Sets the mechanical starting angle of VSS.*/
  VSS_SetMecAngle( pVSS, pHandle->hStartingMecAngle * hMotorDirection );
 8005224:	8861      	ldrh	r1, [r4, #2]
 8005226:	b2ad      	uxth	r5, r5
 8005228:	4369      	muls	r1, r5
 800522a:	0030      	movs	r0, r6
 800522c:	b209      	sxth	r1, r1
 800522e:	f000 ff5d 	bl	80060ec <VSS_SetMecAngle>

  /* Sets to zero the starting torque of STC */
  STC_ExecRamp( pSTC, 0, 0u );
 8005232:	0038      	movs	r0, r7
 8005234:	2200      	movs	r2, #0
 8005236:	2100      	movs	r1, #0
 8005238:	f000 f904 	bl	8005444 <STC_ExecRamp>

  /* Gives the first command to STC and VSS.*/
  STC_ExecRamp( pSTC, pPhaseParams->hFinalTorque * hMotorDirection,
 800523c:	8a21      	ldrh	r1, [r4, #16]
 800523e:	0038      	movs	r0, r7
 8005240:	4369      	muls	r1, r5
 8005242:	89a2      	ldrh	r2, [r4, #12]
 8005244:	b209      	sxth	r1, r1
 8005246:	f000 f8fd 	bl	8005444 <STC_ExecRamp>
                ( uint32_t )( pPhaseParams->hDurationms ) );

  VSS_SetMecAcceleration( pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection,
 800524a:	89e1      	ldrh	r1, [r4, #14]
 800524c:	0030      	movs	r0, r6
 800524e:	4369      	muls	r1, r5
 8005250:	89a2      	ldrh	r2, [r4, #12]
 8005252:	b209      	sxth	r1, r1
 8005254:	f000 ff56 	bl	8006104 <VSS_SetMecAcceleration>
                          pPhaseParams->hDurationms );

  /* Compute hPhaseRemainingTicks.*/
  pHandle->hPhaseRemainingTicks =
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005258:	21fa      	movs	r1, #250	; 0xfa
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 800525a:	89a3      	ldrh	r3, [r4, #12]
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 800525c:	8820      	ldrh	r0, [r4, #0]
 800525e:	0089      	lsls	r1, r1, #2
    ( uint16_t )( ( ( uint32_t )pPhaseParams->hDurationms *
 8005260:	4358      	muls	r0, r3
                    ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 8005262:	f7fa ff51 	bl	8000108 <__udivsi3>

  pHandle->hPhaseRemainingTicks++;

  /*Set the next phases parameter pointer.*/
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 8005266:	6963      	ldr	r3, [r4, #20]

  /*Timeout counter for PLL reset during OTF.*/
  pHandle->bResetPLLCnt = 0u;
 8005268:	2200      	movs	r2, #0
  pHandle->pCurrentPhaseParams = pPhaseParams->pNext;
 800526a:	60a3      	str	r3, [r4, #8]
  pHandle->bResetPLLCnt = 0u;
 800526c:	2357      	movs	r3, #87	; 0x57
  pHandle->hPhaseRemainingTicks++;
 800526e:	3001      	adds	r0, #1
 8005270:	80a0      	strh	r0, [r4, #4]
  pHandle->bResetPLLCnt = 0u;
 8005272:	54e2      	strb	r2, [r4, r3]
}
 8005274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005276:	46c0      	nop			; (mov r8, r8)

08005278 <RUC_Exec>:
  * @brief  Main revup controller procedure executing overall programmed phases.
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Boolean set to false when entire revup phases have been completed.
  */
__weak bool RUC_Exec( RevUpCtrl_Handle_t * pHandle )
{
 8005278:	b570      	push	{r4, r5, r6, lr}
  bool retVal = true;

  if ( pHandle->hPhaseRemainingTicks > 0u )
 800527a:	8883      	ldrh	r3, [r0, #4]
{
 800527c:	0004      	movs	r4, r0
  if ( pHandle->hPhaseRemainingTicks > 0u )
 800527e:	2b00      	cmp	r3, #0
 8005280:	d126      	bne.n	80052d0 <RUC_Exec+0x58>

  } /* hPhaseRemainingTicks > 0 */

  if ( pHandle->hPhaseRemainingTicks == 0u )
  {
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8005282:	68a3      	ldr	r3, [r4, #8]
      /*Increases the rev up stages counter.*/
      pHandle->bStageCnt++;
    }
    else
    {
      retVal = false;
 8005284:	2000      	movs	r0, #0
    if ( pHandle->pCurrentPhaseParams != MC_NULL )
 8005286:	2b00      	cmp	r3, #0
 8005288:	d021      	beq.n	80052ce <RUC_Exec+0x56>
      STC_ExecRamp( pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800528a:	881a      	ldrh	r2, [r3, #0]
 800528c:	8899      	ldrh	r1, [r3, #4]
 800528e:	88e3      	ldrh	r3, [r4, #6]
 8005290:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005292:	4359      	muls	r1, r3
 8005294:	b209      	sxth	r1, r1
 8005296:	f000 f8d5 	bl	8005444 <STC_ExecRamp>
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800529a:	68a3      	ldr	r3, [r4, #8]
      VSS_SetMecAcceleration( pHandle->pVSS,
 800529c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800529e:	881a      	ldrh	r2, [r3, #0]
                              pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 80052a0:	8859      	ldrh	r1, [r3, #2]
 80052a2:	88e3      	ldrh	r3, [r4, #6]
 80052a4:	4359      	muls	r1, r3
      VSS_SetMecAcceleration( pHandle->pVSS,
 80052a6:	b209      	sxth	r1, r1
 80052a8:	f000 ff2c 	bl	8006104 <VSS_SetMecAcceleration>
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 80052ac:	21fa      	movs	r1, #250	; 0xfa
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 80052ae:	68a5      	ldr	r5, [r4, #8]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 80052b0:	8820      	ldrh	r0, [r4, #0]
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 80052b2:	882b      	ldrh	r3, [r5, #0]
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 80052b4:	0089      	lsls	r1, r1, #2
        ( uint16_t )( ( ( uint32_t )pHandle->pCurrentPhaseParams->hDurationms *
 80052b6:	4358      	muls	r0, r3
                        ( uint32_t )pHandle->hRUCFrequencyHz ) / 1000u );
 80052b8:	f7fa ff26 	bl	8000108 <__udivsi3>
      pHandle->bStageCnt++;
 80052bc:	2258      	movs	r2, #88	; 0x58
      pHandle->hPhaseRemainingTicks++;
 80052be:	3001      	adds	r0, #1
 80052c0:	80a0      	strh	r0, [r4, #4]
  bool retVal = true;
 80052c2:	2001      	movs	r0, #1
      pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext;
 80052c4:	68ab      	ldr	r3, [r5, #8]
 80052c6:	60a3      	str	r3, [r4, #8]
      pHandle->bStageCnt++;
 80052c8:	5ca3      	ldrb	r3, [r4, r2]
 80052ca:	3301      	adds	r3, #1
 80052cc:	54a3      	strb	r3, [r4, r2]
    }
  }
  return retVal;
}
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->hPhaseRemainingTicks--;
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	8083      	strh	r3, [r0, #4]
  if ( pHandle->hPhaseRemainingTicks == 0u )
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d0d3      	beq.n	8005282 <RUC_Exec+0xa>
  bool retVal = true;
 80052da:	2001      	movs	r0, #1
 80052dc:	e7f7      	b.n	80052ce <RUC_Exec+0x56>
 80052de:	46c0      	nop			; (mov r8, r8)

080052e0 <RUC_FirstAccelerationStageReached>:
  */
__weak bool RUC_FirstAccelerationStageReached( RevUpCtrl_Handle_t * pHandle )
{
  bool retVal = false;

  if ( pHandle->bStageCnt >= pHandle->bFirstAccelerationStage )
 80052e0:	2358      	movs	r3, #88	; 0x58
 80052e2:	5cc2      	ldrb	r2, [r0, r3]
 80052e4:	3b0f      	subs	r3, #15
 80052e6:	5cc3      	ldrb	r3, [r0, r3]
 80052e8:	2000      	movs	r0, #0
 80052ea:	429a      	cmp	r2, r3
 80052ec:	4140      	adcs	r0, r0
  {
    retVal = true;
  }
  return retVal;
 80052ee:	b2c0      	uxtb	r0, r0
}
 80052f0:	4770      	bx	lr
 80052f2:	46c0      	nop			; (mov r8, r8)

080052f4 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 80052f4:	004b      	lsls	r3, r1, #1
 80052f6:	185b      	adds	r3, r3, r1
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	18c0      	adds	r0, r0, r3
 80052fc:	8182      	strh	r2, [r0, #12]
}
 80052fe:	4770      	bx	lr

08005300 <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8005300:	004b      	lsls	r3, r1, #1
 8005302:	185b      	adds	r3, r3, r1
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	18c0      	adds	r0, r0, r3
 8005308:	81c2      	strh	r2, [r0, #14]
}
 800530a:	4770      	bx	lr

0800530c <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 800530c:	004b      	lsls	r3, r1, #1
 800530e:	185b      	adds	r3, r3, r1
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	18c0      	adds	r0, r0, r3
 8005314:	8202      	strh	r2, [r0, #16]
}
 8005316:	4770      	bx	lr

08005318 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8005318:	004b      	lsls	r3, r1, #1
 800531a:	185b      	adds	r3, r3, r1
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	18c0      	adds	r0, r0, r3
 8005320:	8980      	ldrh	r0, [r0, #12]
}
 8005322:	4770      	bx	lr

08005324 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8005324:	004b      	lsls	r3, r1, #1
 8005326:	185b      	adds	r3, r3, r1
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	18c0      	adds	r0, r0, r3
 800532c:	230e      	movs	r3, #14
 800532e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005330:	4770      	bx	lr
 8005332:	46c0      	nop			; (mov r8, r8)

08005334 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8005334:	004b      	lsls	r3, r1, #1
 8005336:	185b      	adds	r3, r3, r1
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	18c0      	adds	r0, r0, r3
 800533c:	2310      	movs	r3, #16
 800533e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005340:	4770      	bx	lr
 8005342:	46c0      	nop			; (mov r8, r8)

08005344 <RUC_GetNumberOfPhases>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
 8005344:	2348      	movs	r3, #72	; 0x48
 8005346:	5cc0      	ldrb	r0, [r0, r3]
}
 8005348:	4770      	bx	lr
 800534a:	46c0      	nop			; (mov r8, r8)

0800534c <SPD_GetElAngle>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
 800534c:	2304      	movs	r3, #4
 800534e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005350:	4770      	bx	lr
 8005352:	46c0      	nop			; (mov r8, r8)

08005354 <SPD_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
 8005354:	230c      	movs	r3, #12
 8005356:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005358:	4770      	bx	lr
 800535a:	46c0      	nop			; (mov r8, r8)

0800535c <SPD_GetInstElSpeedDpp>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
 800535c:	2310      	movs	r3, #16
 800535e:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005360:	4770      	bx	lr
 8005362:	46c0      	nop			; (mov r8, r8)

08005364 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8005364:	b570      	push	{r4, r5, r6, lr}
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8005366:	2200      	movs	r2, #0
 8005368:	5e8a      	ldrsh	r2, [r1, r2]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800536a:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800536c:	7803      	ldrb	r3, [r0, #0]
  if ( *pMecSpeedUnit < 0 )
 800536e:	2a00      	cmp	r2, #0
 8005370:	db24      	blt.n	80053bc <SPD_IsMecSpeedReliable+0x58>
    hAux = -( *pMecSpeedUnit );
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8005372:	b292      	uxth	r2, r2
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8005374:	8ac6      	ldrh	r6, [r0, #22]
  {
    SpeedError = true;
 8005376:	2101      	movs	r1, #1
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8005378:	8a85      	ldrh	r5, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800537a:	4296      	cmp	r6, r2
 800537c:	d802      	bhi.n	8005384 <SPD_IsMecSpeedReliable+0x20>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800537e:	4295      	cmp	r5, r2
 8005380:	41ad      	sbcs	r5, r5
 8005382:	4269      	negs	r1, r5
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8005384:	2512      	movs	r5, #18
 8005386:	5f42      	ldrsh	r2, [r0, r5]
 8005388:	2a00      	cmp	r2, #0
 800538a:	db14      	blt.n	80053b6 <SPD_IsMecSpeedReliable+0x52>
    hAux = -( pHandle->hMecAccelUnitP );
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800538c:	b292      	uxth	r2, r2
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800538e:	8b05      	ldrh	r5, [r0, #24]
 8005390:	4295      	cmp	r5, r2
 8005392:	d301      	bcc.n	8005398 <SPD_IsMecSpeedReliable+0x34>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8005394:	2900      	cmp	r1, #0
 8005396:	d009      	beq.n	80053ac <SPD_IsMecSpeedReliable+0x48>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8005398:	429c      	cmp	r4, r3
 800539a:	d901      	bls.n	80053a0 <SPD_IsMecSpeedReliable+0x3c>
    {
      bSpeedErrorNumber++;
 800539c:	3301      	adds	r3, #1
 800539e:	b2db      	uxtb	r3, r3
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80053a0:	7003      	strb	r3, [r0, #0]
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 80053a2:	1b18      	subs	r0, r3, r4
 80053a4:	1e42      	subs	r2, r0, #1
 80053a6:	4190      	sbcs	r0, r2

  return ( SpeedSensorReliability );
 80053a8:	b2c0      	uxtb	r0, r0
}
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
      bSpeedErrorNumber = 0u;
 80053ac:	42a3      	cmp	r3, r4
 80053ae:	4149      	adcs	r1, r1
 80053b0:	4249      	negs	r1, r1
 80053b2:	400b      	ands	r3, r1
 80053b4:	e7f4      	b.n	80053a0 <SPD_IsMecSpeedReliable+0x3c>
    hAux = -( pHandle->hMecAccelUnitP );
 80053b6:	4252      	negs	r2, r2
 80053b8:	b292      	uxth	r2, r2
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 80053ba:	e7e8      	b.n	800538e <SPD_IsMecSpeedReliable+0x2a>
    hAux = -( *pMecSpeedUnit );
 80053bc:	4252      	negs	r2, r2
 80053be:	b292      	uxth	r2, r2
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 80053c0:	e7d8      	b.n	8005374 <SPD_IsMecSpeedReliable+0x10>
 80053c2:	46c0      	nop			; (mov r8, r8)

080053c4 <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 80053c4:	0003      	movs	r3, r0
 80053c6:	b510      	push	{r4, lr}
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 80053c8:	210c      	movs	r1, #12
 80053ca:	5e42      	ldrsh	r2, [r0, r1]
  wAux *= INT16_MAX;
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80053cc:	2114      	movs	r1, #20
 80053ce:	5e59      	ldrsh	r1, [r3, r1]
  wAux *= INT16_MAX;
 80053d0:	03d0      	lsls	r0, r2, #15
 80053d2:	1a80      	subs	r0, r0, r2
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 80053d4:	f7fa ff22 	bl	800021c <__divsi3>
  return ( int16_t )wAux;
 80053d8:	b200      	sxth	r0, r0
}
 80053da:	bd10      	pop	{r4, pc}

080053dc <STC_Init>:
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
 80053dc:	232a      	movs	r3, #42	; 0x2a
  pHandle->SPD = SPD_Handle;
 80053de:	6142      	str	r2, [r0, #20]
  pHandle->PISpeed = pPI;
 80053e0:	6101      	str	r1, [r0, #16]
  pHandle->Mode = pHandle->ModeDefault;
 80053e2:	5cc3      	ldrb	r3, [r0, r3]
 80053e4:	7003      	strb	r3, [r0, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 80053e6:	222c      	movs	r2, #44	; 0x2c
 80053e8:	5e83      	ldrsh	r3, [r0, r2]
 80053ea:	041b      	lsls	r3, r3, #16
 80053ec:	6043      	str	r3, [r0, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 80053ee:	222e      	movs	r2, #46	; 0x2e
 80053f0:	5e83      	ldrsh	r3, [r0, r2]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	6083      	str	r3, [r0, #8]
  pHandle->TargetFinal = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 80053fa:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80053fc:	6183      	str	r3, [r0, #24]
}
 80053fe:	4770      	bx	lr

08005400 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8005400:	6141      	str	r1, [r0, #20]
}
 8005402:	4770      	bx	lr

08005404 <STC_GetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
 8005404:	6940      	ldr	r0, [r0, #20]
}
 8005406:	4770      	bx	lr

08005408 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8005408:	7803      	ldrb	r3, [r0, #0]
{
 800540a:	b510      	push	{r4, lr}
  if ( pHandle->Mode == STC_SPEED_MODE )
 800540c:	2b01      	cmp	r3, #1
 800540e:	d000      	beq.n	8005412 <STC_Clear+0xa>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8005410:	bd10      	pop	{r4, pc}
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8005412:	2100      	movs	r1, #0
 8005414:	6900      	ldr	r0, [r0, #16]
 8005416:	f7ff f837 	bl	8004488 <PID_SetIntegralTerm>
}
 800541a:	e7f9      	b.n	8005410 <STC_Clear+0x8>

0800541c <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800541c:	6843      	ldr	r3, [r0, #4]
 800541e:	17d8      	asrs	r0, r3, #31
 8005420:	0400      	lsls	r0, r0, #16
 8005422:	0c00      	lsrs	r0, r0, #16
 8005424:	18c0      	adds	r0, r0, r3
 8005426:	1400      	asrs	r0, r0, #16
}
 8005428:	4770      	bx	lr
 800542a:	46c0      	nop			; (mov r8, r8)

0800542c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800542c:	6883      	ldr	r3, [r0, #8]
 800542e:	17d8      	asrs	r0, r3, #31
 8005430:	0400      	lsls	r0, r0, #16
 8005432:	0c00      	lsrs	r0, r0, #16
 8005434:	18c0      	adds	r0, r0, r3
 8005436:	1400      	asrs	r0, r0, #16
}
 8005438:	4770      	bx	lr
 800543a:	46c0      	nop			; (mov r8, r8)

0800543c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800543c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800543e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8005440:	60c3      	str	r3, [r0, #12]
}
 8005442:	4770      	bx	lr

08005444 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8005446:	7803      	ldrb	r3, [r0, #0]
{
 8005448:	0004      	movs	r4, r0
 800544a:	000e      	movs	r6, r1
 800544c:	0017      	movs	r7, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800544e:	2b00      	cmp	r3, #0
 8005450:	d016      	beq.n	8005480 <STC_ExecRamp+0x3c>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8005452:	6842      	ldr	r2, [r0, #4]
 8005454:	17d3      	asrs	r3, r2, #31
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	0c1b      	lsrs	r3, r3, #16
 800545a:	189b      	adds	r3, r3, r2
 800545c:	141d      	asrs	r5, r3, #16

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800545e:	8bc3      	ldrh	r3, [r0, #30]
 8005460:	4299      	cmp	r1, r3
 8005462:	dd01      	ble.n	8005468 <STC_ExecRamp+0x24>
      AllowedRange = false;
 8005464:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8005466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8005468:	2224      	movs	r2, #36	; 0x24
 800546a:	5e83      	ldrsh	r3, [r0, r2]
 800546c:	428b      	cmp	r3, r1
 800546e:	dcf9      	bgt.n	8005464 <STC_ExecRamp+0x20>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8005470:	8c03      	ldrh	r3, [r0, #32]
 8005472:	4299      	cmp	r1, r3
 8005474:	da0e      	bge.n	8005494 <STC_ExecRamp+0x50>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8005476:	2222      	movs	r2, #34	; 0x22
 8005478:	5e83      	ldrsh	r3, [r0, r2]
 800547a:	428b      	cmp	r3, r1
 800547c:	dbf2      	blt.n	8005464 <STC_ExecRamp+0x20>
 800547e:	e009      	b.n	8005494 <STC_ExecRamp+0x50>
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005480:	f7ff ffd4 	bl	800542c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005484:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8005486:	0005      	movs	r5, r0
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 8005488:	429e      	cmp	r6, r3
 800548a:	dceb      	bgt.n	8005464 <STC_ExecRamp+0x20>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800548c:	2228      	movs	r2, #40	; 0x28
 800548e:	5ea3      	ldrsh	r3, [r4, r2]
 8005490:	42b3      	cmp	r3, r6
 8005492:	dce7      	bgt.n	8005464 <STC_ExecRamp+0x20>
    if ( hDurationms == 0u )
 8005494:	2f00      	cmp	r7, #0
 8005496:	d109      	bne.n	80054ac <STC_ExecRamp+0x68>
      if ( pHandle->Mode == STC_SPEED_MODE )
 8005498:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800549a:	0436      	lsls	r6, r6, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 800549c:	2b01      	cmp	r3, #1
 800549e:	d015      	beq.n	80054cc <STC_ExecRamp+0x88>
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80054a0:	60a6      	str	r6, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80054a2:	2300      	movs	r3, #0
 80054a4:	2001      	movs	r0, #1
 80054a6:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80054a8:	61a3      	str	r3, [r4, #24]
 80054aa:	e7dc      	b.n	8005466 <STC_ExecRamp+0x22>
      wAux /= 1000u;
 80054ac:	21fa      	movs	r1, #250	; 0xfa
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80054ae:	8ba0      	ldrh	r0, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 80054b0:	8066      	strh	r6, [r4, #2]
      wAux /= 1000u;
 80054b2:	0089      	lsls	r1, r1, #2
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80054b4:	4378      	muls	r0, r7
      wAux /= 1000u;
 80054b6:	f7fa fe27 	bl	8000108 <__udivsi3>
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80054ba:	1b76      	subs	r6, r6, r5
      pHandle->RampRemainingStep++;
 80054bc:	1c41      	adds	r1, r0, #1
 80054be:	60e1      	str	r1, [r4, #12]
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80054c0:	0430      	lsls	r0, r6, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80054c2:	f7fa feab 	bl	800021c <__divsi3>
      pHandle->IncDecAmount = wAux1;
 80054c6:	61a0      	str	r0, [r4, #24]
 80054c8:	2001      	movs	r0, #1
 80054ca:	e7cc      	b.n	8005466 <STC_ExecRamp+0x22>
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80054cc:	6066      	str	r6, [r4, #4]
 80054ce:	e7e8      	b.n	80054a2 <STC_ExecRamp+0x5e>

080054d0 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80054d4:	6183      	str	r3, [r0, #24]
}
 80054d6:	4770      	bx	lr

080054d8 <STC_CalcTorqueReference>:
  int16_t hTorqueReference = 0;
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 80054d8:	7802      	ldrb	r2, [r0, #0]
{
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	0005      	movs	r5, r0
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80054de:	2a00      	cmp	r2, #0
 80054e0:	d111      	bne.n	8005506 <STC_CalcTorqueReference+0x2e>
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80054e2:	68eb      	ldr	r3, [r5, #12]
    wCurrentReference = pHandle->TorqueRef;
 80054e4:	6886      	ldr	r6, [r0, #8]
  if ( pHandle->RampRemainingStep > 1u )
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d911      	bls.n	800550e <STC_CalcTorqueReference+0x36>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80054ea:	69a9      	ldr	r1, [r5, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80054ec:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 80054ee:	1876      	adds	r6, r6, r1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80054f0:	17f4      	asrs	r4, r6, #31
 80054f2:	0424      	lsls	r4, r4, #16
 80054f4:	0c24      	lsrs	r4, r4, #16
 80054f6:	19a4      	adds	r4, r4, r6
    pHandle->RampRemainingStep--;
 80054f8:	60eb      	str	r3, [r5, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80054fa:	1424      	asrs	r4, r4, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 80054fc:	2a01      	cmp	r2, #1
 80054fe:	d00f      	beq.n	8005520 <STC_CalcTorqueReference+0x48>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8005500:	b220      	sxth	r0, r4
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005502:	60ae      	str	r6, [r5, #8]
  }

  return hTorqueReference;
}
 8005504:	bd70      	pop	{r4, r5, r6, pc}
  if ( pHandle->RampRemainingStep > 1u )
 8005506:	68eb      	ldr	r3, [r5, #12]
    wCurrentReference = pHandle->SpeedRefUnitExt;
 8005508:	6846      	ldr	r6, [r0, #4]
  if ( pHandle->RampRemainingStep > 1u )
 800550a:	2b01      	cmp	r3, #1
 800550c:	d8ed      	bhi.n	80054ea <STC_CalcTorqueReference+0x12>
  else if ( pHandle->RampRemainingStep == 1u )
 800550e:	2b01      	cmp	r3, #1
 8005510:	d011      	beq.n	8005536 <STC_CalcTorqueReference+0x5e>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 8005512:	17f0      	asrs	r0, r6, #31
 8005514:	0400      	lsls	r0, r0, #16
 8005516:	0c00      	lsrs	r0, r0, #16
 8005518:	1980      	adds	r0, r0, r6
 800551a:	1404      	asrs	r4, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 800551c:	2a01      	cmp	r2, #1
 800551e:	d1ef      	bne.n	8005500 <STC_CalcTorqueReference+0x28>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8005520:	6968      	ldr	r0, [r5, #20]
 8005522:	f7ff ff17 	bl	8005354 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 8005526:	1a20      	subs	r0, r4, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8005528:	b201      	sxth	r1, r0
 800552a:	6928      	ldr	r0, [r5, #16]
 800552c:	f7fe ffb8 	bl	80044a0 <PI_Controller>
    pHandle->SpeedRefUnitExt = wCurrentReference;
 8005530:	606e      	str	r6, [r5, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8005532:	0406      	lsls	r6, r0, #16
 8005534:	e7e5      	b.n	8005502 <STC_CalcTorqueReference+0x2a>
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8005536:	2302      	movs	r3, #2
 8005538:	5eec      	ldrsh	r4, [r5, r3]
    pHandle->RampRemainingStep = 0u;
 800553a:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800553c:	0426      	lsls	r6, r4, #16
    pHandle->RampRemainingStep = 0u;
 800553e:	60eb      	str	r3, [r5, #12]
 8005540:	e7dc      	b.n	80054fc <STC_CalcTorqueReference+0x24>
 8005542:	46c0      	nop			; (mov r8, r8)

08005544 <STC_GetMecSpeedRefUnitDefault>:
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
 8005544:	232c      	movs	r3, #44	; 0x2c
 8005546:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005548:	4770      	bx	lr
 800554a:	46c0      	nop			; (mov r8, r8)

0800554c <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800554c:	8bc0      	ldrh	r0, [r0, #30]
}
 800554e:	4770      	bx	lr

08005550 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
 8005550:	2324      	movs	r3, #36	; 0x24
 8005552:	5ec0      	ldrsh	r0, [r0, r3]
}
 8005554:	4770      	bx	lr
 8005556:	46c0      	nop			; (mov r8, r8)

08005558 <STC_GetDefaultIqdref>:
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8005558:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 800555a:	8dc0      	ldrh	r0, [r0, #46]	; 0x2e
 800555c:	041b      	lsls	r3, r3, #16
{
 800555e:	b082      	sub	sp, #8
  return IqdRefDefault;
 8005560:	4318      	orrs	r0, r3
}
 8005562:	b002      	add	sp, #8
 8005564:	4770      	bx	lr
 8005566:	46c0      	nop			; (mov r8, r8)

08005568 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8005568:	b510      	push	{r4, lr}
 800556a:	0004      	movs	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800556c:	6940      	ldr	r0, [r0, #20]
 800556e:	f7ff fef1 	bl	8005354 <SPD_GetAvrgMecSpeedUnit>
 8005572:	0400      	lsls	r0, r0, #16
 8005574:	6060      	str	r0, [r4, #4]
}
 8005576:	bd10      	pop	{r4, pc}

08005578 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8005578:	2300      	movs	r3, #0
 800557a:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800557c:	8043      	strh	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800557e:	8083      	strh	r3, [r0, #4]
}
 8005580:	4770      	bx	lr
 8005582:	46c0      	nop			; (mov r8, r8)

08005584 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 8005584:	0003      	movs	r3, r0
 8005586:	b510      	push	{r4, lr}
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8005588:	885c      	ldrh	r4, [r3, #2]
  State_t LocalState =  pHandle->bState;
 800558a:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800558c:	430c      	orrs	r4, r1
 800558e:	4394      	bics	r4, r2
 8005590:	0022      	movs	r2, r4
 8005592:	805c      	strh	r4, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8005594:	889c      	ldrh	r4, [r3, #4]
 8005596:	4321      	orrs	r1, r4
 8005598:	8099      	strh	r1, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800559a:	280a      	cmp	r0, #10
 800559c:	d006      	beq.n	80055ac <STM_FaultProcessing+0x28>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800559e:	2a00      	cmp	r2, #0
 80055a0:	d100      	bne.n	80055a4 <STM_FaultProcessing+0x20>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80055a2:	bd10      	pop	{r4, pc}
      pHandle->bState = FAULT_NOW;
 80055a4:	220a      	movs	r2, #10
      LocalState = FAULT_NOW;
 80055a6:	200a      	movs	r0, #10
      pHandle->bState = FAULT_NOW;
 80055a8:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 80055aa:	e7fa      	b.n	80055a2 <STM_FaultProcessing+0x1e>
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80055ac:	2a00      	cmp	r2, #0
 80055ae:	d1f8      	bne.n	80055a2 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80055b0:	320b      	adds	r2, #11
 80055b2:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 80055b4:	3001      	adds	r0, #1
 80055b6:	e7f4      	b.n	80055a2 <STM_FaultProcessing+0x1e>

080055b8 <STM_NextState>:
  switch ( bCurrentState )
 80055b8:	7803      	ldrb	r3, [r0, #0]
{
 80055ba:	b510      	push	{r4, lr}
  switch ( bCurrentState )
 80055bc:	2b14      	cmp	r3, #20
 80055be:	d807      	bhi.n	80055d0 <STM_NextState+0x18>
 80055c0:	4a35      	ldr	r2, [pc, #212]	; (8005698 <STM_NextState+0xe0>)
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	58d3      	ldr	r3, [r2, r3]
 80055c6:	469f      	mov	pc, r3
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80055c8:	290e      	cmp	r1, #14
 80055ca:	d00e      	beq.n	80055ea <STM_NextState+0x32>
      if ( bState == ANY_STOP )
 80055cc:	2907      	cmp	r1, #7
 80055ce:	d00c      	beq.n	80055ea <STM_NextState+0x32>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80055d0:	2302      	movs	r3, #2
 80055d2:	000a      	movs	r2, r1
 80055d4:	439a      	bics	r2, r3
 80055d6:	0013      	movs	r3, r2
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d009      	beq.n	80055f0 <STM_NextState+0x38>
 80055dc:	2400      	movs	r4, #0
 80055de:	2907      	cmp	r1, #7
 80055e0:	d108      	bne.n	80055f4 <STM_NextState+0x3c>
}
 80055e2:	0020      	movs	r0, r4
 80055e4:	bd10      	pop	{r4, pc}
      if ( bState == IDLE )
 80055e6:	2900      	cmp	r1, #0
 80055e8:	d1f2      	bne.n	80055d0 <STM_NextState+0x18>
    pHandle->bState = bNewState;
 80055ea:	2401      	movs	r4, #1
 80055ec:	7001      	strb	r1, [r0, #0]
 80055ee:	e7f8      	b.n	80055e2 <STM_NextState+0x2a>
 80055f0:	2400      	movs	r4, #0
 80055f2:	e7f6      	b.n	80055e2 <STM_NextState+0x2a>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	f7ff ffc4 	bl	8005584 <STM_FaultProcessing>
 80055fc:	e7f1      	b.n	80055e2 <STM_NextState+0x2a>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 80055fe:	2907      	cmp	r1, #7
 8005600:	d0f3      	beq.n	80055ea <STM_NextState+0x32>
 8005602:	000b      	movs	r3, r1
 8005604:	3b0d      	subs	r3, #13
 8005606:	2b01      	cmp	r3, #1
 8005608:	d8e2      	bhi.n	80055d0 <STM_NextState+0x18>
 800560a:	e7ee      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800560c:	2913      	cmp	r1, #19
 800560e:	d0ec      	beq.n	80055ea <STM_NextState+0x32>
 8005610:	2302      	movs	r3, #2
 8005612:	000a      	movs	r2, r1
 8005614:	439a      	bics	r2, r3
 8005616:	0013      	movs	r3, r2
 8005618:	2a05      	cmp	r2, #5
 800561a:	d1dd      	bne.n	80055d8 <STM_NextState+0x20>
 800561c:	e7e5      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800561e:	2907      	cmp	r1, #7
 8005620:	d0e3      	beq.n	80055ea <STM_NextState+0x32>
 8005622:	2911      	cmp	r1, #17
 8005624:	d8d4      	bhi.n	80055d0 <STM_NextState+0x18>
 8005626:	4b1d      	ldr	r3, [pc, #116]	; (800569c <STM_NextState+0xe4>)
 8005628:	40cb      	lsrs	r3, r1
 800562a:	07db      	lsls	r3, r3, #31
 800562c:	d5d0      	bpl.n	80055d0 <STM_NextState+0x18>
 800562e:	e7dc      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8005630:	000b      	movs	r3, r1
 8005632:	22fd      	movs	r2, #253	; 0xfd
 8005634:	3b12      	subs	r3, #18
 8005636:	4213      	tst	r3, r2
 8005638:	d1c8      	bne.n	80055cc <STM_NextState+0x14>
 800563a:	e7d6      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800563c:	2911      	cmp	r1, #17
 800563e:	d1c5      	bne.n	80055cc <STM_NextState+0x14>
 8005640:	e7d3      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8005642:	2902      	cmp	r1, #2
 8005644:	d1c2      	bne.n	80055cc <STM_NextState+0x14>
 8005646:	e7d0      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8005648:	1f0b      	subs	r3, r1, #4
 800564a:	2b01      	cmp	r3, #1
 800564c:	d8be      	bhi.n	80055cc <STM_NextState+0x14>
 800564e:	e7cc      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 8005650:	2904      	cmp	r1, #4
 8005652:	d1bb      	bne.n	80055cc <STM_NextState+0x14>
 8005654:	e7c9      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8005656:	2912      	cmp	r1, #18
 8005658:	d1b8      	bne.n	80055cc <STM_NextState+0x14>
 800565a:	e7c6      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800565c:	2900      	cmp	r1, #0
 800565e:	d0c4      	beq.n	80055ea <STM_NextState+0x32>
 8005660:	290c      	cmp	r1, #12
 8005662:	d1b5      	bne.n	80055d0 <STM_NextState+0x18>
 8005664:	e7c1      	b.n	80055ea <STM_NextState+0x32>
      if ( bState == STOP_IDLE )
 8005666:	2909      	cmp	r1, #9
 8005668:	d1b2      	bne.n	80055d0 <STM_NextState+0x18>
 800566a:	e7be      	b.n	80055ea <STM_NextState+0x32>
      if ( bState == STOP )
 800566c:	2908      	cmp	r1, #8
 800566e:	d1af      	bne.n	80055d0 <STM_NextState+0x18>
 8005670:	e7bb      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8005672:	1f8b      	subs	r3, r1, #6
 8005674:	2b01      	cmp	r3, #1
 8005676:	d8ab      	bhi.n	80055d0 <STM_NextState+0x18>
 8005678:	e7b7      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800567a:	2302      	movs	r3, #2
 800567c:	000a      	movs	r2, r1
 800567e:	439a      	bics	r2, r3
 8005680:	2a01      	cmp	r2, #1
 8005682:	d0b2      	beq.n	80055ea <STM_NextState+0x32>
           || ( bState == ICLWAIT ) )
 8005684:	290c      	cmp	r1, #12
 8005686:	d1a9      	bne.n	80055dc <STM_NextState+0x24>
 8005688:	e7af      	b.n	80055ea <STM_NextState+0x32>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800568a:	2308      	movs	r3, #8
 800568c:	000a      	movs	r2, r1
 800568e:	439a      	bics	r2, r3
 8005690:	2a07      	cmp	r2, #7
 8005692:	d19d      	bne.n	80055d0 <STM_NextState+0x18>
 8005694:	e7a9      	b.n	80055ea <STM_NextState+0x32>
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	08006da4 	.word	0x08006da4
 800569c:	00030012 	.word	0x00030012

080056a0 <STM_GetState>:
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
 80056a0:	7800      	ldrb	r0, [r0, #0]
}
 80056a2:	4770      	bx	lr

080056a4 <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 80056a4:	7802      	ldrb	r2, [r0, #0]
{
 80056a6:	0003      	movs	r3, r0
  bool bToBeReturned = false;
 80056a8:	2000      	movs	r0, #0
  if ( pHandle->bState == FAULT_OVER )
 80056aa:	2a0b      	cmp	r2, #11
 80056ac:	d103      	bne.n	80056b6 <STM_FaultAcknowledged+0x12>
  {
    pHandle->bState = STOP_IDLE;
 80056ae:	3a02      	subs	r2, #2
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80056b0:	8098      	strh	r0, [r3, #4]
    pHandle->bState = STOP_IDLE;
 80056b2:	701a      	strb	r2, [r3, #0]
    bToBeReturned = true;
 80056b4:	3001      	adds	r0, #1
  }

  return ( bToBeReturned );
}
 80056b6:	4770      	bx	lr

080056b8 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80056b8:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80056ba:	8840      	ldrh	r0, [r0, #2]
 80056bc:	0400      	lsls	r0, r0, #16
 80056be:	4318      	orrs	r0, r3

  return LocalFaultState;
}
 80056c0:	4770      	bx	lr
 80056c2:	46c0      	nop			; (mov r8, r8)

080056c4 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle( STO_PLL_Handle_t * pHandle, Observer_Inputs_t * pInputs )
{
 80056c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056c6:	4645      	mov	r5, r8
 80056c8:	46de      	mov	lr, fp
 80056ca:	4657      	mov	r7, sl
 80056cc:	464e      	mov	r6, r9
  int32_t wBemf_alfa_est_Next, wBemf_beta_est_Next;
  int16_t hAux, hAux_Alfa, hAux_Beta, hIalfa_err, hIbeta_err, hRotor_Speed,
          hValfa, hVbeta;


  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80056ce:	6e83      	ldr	r3, [r0, #104]	; 0x68
{
 80056d0:	b5e0      	push	{r5, r6, r7, lr}
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80056d2:	4698      	mov	r8, r3
 80056d4:	232e      	movs	r3, #46	; 0x2e
 80056d6:	5ec2      	ldrsh	r2, [r0, r3]
{
 80056d8:	0004      	movs	r4, r0
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80056da:	03d3      	lsls	r3, r2, #15
{
 80056dc:	b08f      	sub	sp, #60	; 0x3c
  if ( pHandle->wBemf_alfa_est > ( int32_t )( pHandle->hF2 )*INT16_MAX )
 80056de:	1a9b      	subs	r3, r3, r2
 80056e0:	4598      	cmp	r8, r3
 80056e2:	dc00      	bgt.n	80056e6 <STO_PLL_CalcElAngle+0x22>
 80056e4:	e0e6      	b.n	80058b4 <STO_PLL_CalcElAngle+0x1f0>
  {
    pHandle->wBemf_alfa_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
 80056e6:	4698      	mov	r8, r3
 80056e8:	6683      	str	r3, [r0, #104]	; 0x68
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est / pHandle->hF2 );
#else
  hAux_Alfa = ( int16_t )( pHandle->wBemf_alfa_est >> pHandle->F2LOG );
 80056ea:	228f      	movs	r2, #143	; 0x8f
 80056ec:	4640      	mov	r0, r8
 80056ee:	0052      	lsls	r2, r2, #1
 80056f0:	5aa2      	ldrh	r2, [r4, r2]
 80056f2:	4110      	asrs	r0, r2
 80056f4:	9003      	str	r0, [sp, #12]
 80056f6:	b200      	sxth	r0, r0
 80056f8:	4683      	mov	fp, r0
#endif

  if ( pHandle->wBemf_beta_est > INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80056fa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80056fc:	9001      	str	r0, [sp, #4]
 80056fe:	4283      	cmp	r3, r0
 8005700:	da00      	bge.n	8005704 <STO_PLL_CalcElAngle+0x40>
 8005702:	e0d4      	b.n	80058ae <STO_PLL_CalcElAngle+0x1ea>
  {
    pHandle->wBemf_beta_est = INT16_MAX * ( int32_t )( pHandle->hF2 );
  }
  else if ( pHandle->wBemf_beta_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 8005704:	425b      	negs	r3, r3
 8005706:	4298      	cmp	r0, r3
 8005708:	dc00      	bgt.n	800570c <STO_PLL_CalcElAngle+0x48>
 800570a:	e0d0      	b.n	80058ae <STO_PLL_CalcElAngle+0x1ea>
  {
  }
#ifdef FULL_MISRA_C_COMPLIANCY
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est / pHandle->hF2 );
#else
  hAux_Beta = ( int16_t )( pHandle->wBemf_beta_est >> pHandle->F2LOG );
 800570c:	9b01      	ldr	r3, [sp, #4]
 800570e:	4113      	asrs	r3, r2
 8005710:	9304      	str	r3, [sp, #16]
 8005712:	b21b      	sxth	r3, r3
 8005714:	469a      	mov	sl, r3
#endif

  if ( pHandle->Ialfa_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8005716:	232c      	movs	r3, #44	; 0x2c
 8005718:	5ee0      	ldrsh	r0, [r4, r3]
 800571a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800571c:	03c3      	lsls	r3, r0, #15
 800571e:	1a1b      	subs	r3, r3, r0
 8005720:	429a      	cmp	r2, r3
 8005722:	dc00      	bgt.n	8005726 <STO_PLL_CalcElAngle+0x62>
 8005724:	e0cd      	b.n	80058c2 <STO_PLL_CalcElAngle+0x1fe>
  {
    pHandle->Ialfa_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
 8005726:	001a      	movs	r2, r3
 8005728:	6623      	str	r3, [r4, #96]	; 0x60
  }
  else
  {
  }

  if ( pHandle->Ibeta_est > INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 800572a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800572c:	9002      	str	r0, [sp, #8]
 800572e:	4283      	cmp	r3, r0
 8005730:	da00      	bge.n	8005734 <STO_PLL_CalcElAngle+0x70>
 8005732:	e0b9      	b.n	80058a8 <STO_PLL_CalcElAngle+0x1e4>
  {
    pHandle->Ibeta_est = INT16_MAX * ( int32_t )( pHandle->hF1 );
  }
  else if ( pHandle->Ibeta_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 8005734:	425b      	negs	r3, r3
 8005736:	4298      	cmp	r0, r3
 8005738:	dc00      	bgt.n	800573c <STO_PLL_CalcElAngle+0x78>
 800573a:	e0b5      	b.n	80058a8 <STO_PLL_CalcElAngle+0x1e4>
  }

#ifdef FULL_MISRA_C_COMPLIANCY
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 800573c:	238e      	movs	r3, #142	; 0x8e
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	5ae0      	ldrh	r0, [r4, r3]
 8005742:	0013      	movs	r3, r2
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;

#ifdef FULL_MISRA_C_COMPLIANCY
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8005744:	9f02      	ldr	r7, [sp, #8]
  hIalfa_err = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8005746:	4103      	asrs	r3, r0
  hIbeta_err = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8005748:	4107      	asrs	r7, r0
 800574a:	9705      	str	r7, [sp, #20]
  hValfa = ( int16_t ) ( wAux / 65536 );
#else
  hValfa = ( int16_t ) ( wAux >> 16 );
#endif

  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 800574c:	2602      	movs	r6, #2
 800574e:	5f8f      	ldrsh	r7, [r1, r6]
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.alpha;
 8005750:	8908      	ldrh	r0, [r1, #8]
 8005752:	2600      	movs	r6, #0
 8005754:	5f8d      	ldrsh	r5, [r1, r6]
 8005756:	4345      	muls	r5, r0
  wAux = ( int32_t )( pInputs->Vbus ) * pInputs->Valfa_beta.beta;
 8005758:	4378      	muls	r0, r7
#ifdef FULL_MISRA_C_COMPLIANCY
  hVbeta = ( int16_t ) ( wAux / 65536 );
#else
  hVbeta = ( int16_t ) ( wAux >> 16 );
 800575a:	1400      	asrs	r0, r0, #16
 800575c:	9006      	str	r0, [sp, #24]
  hAux = ( int16_t ) ( pHandle->Ialfa_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ialfa_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t ) ( pHandle->hC1 ) * hAux;
 800575e:	2620      	movs	r6, #32
 8005760:	5fa0      	ldrsh	r0, [r4, r6]
 8005762:	b21f      	sxth	r7, r3
 8005764:	4347      	muls	r7, r0
  wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8005766:	1bd2      	subs	r2, r2, r7

  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 8005768:	2622      	movs	r6, #34	; 0x22
 800576a:	5fa7      	ldrsh	r7, [r4, r6]
  hValfa = ( int16_t ) ( wAux >> 16 );
 800576c:	142d      	asrs	r5, r5, #16
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 800576e:	003e      	movs	r6, r7
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005770:	888f      	ldrh	r7, [r1, #4]
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 8005772:	9607      	str	r6, [sp, #28]
  hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8005774:	1bdb      	subs	r3, r3, r7
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIalfa_err;
 8005776:	0037      	movs	r7, r6
 8005778:	b21b      	sxth	r3, r3
 800577a:	435f      	muls	r7, r3
 800577c:	46bc      	mov	ip, r7
  wIalfa_est_Next += wAux;
 800577e:	4494      	add	ip, r2

  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 8005780:	2628      	movs	r6, #40	; 0x28
 8005782:	5fa2      	ldrsh	r2, [r4, r6]
  wIalfa_est_Next += wAux;

  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 8005784:	2624      	movs	r6, #36	; 0x24
 8005786:	5fa7      	ldrsh	r7, [r4, r6]
  wAux = ( int32_t ) ( pHandle->hC5 ) * hValfa;
 8005788:	4355      	muls	r5, r2
  wIalfa_est_Next += wAux;
 800578a:	4465      	add	r5, ip
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Alfa;
 800578c:	46bc      	mov	ip, r7
 800578e:	465f      	mov	r7, fp
 8005790:	4666      	mov	r6, ip
 8005792:	4377      	muls	r7, r6
  wIalfa_est_Next -= wAux;
 8005794:	1bed      	subs	r5, r5, r7
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;

#ifdef FULL_MISRA_C_COMPLIANCY
  wAux = ( int32_t ) hAux_Beta / pHandle->hF3;
#else
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 8005796:	4657      	mov	r7, sl
  wIalfa_est_Next -= wAux;
 8005798:	950a      	str	r5, [sp, #40]	; 0x28
  wAux = ( int32_t )( pHandle->hC4 ) * hIalfa_err;
 800579a:	2626      	movs	r6, #38	; 0x26
 800579c:	5fa5      	ldrsh	r5, [r4, r6]
 800579e:	9508      	str	r5, [sp, #32]
 80057a0:	436b      	muls	r3, r5
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80057a2:	8e65      	ldrh	r5, [r4, #50]	; 0x32
  wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 80057a4:	4443      	add	r3, r8
  wAux = ( int32_t ) hAux_Beta >> pHandle->F3POW2;
 80057a6:	412f      	asrs	r7, r5
 80057a8:	9509      	str	r5, [sp, #36]	; 0x24
 80057aa:	003d      	movs	r5, r7
#endif

  wAux = wAux * pHandle->hC6;
 80057ac:	272a      	movs	r7, #42	; 0x2a
 80057ae:	5fe6      	ldrsh	r6, [r4, r7]
 80057b0:	4375      	muls	r5, r6
 80057b2:	46b1      	mov	r9, r6
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80057b4:	270e      	movs	r7, #14
 80057b6:	5fe6      	ldrsh	r6, [r4, r7]
  hAux = ( int16_t ) ( pHandle->Ibeta_est / pHandle->hF1 );
#else
  hAux = ( int16_t ) ( pHandle->Ibeta_est >> pHandle->F1LOG );
#endif

  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 80057b8:	9f05      	ldr	r7, [sp, #20]
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80057ba:	4375      	muls	r5, r6
  wBemf_alfa_est_Next += wAux;
 80057bc:	18ed      	adds	r5, r5, r3
  wAux = ( int32_t )  ( pHandle->hC1 ) * hAux;
 80057be:	b23b      	sxth	r3, r7
 80057c0:	4358      	muls	r0, r3
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80057c2:	9b02      	ldr	r3, [sp, #8]
  wBemf_alfa_est_Next += wAux;
 80057c4:	950b      	str	r5, [sp, #44]	; 0x2c
  wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80057c6:	1a18      	subs	r0, r3, r0
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80057c8:	88cb      	ldrh	r3, [r1, #6]
  wIbeta_est_Next += wAux;

  wAux = ( int32_t ) ( pHandle->hC5 ) * hVbeta;
  wIbeta_est_Next += wAux;

  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Beta;
 80057ca:	4651      	mov	r1, sl
  hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80057cc:	1afb      	subs	r3, r7, r3
  wAux = ( int32_t ) ( pHandle->hC2 ) * hIbeta_err;
 80057ce:	9f07      	ldr	r7, [sp, #28]
 80057d0:	b21b      	sxth	r3, r3
 80057d2:	435f      	muls	r7, r3
  wIbeta_est_Next += wAux;
 80057d4:	183f      	adds	r7, r7, r0
  wAux = ( int32_t ) ( pHandle->hC5 ) * hVbeta;
 80057d6:	9806      	ldr	r0, [sp, #24]
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80057d8:	46b0      	mov	r8, r6
  wAux = ( int32_t ) ( pHandle->hC5 ) * hVbeta;
 80057da:	4342      	muls	r2, r0
  wIbeta_est_Next += wAux;
 80057dc:	19d2      	adds	r2, r2, r7
  wAux = ( int32_t )  ( pHandle->hC3 ) * hAux_Beta;
 80057de:	4667      	mov	r7, ip
 80057e0:	434f      	muls	r7, r1
  wIbeta_est_Next -= wAux;
 80057e2:	1bd7      	subs	r7, r2, r7

  wAux = ( int32_t )( pHandle->hC4 ) * hIbeta_err;
 80057e4:	9a08      	ldr	r2, [sp, #32]
 80057e6:	4353      	muls	r3, r2
  wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 80057e8:	9a01      	ldr	r2, [sp, #4]
 80057ea:	189e      	adds	r6, r3, r2

#ifdef FULL_MISRA_C_COMPLIANCY
  wAux = ( int32_t )hAux_Alfa / pHandle->hF3;
#else
  wAux = ( int32_t ) hAux_Alfa >> pHandle->F3POW2;
 80057ec:	465a      	mov	r2, fp
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	411a      	asrs	r2, r3
#endif

  wAux = wAux * pHandle->hC6;
 80057f2:	464b      	mov	r3, r9
 80057f4:	435a      	muls	r2, r3
  wAux = pHandle->_Super.hElSpeedDpp * wAux;
 80057f6:	4643      	mov	r3, r8
 80057f8:	435a      	muls	r2, r3
  wBemf_beta_est_Next -= wAux;

  /*Calls the PLL blockset*/
  pHandle->hBemf_alfa_est = hAux_Alfa;
 80057fa:	2370      	movs	r3, #112	; 0x70
  wBemf_beta_est_Next -= wAux;
 80057fc:	1ab6      	subs	r6, r6, r2
  pHandle->hBemf_alfa_est = hAux_Alfa;
 80057fe:	465a      	mov	r2, fp
 8005800:	52e2      	strh	r2, [r4, r3]
  pHandle->hBemf_beta_est = hAux_Beta;
 8005802:	3302      	adds	r3, #2
 8005804:	52e1      	strh	r1, [r4, r3]

  if (pHandle->hForcedDirection ==0)
 8005806:	33b2      	adds	r3, #178	; 0xb2
 8005808:	56e3      	ldrsb	r3, [r4, r3]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d160      	bne.n	80058d0 <STO_PLL_CalcElAngle+0x20c>
  {
    /* we are in auxiliary mode, then rely on the speed detected */
    if(pHandle->_Super.hElSpeedDpp >= 0)
 800580e:	4643      	mov	r3, r8
 8005810:	43db      	mvns	r3, r3
 8005812:	17db      	asrs	r3, r3, #31
 8005814:	4698      	mov	r8, r3
 8005816:	4642      	mov	r2, r8
 8005818:	4b30      	ldr	r3, [pc, #192]	; (80058dc <STO_PLL_CalcElAngle+0x218>)
 800581a:	4013      	ands	r3, r2
 800581c:	4a30      	ldr	r2, [pc, #192]	; (80058e0 <STO_PLL_CalcElAngle+0x21c>)
 800581e:	4690      	mov	r8, r2
 8005820:	4498      	add	r8, r3
  int32_t wAlfa_Sin_tmp, wBeta_Cos_tmp;
  int16_t hOutput;
  Trig_Components Local_Components;
  int16_t hAux1, hAux2;

  Local_Components = MCM_Trig_Functions( pHandle->_Super.hElAngle );
 8005822:	2304      	movs	r3, #4
 8005824:	5ee0      	ldrsh	r0, [r4, r3]
 8005826:	f7fb f943 	bl	8000ab0 <MCM_Trig_Functions>
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 800582a:	4642      	mov	r2, r8
 800582c:	9b04      	ldr	r3, [sp, #16]

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 800582e:	b201      	sxth	r1, r0
  hAux_Beta = ( int16_t )( hAux_Beta * wDirection  );
 8005830:	4353      	muls	r3, r2
  hRotor_Speed = STO_ExecutePLL( pHandle, hAux_Alfa, -hAux_Beta );
 8005832:	425b      	negs	r3, r3
  wBeta_Cos_tmp = ( int32_t )( hBemf_beta_est ) * ( int32_t )Local_Components.hCos;
 8005834:	b21b      	sxth	r3, r3
 8005836:	4359      	muls	r1, r3
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 8005838:	9b03      	ldr	r3, [sp, #12]
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 800583a:	1400      	asrs	r0, r0, #16
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 800583c:	4353      	muls	r3, r2
  wAlfa_Sin_tmp = ( int32_t )( hBemf_alfa_est ) * ( int32_t )Local_Components.hSin;
 800583e:	b21b      	sxth	r3, r3
 8005840:	4358      	muls	r0, r3

#ifdef FULL_MISRA_C_COMPLIANCY
  hAux1 = ( int16_t )( wBeta_Cos_tmp / 32768 );
#else
  hAux1 = ( int16_t )( wBeta_Cos_tmp >> 15 );
 8005842:	13c9      	asrs	r1, r1, #15
#endif

#ifdef FULL_MISRA_C_COMPLIANCY
  hAux2 = ( int16_t )( wAlfa_Sin_tmp / 32768 );
#else
  hAux2 = ( int16_t )( wAlfa_Sin_tmp >> 15 );
 8005844:	13c0      	asrs	r0, r0, #15
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller( & pHandle->PIRegulator, ( int32_t )( hAux1 ) - hAux2 );
 8005846:	b200      	sxth	r0, r0
 8005848:	b209      	sxth	r1, r1
 800584a:	1a09      	subs	r1, r1, r0
 800584c:	0020      	movs	r0, r4
 800584e:	3034      	adds	r0, #52	; 0x34
 8005850:	f7fe fe26 	bl	80044a0 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8005854:	23f4      	movs	r3, #244	; 0xf4
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8005856:	2287      	movs	r2, #135	; 0x87
  pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8005858:	8220      	strh	r0, [r4, #16]
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800585a:	5ce3      	ldrb	r3, [r4, r3]
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 800585c:	0052      	lsls	r2, r2, #1
  bBuffer_index++;
 800585e:	3301      	adds	r3, #1
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8005860:	5ca2      	ldrb	r2, [r4, r2]
  bBuffer_index++;
 8005862:	b2db      	uxtb	r3, r3
  if ( bBuffer_index == pHandle->SpeedBufferSizeUnit )
 8005864:	429a      	cmp	r2, r3
 8005866:	d036      	beq.n	80058d6 <STO_PLL_CalcElAngle+0x212>
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8005868:	001a      	movs	r2, r3
 800586a:	2174      	movs	r1, #116	; 0x74
 800586c:	0052      	lsls	r2, r2, #1
 800586e:	18a2      	adds	r2, r4, r2
 8005870:	4689      	mov	r9, r1
 8005872:	5e55      	ldrsh	r5, [r2, r1]
 8005874:	46a8      	mov	r8, r5
 8005876:	2586      	movs	r5, #134	; 0x86
 8005878:	4641      	mov	r1, r8
 800587a:	006d      	lsls	r5, r5, #1
 800587c:	5361      	strh	r1, [r4, r5]
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800587e:	4649      	mov	r1, r9
 8005880:	5250      	strh	r0, [r2, r1]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8005882:	22f4      	movs	r2, #244	; 0xf4
 8005884:	54a3      	strb	r3, [r4, r2]
  pHandle->_Super.hElAngle += hRotor_Speed;
 8005886:	88a3      	ldrh	r3, [r4, #4]
  pHandle->Ibeta_est = wIbeta_est_Next;
 8005888:	6667      	str	r7, [r4, #100]	; 0x64
  pHandle->_Super.hElAngle += hRotor_Speed;
 800588a:	18c0      	adds	r0, r0, r3
  pHandle->Ialfa_est = wIalfa_est_Next;
 800588c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  pHandle->_Super.hElAngle += hRotor_Speed;
 800588e:	b200      	sxth	r0, r0
  pHandle->Ialfa_est = wIalfa_est_Next;
 8005890:	6623      	str	r3, [r4, #96]	; 0x60
  pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 8005892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  pHandle->_Super.hElAngle += hRotor_Speed;
 8005894:	80a0      	strh	r0, [r4, #4]
  pHandle->wBemf_alfa_est = wBemf_alfa_est_Next;
 8005896:	66a3      	str	r3, [r4, #104]	; 0x68
  pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8005898:	66e6      	str	r6, [r4, #108]	; 0x6c
}
 800589a:	b00f      	add	sp, #60	; 0x3c
 800589c:	bcf0      	pop	{r4, r5, r6, r7}
 800589e:	46bb      	mov	fp, r7
 80058a0:	46b2      	mov	sl, r6
 80058a2:	46a9      	mov	r9, r5
 80058a4:	46a0      	mov	r8, r4
 80058a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->Ibeta_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80058a8:	6663      	str	r3, [r4, #100]	; 0x64
 80058aa:	9302      	str	r3, [sp, #8]
 80058ac:	e746      	b.n	800573c <STO_PLL_CalcElAngle+0x78>
    pHandle->wBemf_beta_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80058ae:	66e3      	str	r3, [r4, #108]	; 0x6c
 80058b0:	9301      	str	r3, [sp, #4]
 80058b2:	e72b      	b.n	800570c <STO_PLL_CalcElAngle+0x48>
  else if ( pHandle->wBemf_alfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF2 ) )
 80058b4:	425a      	negs	r2, r3
 80058b6:	4590      	cmp	r8, r2
 80058b8:	dd00      	ble.n	80058bc <STO_PLL_CalcElAngle+0x1f8>
 80058ba:	e716      	b.n	80056ea <STO_PLL_CalcElAngle+0x26>
    pHandle->wBemf_alfa_est = -INT16_MAX * ( int32_t )( pHandle->hF2 );
 80058bc:	4690      	mov	r8, r2
 80058be:	6682      	str	r2, [r0, #104]	; 0x68
 80058c0:	e713      	b.n	80056ea <STO_PLL_CalcElAngle+0x26>
  else if ( pHandle->Ialfa_est <= -INT16_MAX * ( int32_t )( pHandle->hF1 ) )
 80058c2:	4258      	negs	r0, r3
 80058c4:	4282      	cmp	r2, r0
 80058c6:	dd00      	ble.n	80058ca <STO_PLL_CalcElAngle+0x206>
 80058c8:	e72f      	b.n	800572a <STO_PLL_CalcElAngle+0x66>
    pHandle->Ialfa_est = -INT16_MAX * ( int32_t )( pHandle->hF1 );
 80058ca:	0002      	movs	r2, r0
 80058cc:	6620      	str	r0, [r4, #96]	; 0x60
 80058ce:	e72c      	b.n	800572a <STO_PLL_CalcElAngle+0x66>
  hAux_Alfa = ( int16_t )( hAux_Alfa * wDirection  );
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4698      	mov	r8, r3
 80058d4:	e7a5      	b.n	8005822 <STO_PLL_CalcElAngle+0x15e>
 80058d6:	2200      	movs	r2, #0
    bBuffer_index = 0u;
 80058d8:	2300      	movs	r3, #0
 80058da:	e7c6      	b.n	800586a <STO_PLL_CalcElAngle+0x1a6>
 80058dc:	ffff0002 	.word	0xffff0002
 80058e0:	0000ffff 	.word	0x0000ffff

080058e4 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 80058e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058e6:	46c6      	mov	lr, r8
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80058e8:	2387      	movs	r3, #135	; 0x87
{
 80058ea:	b500      	push	{lr}
  uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	5cc6      	ldrb	r6, [r0, r3]
{
 80058f0:	0005      	movs	r5, r0
 80058f2:	4688      	mov	r8, r1
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 80058f4:	2e00      	cmp	r6, #0
 80058f6:	d100      	bne.n	80058fa <STO_PLL_CalcAvrgMecSpeedUnit+0x16>
 80058f8:	e0a2      	b.n	8005a40 <STO_PLL_CalcAvrgMecSpeedUnit+0x15c>
 80058fa:	0004      	movs	r4, r0
 80058fc:	3474      	adds	r4, #116	; 0x74
 80058fe:	0022      	movs	r2, r4
 8005900:	2300      	movs	r3, #0
  int32_t wAvrSpeed_dpp = ( int32_t )0;
 8005902:	2000      	movs	r0, #0
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 8005904:	2700      	movs	r7, #0
 8005906:	5fd1      	ldrsh	r1, [r2, r7]
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8005908:	3301      	adds	r3, #1
 800590a:	b2db      	uxtb	r3, r3
    wAvrSpeed_dpp += ( int32_t )( pHandle->Speed_Buffer[i] );
 800590c:	1840      	adds	r0, r0, r1
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800590e:	3202      	adds	r2, #2
 8005910:	429e      	cmp	r6, r3
 8005912:	d1f7      	bne.n	8005904 <STO_PLL_CalcAvrgMecSpeedUnit+0x20>
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 8005914:	0031      	movs	r1, r6
 8005916:	f7fa fc81 	bl	800021c <__divsi3>
 800591a:	2200      	movs	r2, #0
 800591c:	0007      	movs	r7, r0
 800591e:	2000      	movs	r0, #0
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 8005920:	2100      	movs	r1, #0
 8005922:	5e63      	ldrsh	r3, [r4, r1]
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8005924:	3201      	adds	r2, #1
    wError = ( int32_t )( pHandle->Speed_Buffer[i] ) - wAvrSpeed_dpp;
 8005926:	1bdb      	subs	r3, r3, r7
    wError = ( wError * wError );
 8005928:	435b      	muls	r3, r3
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800592a:	b2d2      	uxtb	r2, r2
    wAvrQuadraticError += wError;
 800592c:	18c0      	adds	r0, r0, r3
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 800592e:	3402      	adds	r4, #2
 8005930:	4296      	cmp	r6, r2
 8005932:	d1f5      	bne.n	8005920 <STO_PLL_CalcAvrgMecSpeedUnit+0x3c>
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 8005934:	0031      	movs	r1, r6
 8005936:	f7fa fc71 	bl	800021c <__divsi3>
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800593a:	003c      	movs	r4, r7
  wAvrQuadraticError = wAvrQuadraticError / ( int16_t )bSpeedBufferSizeUnit;
 800593c:	0006      	movs	r6, r0
  wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800593e:	437c      	muls	r4, r7
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8005940:	2388      	movs	r3, #136	; 0x88
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8005942:	8b68      	ldrh	r0, [r5, #26]
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	5aeb      	ldrh	r3, [r5, r3]
  wAux = wAvrSpeed_dpp * ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 8005948:	4378      	muls	r0, r7
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 800594a:	435c      	muls	r4, r3
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 800594c:	78ab      	ldrb	r3, [r5, #2]
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 800594e:	69e9      	ldr	r1, [r5, #28]
  wAux = wAux * ( int32_t ) ( pHandle->_Super.SpeedUnit );
 8005950:	4358      	muls	r0, r3
  wAux = wAux / ( int32_t )( pHandle->_Super.DPPConvFactor);
 8005952:	f7fa fc63 	bl	800021c <__divsi3>
  wAux = wAux / ( int16_t )( pHandle->_Super.bElToMecRatio );
 8005956:	7869      	ldrb	r1, [r5, #1]
 8005958:	f7fa fc60 	bl	800021c <__divsi3>
  *pMecSpeedUnit = ( int16_t )wAux;
 800595c:	4642      	mov	r2, r8
 800595e:	b203      	sxth	r3, r0
 8005960:	8013      	strh	r3, [r2, #0]
  wAvrSquareSpeed = ( wAvrSquareSpeed * ( int32_t )( pHandle->VariancePercentage )) / ( int16_t )128;
 8005962:	11e4      	asrs	r4, r4, #7
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wAux;
 8005964:	81ab      	strh	r3, [r5, #12]
  if ( wAvrQuadraticError < wAvrSquareSpeed )
 8005966:	2301      	movs	r3, #1
 8005968:	42b4      	cmp	r4, r6
 800596a:	dc00      	bgt.n	800596e <STO_PLL_CalcAvrgMecSpeedUnit+0x8a>
 800596c:	2300      	movs	r3, #0
  pHandle->IsSpeedReliable = bIs_Speed_Reliable;
 800596e:	22f5      	movs	r2, #245	; 0xf5
 8005970:	54ab      	strb	r3, [r5, r2]
  if ( pHandle->EnableDualCheck == true ) /*do algorithm if it's enabled*/
 8005972:	2382      	movs	r3, #130	; 0x82
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	5ceb      	ldrb	r3, [r5, r3]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d115      	bne.n	80059a8 <STO_PLL_CalcAvrgMecSpeedUnit+0xc4>
  if ( pHandle->IsAlgorithmConverged == false )
 800597c:	33f8      	adds	r3, #248	; 0xf8
 800597e:	5ceb      	ldrb	r3, [r5, r3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d02d      	beq.n	80059e0 <STO_PLL_CalcAvrgMecSpeedUnit+0xfc>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 8005984:	42b4      	cmp	r4, r6
 8005986:	dc28      	bgt.n	80059da <STO_PLL_CalcAvrgMecSpeedUnit+0xf6>
      pHandle->ReliabilityCounter++;
 8005988:	22f7      	movs	r2, #247	; 0xf7
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 800598a:	2118      	movs	r1, #24
      pHandle->ReliabilityCounter++;
 800598c:	5cab      	ldrb	r3, [r5, r2]
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 800598e:	31ff      	adds	r1, #255	; 0xff
      pHandle->ReliabilityCounter++;
 8005990:	3301      	adds	r3, #1
 8005992:	b2db      	uxtb	r3, r3
 8005994:	54ab      	strb	r3, [r5, r2]
      if ( pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys )
 8005996:	5c69      	ldrb	r1, [r5, r1]
 8005998:	4299      	cmp	r1, r3
 800599a:	d821      	bhi.n	80059e0 <STO_PLL_CalcAvrgMecSpeedUnit+0xfc>
        pHandle->ReliabilityCounter = 0u;
 800599c:	2300      	movs	r3, #0
 800599e:	54ab      	strb	r3, [r5, r2]
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80059a0:	78eb      	ldrb	r3, [r5, #3]
        bAux = false;
 80059a2:	2000      	movs	r0, #0
        pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80059a4:	702b      	strb	r3, [r5, #0]
        bAux = false;
 80059a6:	e01f      	b.n	80059e8 <STO_PLL_CalcAvrgMecSpeedUnit+0x104>
    wAux = ( wAux < 0 ? ( -wAux ) : ( wAux ) ); /* wAux abs value   */
 80059a8:	17c3      	asrs	r3, r0, #31
 80059aa:	18c0      	adds	r0, r0, r3
 80059ac:	4058      	eors	r0, r3
    if ( wAux < ( int32_t )( pHandle->MaxAppPositiveMecSpeedUnit ) )
 80059ae:	238d      	movs	r3, #141	; 0x8d
 80059b0:	005b      	lsls	r3, r3, #1
 80059b2:	5aeb      	ldrh	r3, [r5, r3]
 80059b4:	4283      	cmp	r3, r0
 80059b6:	dc1a      	bgt.n	80059ee <STO_PLL_CalcAvrgMecSpeedUnit+0x10a>
  bool bIs_Bemf_Consistent = false;
 80059b8:	2300      	movs	r3, #0
  int32_t wObsBemfSq = 0, wEstBemfSq = 0;
 80059ba:	2000      	movs	r0, #0
 80059bc:	2700      	movs	r7, #0
    pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80059be:	22f9      	movs	r2, #249	; 0xf9
 80059c0:	54ab      	strb	r3, [r5, r2]
    pHandle->Obs_Bemf_Level = wObsBemfSq;
 80059c2:	3203      	adds	r2, #3
 80059c4:	50af      	str	r7, [r5, r2]
    pHandle->Est_Bemf_Level = wEstBemfSq;
 80059c6:	3204      	adds	r2, #4
 80059c8:	50a8      	str	r0, [r5, r2]
  if ( pHandle->IsAlgorithmConverged == false )
 80059ca:	3a08      	subs	r2, #8
 80059cc:	5caa      	ldrb	r2, [r5, r2]
 80059ce:	2a00      	cmp	r2, #0
 80059d0:	d006      	beq.n	80059e0 <STO_PLL_CalcAvrgMecSpeedUnit+0xfc>
    if ( ( pHandle->IsSpeedReliable == false ) || ( bIs_Bemf_Consistent == false ) )
 80059d2:	42b4      	cmp	r4, r6
 80059d4:	ddd8      	ble.n	8005988 <STO_PLL_CalcAvrgMecSpeedUnit+0xa4>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0d6      	beq.n	8005988 <STO_PLL_CalcAvrgMecSpeedUnit+0xa4>
      pHandle->ReliabilityCounter = 0u;
 80059da:	23f7      	movs	r3, #247	; 0xf7
 80059dc:	2200      	movs	r2, #0
 80059de:	54ea      	strb	r2, [r5, r3]
      bAux = SPD_IsMecSpeedReliable ( &pHandle->_Super, pMecSpeedUnit );
 80059e0:	4641      	mov	r1, r8
 80059e2:	0028      	movs	r0, r5
 80059e4:	f7ff fcbe 	bl	8005364 <SPD_IsMecSpeedReliable>
}
 80059e8:	bc80      	pop	{r7}
 80059ea:	46b8      	mov	r8, r7
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wObsBemf = ( int32_t )( pHandle->hBemf_alfa_est );
 80059ee:	2370      	movs	r3, #112	; 0x70
 80059f0:	5eeb      	ldrsh	r3, [r5, r3]
      wObsBemf = ( int32_t )( pHandle->hBemf_beta_est );
 80059f2:	2272      	movs	r2, #114	; 0x72
 80059f4:	5eaf      	ldrsh	r7, [r5, r2]
      wObsBemfSq = wObsBemf * wObsBemf;
 80059f6:	435b      	muls	r3, r3
      wObsBemfSq += wObsBemf * wObsBemf;
 80059f8:	437f      	muls	r7, r7
 80059fa:	18ff      	adds	r7, r7, r3
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 80059fc:	03c3      	lsls	r3, r0, #15
 80059fe:	1a18      	subs	r0, r3, r0
 8005a00:	2314      	movs	r3, #20
 8005a02:	5ee9      	ldrsh	r1, [r5, r3]
 8005a04:	f7fa fc0a 	bl	800021c <__divsi3>
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 8005a08:	231a      	movs	r3, #26
      wEstBemf = ( wAux * 32767 ) / ( int16_t )( pHandle->_Super.hMaxReliableMecSpeedUnit );
 8005a0a:	0002      	movs	r2, r0
      wEstBemfSq = ( wEstBemf * ( int32_t )( pHandle->BemfConsistencyGain ) ) / 64;
 8005a0c:	33ff      	adds	r3, #255	; 0xff
 8005a0e:	5ce9      	ldrb	r1, [r5, r3]
 8005a10:	3bda      	subs	r3, #218	; 0xda
 8005a12:	4341      	muls	r1, r0
 8005a14:	17c8      	asrs	r0, r1, #31
 8005a16:	4018      	ands	r0, r3
 8005a18:	1840      	adds	r0, r0, r1
 8005a1a:	1180      	asrs	r0, r0, #6
      wEstBemfSq *= wEstBemf;
 8005a1c:	4350      	muls	r0, r2
                     ( wEstBemfSq / 64 ) * ( int32_t )( pHandle->BemfConsistencyCheck );
 8005a1e:	17c2      	asrs	r2, r0, #31
 8005a20:	4013      	ands	r3, r2
 8005a22:	228c      	movs	r2, #140	; 0x8c
 8005a24:	0052      	lsls	r2, r2, #1
 8005a26:	5caa      	ldrb	r2, [r5, r2]
 8005a28:	181b      	adds	r3, r3, r0
 8005a2a:	119b      	asrs	r3, r3, #6
 8005a2c:	435a      	muls	r2, r3
      if ( wObsBemfSq > wEstBemfSqLo )
 8005a2e:	2301      	movs	r3, #1
      wEstBemfSqLo = wEstBemfSq -
 8005a30:	1a82      	subs	r2, r0, r2
      if ( wObsBemfSq > wEstBemfSqLo )
 8005a32:	4297      	cmp	r7, r2
 8005a34:	dd01      	ble.n	8005a3a <STO_PLL_CalcAvrgMecSpeedUnit+0x156>
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	e7c1      	b.n	80059be <STO_PLL_CalcAvrgMecSpeedUnit+0xda>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e7be      	b.n	80059be <STO_PLL_CalcAvrgMecSpeedUnit+0xda>
  for ( i = 0u; i < bSpeedBufferSizeUnit; i++ )
 8005a40:	2600      	movs	r6, #0
 8005a42:	2400      	movs	r4, #0
  wAvrSpeed_dpp = wAvrSpeed_dpp / ( int16_t )bSpeedBufferSizeUnit;
 8005a44:	2700      	movs	r7, #0
 8005a46:	e77b      	b.n	8005940 <STO_PLL_CalcAvrgMecSpeedUnit+0x5c>

08005a48 <STO_PLL_CalcAvrgElSpeedDpp>:
  int16_t hIndexNew = ( int16_t )pHandle->Speed_Buffer_Index;
 8005a48:	23f4      	movs	r3, #244	; 0xf4
 8005a4a:	5cc2      	ldrb	r2, [r0, r3]
  int32_t wSum = pHandle->DppBufferSum;
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	58c1      	ldr	r1, [r0, r3]
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 8005a50:	3306      	adds	r3, #6
{
 8005a52:	b570      	push	{r4, r5, r6, lr}
  int16_t hSpeedBufferSizeUnit = ( int16_t )( pHandle->SpeedBufferSizeUnit );
 8005a54:	5cc5      	ldrb	r5, [r0, r3]
  int16_t hSpeedBufferSizedpp = ( int16_t )( pHandle->SpeedBufferSizeDpp );
 8005a56:	2310      	movs	r3, #16
 8005a58:	33ff      	adds	r3, #255	; 0xff
  hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8005a5a:	5cc3      	ldrb	r3, [r0, r3]
 8005a5c:	1aeb      	subs	r3, r5, r3
 8005a5e:	b29b      	uxth	r3, r3
  if ( hBufferSizeDiff == 0 )
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d113      	bne.n	8005a8c <STO_PLL_CalcAvrgElSpeedDpp+0x44>
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005a64:	3238      	adds	r2, #56	; 0x38
 8005a66:	0052      	lsls	r2, r2, #1
 8005a68:	1882      	adds	r2, r0, r2
 8005a6a:	2304      	movs	r3, #4
 8005a6c:	5ed3      	ldrsh	r3, [r2, r3]
           pHandle->SpeedBufferOldestEl;
 8005a6e:	2286      	movs	r2, #134	; 0x86
 8005a70:	0052      	lsls	r2, r2, #1
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005a72:	185b      	adds	r3, r3, r1
           pHandle->SpeedBufferOldestEl;
 8005a74:	5e82      	ldrsh	r2, [r0, r2]
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005a76:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8005a78:	2290      	movs	r2, #144	; 0x90
 8005a7a:	0019      	movs	r1, r3
 8005a7c:	0052      	lsls	r2, r2, #1
 8005a7e:	5a82      	ldrh	r2, [r0, r2]
 8005a80:	4111      	asrs	r1, r2
  pHandle->DppBufferSum = wSum;
 8005a82:	2284      	movs	r2, #132	; 0x84
 8005a84:	0052      	lsls	r2, r2, #1
  pHandle->_Super.hElSpeedDpp = ( int16_t )wAvrSpeed_dpp;
 8005a86:	81c1      	strh	r1, [r0, #14]
  pHandle->DppBufferSum = wSum;
 8005a88:	5083      	str	r3, [r0, r2]
}
 8005a8a:	bd70      	pop	{r4, r5, r6, pc}
    hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	b29e      	uxth	r6, r3
 8005a90:	b21b      	sxth	r3, r3
    if ( hIndexOldTemp >= hSpeedBufferSizeUnit )
 8005a92:	429d      	cmp	r5, r3
 8005a94:	dc01      	bgt.n	8005a9a <STO_PLL_CalcAvrgElSpeedDpp+0x52>
      hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 8005a96:	1b76      	subs	r6, r6, r5
 8005a98:	b233      	sxth	r3, r6
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005a9a:	3238      	adds	r2, #56	; 0x38
 8005a9c:	0052      	lsls	r2, r2, #1
 8005a9e:	1882      	adds	r2, r0, r2
           pHandle->Speed_Buffer[hIndexOld];
 8005aa0:	3338      	adds	r3, #56	; 0x38
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005aa2:	2404      	movs	r4, #4
 8005aa4:	5f12      	ldrsh	r2, [r2, r4]
           pHandle->Speed_Buffer[hIndexOld];
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	18c3      	adds	r3, r0, r3
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005aaa:	1852      	adds	r2, r2, r1
           pHandle->Speed_Buffer[hIndexOld];
 8005aac:	2104      	movs	r1, #4
 8005aae:	5e5b      	ldrsh	r3, [r3, r1]
    wSum = wSum + pHandle->Speed_Buffer[hIndexNew] -
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	e7e1      	b.n	8005a78 <STO_PLL_CalcAvrgElSpeedDpp+0x30>

08005ab4 <STO_PLL_Clear>:
  pHandle->Ialfa_est = ( int32_t )0;
 8005ab4:	2300      	movs	r3, #0
  pHandle->ConsistencyCounter = 0u;
 8005ab6:	22f6      	movs	r2, #246	; 0xf6
{
 8005ab8:	b510      	push	{r4, lr}
  pHandle->Ialfa_est = ( int32_t )0;
 8005aba:	6603      	str	r3, [r0, #96]	; 0x60
  pHandle->Ibeta_est = ( int32_t )0;
 8005abc:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->wBemf_alfa_est = ( int32_t )0;
 8005abe:	6683      	str	r3, [r0, #104]	; 0x68
  pHandle->wBemf_beta_est = ( int32_t )0;
 8005ac0:	66c3      	str	r3, [r0, #108]	; 0x6c
  pHandle->_Super.hElAngle = ( int16_t )0;
 8005ac2:	8083      	strh	r3, [r0, #4]
  pHandle->_Super.hElSpeedDpp = ( int16_t )0;
 8005ac4:	81c3      	strh	r3, [r0, #14]
  pHandle->ConsistencyCounter = 0u;
 8005ac6:	5283      	strh	r3, [r0, r2]
  pHandle->IsAlgorithmConverged = false;
 8005ac8:	3202      	adds	r2, #2
 8005aca:	5283      	strh	r3, [r0, r2]
  pHandle->Obs_Bemf_Level = ( int32_t )0;
 8005acc:	3204      	adds	r2, #4
 8005ace:	5083      	str	r3, [r0, r2]
  pHandle->Est_Bemf_Level = ( int32_t )0;
 8005ad0:	3204      	adds	r2, #4
 8005ad2:	5083      	str	r3, [r0, r2]
  pHandle->DppBufferSum = ( int32_t )0;
 8005ad4:	3208      	adds	r2, #8
 8005ad6:	5083      	str	r3, [r0, r2]
  pHandle->ForceConvergency = false;
 8005ad8:	321a      	adds	r2, #26
 8005ada:	5283      	strh	r3, [r0, r2]
  * @retval none
  */
static void STO_InitSpeedBuffer( STO_PLL_Handle_t * pHandle )
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 8005adc:	330f      	adds	r3, #15
 8005ade:	33ff      	adds	r3, #255	; 0xff
 8005ae0:	5cc2      	ldrb	r2, [r0, r3]
{
 8005ae2:	0004      	movs	r4, r0

  /*init speed buffer*/
  for ( b_i = 0u; b_i < bSpeedBufferSize; b_i++ )
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	d004      	beq.n	8005af2 <STO_PLL_Clear+0x3e>
  {
    pHandle->Speed_Buffer[b_i] = ( int16_t )0;
 8005ae8:	2100      	movs	r1, #0
 8005aea:	0052      	lsls	r2, r2, #1
 8005aec:	3074      	adds	r0, #116	; 0x74
 8005aee:	f000 fb65 	bl	80061bc <memset>
  }
  pHandle->Speed_Buffer_Index = 0u;
 8005af2:	2300      	movs	r3, #0
 8005af4:	22f4      	movs	r2, #244	; 0xf4
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 8005af6:	0020      	movs	r0, r4
  pHandle->Speed_Buffer_Index = 0u;
 8005af8:	54a3      	strb	r3, [r4, r2]
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 8005afa:	3218      	adds	r2, #24
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 8005afc:	2100      	movs	r1, #0
  pHandle->SpeedBufferOldestEl = ( int16_t )0;
 8005afe:	52a3      	strh	r3, [r4, r2]
  PID_SetIntegralTerm( & pHandle->PIRegulator, ( int32_t )0 );
 8005b00:	3034      	adds	r0, #52	; 0x34
 8005b02:	f7fe fcc1 	bl	8004488 <PID_SetIntegralTerm>
}
 8005b06:	bd10      	pop	{r4, pc}

08005b08 <STO_PLL_Init>:
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8005b08:	238b      	movs	r3, #139	; 0x8b
{
 8005b0a:	b570      	push	{r4, r5, r6, lr}
  pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	5cc2      	ldrb	r2, [r0, r3]
 8005b10:	3b20      	subs	r3, #32
 8005b12:	54c2      	strb	r2, [r0, r3]
  pHandle->EnableDualCheck = true;
 8005b14:	2201      	movs	r2, #1
 8005b16:	330e      	adds	r3, #14
 8005b18:	54c2      	strb	r2, [r0, r3]
  pHandle->F3POW2 = 0u;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	8643      	strh	r3, [r0, #50]	; 0x32
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 8005b1e:	232e      	movs	r3, #46	; 0x2e
 8005b20:	5ec5      	ldrsh	r5, [r0, r3]
{
 8005b22:	0004      	movs	r4, r0
  htempk = ( int16_t )( C6_COMP_CONST1 / ( pHandle->hF2 ) );
 8005b24:	0029      	movs	r1, r5
 8005b26:	4813      	ldr	r0, [pc, #76]	; (8005b74 <STO_PLL_Init+0x6c>)
 8005b28:	f7fa fb78 	bl	800021c <__divsi3>
 8005b2c:	b203      	sxth	r3, r0
  while ( htempk != 0 )
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01d      	beq.n	8005b6e <STO_PLL_Init+0x66>
 8005b32:	2201      	movs	r2, #1
  wAux = ( int32_t )1;
 8005b34:	2101      	movs	r1, #1
    htempk /= ( int16_t )2;
 8005b36:	0fd8      	lsrs	r0, r3, #31
 8005b38:	18c3      	adds	r3, r0, r3
 8005b3a:	0010      	movs	r0, r2
  while ( htempk != 0 )
 8005b3c:	3201      	adds	r2, #1
    htempk /= ( int16_t )2;
 8005b3e:	105b      	asrs	r3, r3, #1
    wAux *= ( int32_t )2;
 8005b40:	0049      	lsls	r1, r1, #1
  while ( htempk != 0 )
 8005b42:	b292      	uxth	r2, r2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1f6      	bne.n	8005b36 <STO_PLL_Init+0x2e>
  pHandle->hF3 = ( int16_t )wAux;
 8005b48:	b209      	sxth	r1, r1
  wAux = ( int32_t )( pHandle->hF2 ) * pHandle->hF3;
 8005b4a:	434d      	muls	r5, r1
 8005b4c:	8660      	strh	r0, [r4, #50]	; 0x32
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8005b4e:	0028      	movs	r0, r5
  pHandle->hF3 = ( int16_t )wAux;
 8005b50:	8621      	strh	r1, [r4, #48]	; 0x30
  pHandle->hC6 = ( int16_t )( wAux / C6_COMP_CONST2 );
 8005b52:	4909      	ldr	r1, [pc, #36]	; (8005b78 <STO_PLL_Init+0x70>)
 8005b54:	f7fa fb62 	bl	800021c <__divsi3>
 8005b58:	8560      	strh	r0, [r4, #42]	; 0x2a
  STO_PLL_Clear( pHandle );
 8005b5a:	0020      	movs	r0, r4
 8005b5c:	f7ff ffaa 	bl	8005ab4 <STO_PLL_Clear>
  PID_HandleInit( & pHandle->PIRegulator );
 8005b60:	0020      	movs	r0, r4
 8005b62:	3034      	adds	r0, #52	; 0x34
 8005b64:	f7fe fc7c 	bl	8004460 <PID_HandleInit>
  pHandle->_Super.hMecAccelUnitP = 0;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	8263      	strh	r3, [r4, #18]
}
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
  while ( htempk != 0 )
 8005b6e:	2101      	movs	r1, #1
 8005b70:	e7ed      	b.n	8005b4e <STO_PLL_Init+0x46>
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	000fea5e 	.word	0x000fea5e
 8005b78:	000028be 	.word	0x000028be

08005b7c <STO_PLL_IsObserverConverged>:
  int16_t hEstimatedSpeedUnit, hUpperThreshold, hLowerThreshold;
  int32_t wAux;
  bool bAux = false;
  int32_t wtemp;
  
  if ( pHandle->ForceConvergency2 == true )
 8005b7c:	2224      	movs	r2, #36	; 0x24
{
 8005b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( pHandle->ForceConvergency2 == true )
 8005b80:	32ff      	adds	r2, #255	; 0xff
 8005b82:	5c82      	ldrb	r2, [r0, r2]
{
 8005b84:	0003      	movs	r3, r0
  if ( pHandle->ForceConvergency2 == true )
 8005b86:	2a00      	cmp	r2, #0
 8005b88:	d001      	beq.n	8005b8e <STO_PLL_IsObserverConverged+0x12>
  {
    hForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8005b8a:	220c      	movs	r2, #12
 8005b8c:	5e81      	ldrsh	r1, [r0, r2]
  }

  if ( pHandle->ForceConvergency == true )
 8005b8e:	2291      	movs	r2, #145	; 0x91
 8005b90:	0052      	lsls	r2, r2, #1
 8005b92:	5c98      	ldrb	r0, [r3, r2]
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d006      	beq.n	8005ba6 <STO_PLL_IsObserverConverged+0x2a>
  {
    bAux = true;
    pHandle->IsAlgorithmConverged = true;
 8005b98:	22f8      	movs	r2, #248	; 0xf8
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	5499      	strb	r1, [r3, r2]
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8005b9e:	2200      	movs	r2, #0
    bAux = true;
 8005ba0:	2001      	movs	r0, #1
    pHandle->_Super.bSpeedErrorNumber = 0u;
 8005ba2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ( bAux );
}
 8005ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8005ba6:	240c      	movs	r4, #12
 8005ba8:	5f1a      	ldrsh	r2, [r3, r4]
    wtemp = ( int32_t )hEstimatedSpeedUnit * ( int32_t )hForcedMecSpeedUnit;
 8005baa:	000c      	movs	r4, r1
 8005bac:	4354      	muls	r4, r2
 8005bae:	000d      	movs	r5, r1
    if ( wtemp > 0 )
 8005bb0:	2c00      	cmp	r4, #0
 8005bb2:	ddf7      	ble.n	8005ba4 <STO_PLL_IsObserverConverged+0x28>
      if ( hEstimatedSpeedUnit < 0 )
 8005bb4:	2a00      	cmp	r2, #0
 8005bb6:	db33      	blt.n	8005c20 <STO_PLL_IsObserverConverged+0xa4>
      if ( hForcedMecSpeedUnit < 0 )
 8005bb8:	2900      	cmp	r1, #0
 8005bba:	db2e      	blt.n	8005c1a <STO_PLL_IsObserverConverged+0x9e>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8005bbc:	2189      	movs	r1, #137	; 0x89
 8005bbe:	0049      	lsls	r1, r1, #1
 8005bc0:	5c5c      	ldrb	r4, [r3, r1]
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8005bc2:	2114      	movs	r1, #20
 8005bc4:	31ff      	adds	r1, #255	; 0xff
 8005bc6:	5c5e      	ldrb	r6, [r3, r1]
      if ( pHandle->IsSpeedReliable == true )
 8005bc8:	391e      	subs	r1, #30
 8005bca:	5c59      	ldrb	r1, [r3, r1]
 8005bcc:	2900      	cmp	r1, #0
 8005bce:	d020      	beq.n	8005c12 <STO_PLL_IsObserverConverged+0x96>
        if ( ( uint16_t )hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed )
 8005bd0:	218a      	movs	r1, #138	; 0x8a
 8005bd2:	0049      	lsls	r1, r1, #1
 8005bd4:	5a5f      	ldrh	r7, [r3, r1]
 8005bd6:	b291      	uxth	r1, r2
 8005bd8:	428f      	cmp	r7, r1
 8005bda:	d21a      	bcs.n	8005c12 <STO_PLL_IsObserverConverged+0x96>
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8005bdc:	270f      	movs	r7, #15
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_L;
 8005bde:	436e      	muls	r6, r5
      hLowerThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8005be0:	17f1      	asrs	r1, r6, #31
 8005be2:	4039      	ands	r1, r7
 8005be4:	1989      	adds	r1, r1, r6
 8005be6:	1109      	asrs	r1, r1, #4
          if ( hEstimatedSpeedUnit >= hLowerThreshold )
 8005be8:	b209      	sxth	r1, r1
 8005bea:	428a      	cmp	r2, r1
 8005bec:	db11      	blt.n	8005c12 <STO_PLL_IsObserverConverged+0x96>
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8005bee:	4365      	muls	r5, r4
      hUpperThreshold = ( int16_t )( wAux / ( int32_t )16 );
 8005bf0:	17e9      	asrs	r1, r5, #31
 8005bf2:	400f      	ands	r7, r1
 8005bf4:	197f      	adds	r7, r7, r5
 8005bf6:	1139      	asrs	r1, r7, #4
            if ( hEstimatedSpeedUnit <= hUpperThreshold )
 8005bf8:	b209      	sxth	r1, r1
 8005bfa:	428a      	cmp	r2, r1
 8005bfc:	dc09      	bgt.n	8005c12 <STO_PLL_IsObserverConverged+0x96>
              pHandle->ConsistencyCounter++;
 8005bfe:	21f6      	movs	r1, #246	; 0xf6
 8005c00:	5c5a      	ldrb	r2, [r3, r1]
 8005c02:	3201      	adds	r2, #1
 8005c04:	b2d2      	uxtb	r2, r2
 8005c06:	545a      	strb	r2, [r3, r1]
                   pHandle->StartUpConsistThreshold )
 8005c08:	3120      	adds	r1, #32
              if ( pHandle->ConsistencyCounter >=
 8005c0a:	5c59      	ldrb	r1, [r3, r1]
 8005c0c:	4291      	cmp	r1, r2
 8005c0e:	d9c3      	bls.n	8005b98 <STO_PLL_IsObserverConverged+0x1c>
 8005c10:	e7c8      	b.n	8005ba4 <STO_PLL_IsObserverConverged+0x28>
              pHandle->ConsistencyCounter = 0u;
 8005c12:	22f6      	movs	r2, #246	; 0xf6
 8005c14:	2100      	movs	r1, #0
 8005c16:	5499      	strb	r1, [r3, r2]
 8005c18:	e7c4      	b.n	8005ba4 <STO_PLL_IsObserverConverged+0x28>
        hForcedMecSpeedUnit = -hForcedMecSpeedUnit;
 8005c1a:	4249      	negs	r1, r1
      wAux = ( int32_t ) ( hForcedMecSpeedUnit ) * ( int16_t )pHandle->SpeedValidationBand_H;
 8005c1c:	b20d      	sxth	r5, r1
 8005c1e:	e7cd      	b.n	8005bbc <STO_PLL_IsObserverConverged+0x40>
        hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8005c20:	4252      	negs	r2, r2
 8005c22:	b212      	sxth	r2, r2
      if ( hForcedMecSpeedUnit < 0 )
 8005c24:	2900      	cmp	r1, #0
 8005c26:	dac9      	bge.n	8005bbc <STO_PLL_IsObserverConverged+0x40>
 8005c28:	e7f7      	b.n	8005c1a <STO_PLL_IsObserverConverged+0x9e>
 8005c2a:	46c0      	nop			; (mov r8, r8)

08005c2c <STO_PLL_GetEstimatedBemf>:
__weak alphabeta_t STO_PLL_GetEstimatedBemf( STO_PLL_Handle_t * pHandle )
{
  alphabeta_t Vaux;
  Vaux.alpha = pHandle->hBemf_alfa_est;
  Vaux.beta = pHandle->hBemf_beta_est;
  return ( Vaux );
 8005c2c:	6f00      	ldr	r0, [r0, #112]	; 0x70
{
 8005c2e:	b082      	sub	sp, #8
  return ( Vaux );
 8005c30:	0c02      	lsrs	r2, r0, #16
 8005c32:	0400      	lsls	r0, r0, #16
 8005c34:	0412      	lsls	r2, r2, #16
 8005c36:	0c00      	lsrs	r0, r0, #16
 8005c38:	4310      	orrs	r0, r2
}
 8005c3a:	b002      	add	sp, #8
 8005c3c:	4770      	bx	lr
 8005c3e:	46c0      	nop			; (mov r8, r8)

08005c40 <STO_PLL_GetEstimatedCurrent>:
  alphabeta_t Iaux;

#ifdef FULL_MISRA_C_COMPLIANCY
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est / ( pHandle->hF1 ) );
#else
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8005c40:	238e      	movs	r3, #142	; 0x8e
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	5ac2      	ldrh	r2, [r0, r3]
#endif

#ifdef FULL_MISRA_C_COMPLIANCY
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est / ( pHandle->hF1 ) );
#else
  Iaux.beta = ( int16_t )( pHandle->Ibeta_est >> pHandle->F1LOG );
 8005c46:	6e43      	ldr	r3, [r0, #100]	; 0x64
  Iaux.alpha = ( int16_t )( pHandle->Ialfa_est >> pHandle->F1LOG );
 8005c48:	6e00      	ldr	r0, [r0, #96]	; 0x60
#endif

  return ( Iaux );
 8005c4a:	4113      	asrs	r3, r2
 8005c4c:	4110      	asrs	r0, r2
 8005c4e:	0400      	lsls	r0, r0, #16
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	0c00      	lsrs	r0, r0, #16
{
 8005c54:	b082      	sub	sp, #8
  return ( Iaux );
 8005c56:	4318      	orrs	r0, r3
}
 8005c58:	b002      	add	sp, #8
 8005c5a:	4770      	bx	lr

08005c5c <STO_PLL_GetObserverGains>:
  * @param  phC2 pointer to int16_t used to return parameters hhC2
  * @param  phC4 pointer to int16_t used to return parameters hhC4
  * @retval none
  */
__weak void STO_PLL_GetObserverGains( STO_PLL_Handle_t * pHandle, int16_t * phC2, int16_t * phC4 )
{
 8005c5c:	b510      	push	{r4, lr}
  *phC2 = pHandle->hC2;
 8005c5e:	2422      	movs	r4, #34	; 0x22
 8005c60:	5f03      	ldrsh	r3, [r0, r4]
 8005c62:	800b      	strh	r3, [r1, #0]
  *phC4 = pHandle->hC4;
 8005c64:	2126      	movs	r1, #38	; 0x26
 8005c66:	5e43      	ldrsh	r3, [r0, r1]
 8005c68:	8013      	strh	r3, [r2, #0]
}
 8005c6a:	bd10      	pop	{r4, pc}

08005c6c <STO_PLL_SetObserverGains>:
  * @retval none
  */
__weak void STO_PLL_SetObserverGains( STO_PLL_Handle_t * pHandle, int16_t hhC1, int16_t hhC2 )
{

  pHandle->hC2 = hhC1;
 8005c6c:	8441      	strh	r1, [r0, #34]	; 0x22
  pHandle->hC4 = hhC2;
 8005c6e:	84c2      	strh	r2, [r0, #38]	; 0x26
}
 8005c70:	4770      	bx	lr
 8005c72:	46c0      	nop			; (mov r8, r8)

08005c74 <STO_GetPLLGains>:
  * @param  pPgain pointer to int16_t used to return PLL proportional gain
  * @param  pIgain pointer to int16_t used to return PLL integral gain
  * @retval none
  */
__weak void STO_GetPLLGains( STO_PLL_Handle_t * pHandle, int16_t * pPgain, int16_t * pIgain )
{
 8005c74:	b570      	push	{r4, r5, r6, lr}

  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8005c76:	3034      	adds	r0, #52	; 0x34
{
 8005c78:	000e      	movs	r6, r1
 8005c7a:	0015      	movs	r5, r2
  *pPgain = PID_GetKP( & pHandle->PIRegulator );
 8005c7c:	0004      	movs	r4, r0
 8005c7e:	f7fe fbfb 	bl	8004478 <PID_GetKP>
 8005c82:	8030      	strh	r0, [r6, #0]
  *pIgain = PID_GetKI( & pHandle->PIRegulator );
 8005c84:	0020      	movs	r0, r4
 8005c86:	f7fe fbfb 	bl	8004480 <PID_GetKI>
 8005c8a:	8028      	strh	r0, [r5, #0]
}
 8005c8c:	bd70      	pop	{r4, r5, r6, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)

08005c90 <STO_SetPLLGains>:
  * @param  hIgain new value for PLL integral gain
  * @retval none
  */
__weak void STO_SetPLLGains( STO_PLL_Handle_t * pHandle, int16_t hPgain, int16_t hIgain )
{
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8005c90:	3034      	adds	r0, #52	; 0x34
{
 8005c92:	b570      	push	{r4, r5, r6, lr}
 8005c94:	0015      	movs	r5, r2
  PID_SetKP( & pHandle->PIRegulator, hPgain );
 8005c96:	0004      	movs	r4, r0
 8005c98:	f7fe fbea 	bl	8004470 <PID_SetKP>
  PID_SetKI( & pHandle->PIRegulator, hIgain );
 8005c9c:	0029      	movs	r1, r5
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f7fe fbe8 	bl	8004474 <PID_SetKI>
}
 8005ca4:	bd70      	pop	{r4, r5, r6, pc}
 8005ca6:	46c0      	nop			; (mov r8, r8)

08005ca8 <STO_OTF_ResetPLL>:
  * @brief  It resets integral term of PLL during on-the-fly startup
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_OTF_ResetPLL( STO_Handle_t * pHandle )
{
 8005ca8:	b510      	push	{r4, lr}
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  PID_SetIntegralTerm( &pHdl->PIRegulator, ( int32_t )0 );
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	2100      	movs	r1, #0
 8005cae:	3034      	adds	r0, #52	; 0x34
 8005cb0:	f7fe fbea 	bl	8004488 <PID_SetIntegralTerm>
}
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)

08005cb8 <STO_ResetPLL>:
  * @brief  It resets integral term of PLL
  * @param  pHandle: handler of the current instance of the STO component
  * @retval none
  */
__weak void STO_ResetPLL( STO_PLL_Handle_t * pHandle )
{
 8005cb8:	b510      	push	{r4, lr}
  PID_SetIntegralTerm( &pHandle->PIRegulator, ( int32_t )0 );
 8005cba:	2100      	movs	r1, #0
 8005cbc:	3034      	adds	r0, #52	; 0x34
 8005cbe:	f7fe fbe3 	bl	8004488 <PID_SetIntegralTerm>
}
 8005cc2:	bd10      	pop	{r4, pc}

08005cc4 <STO_PLL_GetEstimatedBemfLevel>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetEstimatedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Est_Bemf_Level );
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	58c0      	ldr	r0, [r0, r3]
}
 8005cca:	4770      	bx	lr

08005ccc <STO_PLL_GetObservedBemfLevel>:
  * @param  pHandle: handler of the current instance of the STO component
  * @retval int32_t
  */
__weak int32_t STO_PLL_GetObservedBemfLevel( STO_PLL_Handle_t * pHandle )
{
  return ( pHandle->Obs_Bemf_Level );
 8005ccc:	23fc      	movs	r3, #252	; 0xfc
 8005cce:	58c0      	ldr	r0, [r0, r3]
}
 8005cd0:	4770      	bx	lr
 8005cd2:	46c0      	nop			; (mov r8, r8)

08005cd4 <STO_PLL_IsVarianceTight>:
  * @retval bool Variance state
  */
__weak bool STO_PLL_IsVarianceTight( const STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  return ( pHdl->IsSpeedReliable );
 8005cd4:	23f5      	movs	r3, #245	; 0xf5
 8005cd6:	6802      	ldr	r2, [r0, #0]
 8005cd8:	5cd0      	ldrb	r0, [r2, r3]
}
 8005cda:	4770      	bx	lr

08005cdc <STO_PLL_ForceConvergency1>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency1( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency = true;
 8005cdc:	2391      	movs	r3, #145	; 0x91
 8005cde:	2101      	movs	r1, #1
 8005ce0:	6802      	ldr	r2, [r0, #0]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	54d1      	strb	r1, [r2, r3]
}
 8005ce6:	4770      	bx	lr

08005ce8 <STO_PLL_ForceConvergency2>:
  * @param  pHandle: handler of the current instance of the STO component
  */
__weak void STO_PLL_ForceConvergency2( STO_Handle_t * pHandle )
{
  STO_PLL_Handle_t * pHdl = ( STO_PLL_Handle_t * )pHandle->_Super;
  pHdl->ForceConvergency2 = true;
 8005ce8:	2324      	movs	r3, #36	; 0x24
 8005cea:	2101      	movs	r1, #1
 8005cec:	6802      	ldr	r2, [r0, #0]
 8005cee:	33ff      	adds	r3, #255	; 0xff
 8005cf0:	54d1      	strb	r1, [r2, r3]
}
 8005cf2:	4770      	bx	lr

08005cf4 <STO_SetDirection>:
  * @brief  forces the rotation direction
  * @param  direction: imposed direction
  */
__weak void STO_SetDirection( STO_PLL_Handle_t * pHandle, uint8_t direction )
{
  pHandle->hForcedDirection = direction;
 8005cf4:	2392      	movs	r3, #146	; 0x92
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	54c1      	strb	r1, [r0, r3]
}
 8005cfa:	4770      	bx	lr

08005cfc <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 8005cfc:	b510      	push	{r4, lr}

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 8005cfe:	f7fe faed 	bl	80042dc <FCP_Init>
}
 8005d02:	bd10      	pop	{r4, pc}

08005d04 <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005d04:	2197      	movs	r1, #151	; 0x97
{
 8005d06:	b510      	push	{r4, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005d08:	5c42      	ldrb	r2, [r0, r1]
{
 8005d0a:	0003      	movs	r3, r0
  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 8005d0c:	2a00      	cmp	r2, #0
 8005d0e:	d018      	beq.n	8005d42 <UFCP_TX_IRQ_Handler+0x3e>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 8005d10:	2298      	movs	r2, #152	; 0x98
 8005d12:	5c82      	ldrb	r2, [r0, r2]
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d00c      	beq.n	8005d32 <UFCP_TX_IRQ_Handler+0x2e>
 8005d18:	2a01      	cmp	r2, #1
 8005d1a:	d028      	beq.n	8005d6e <UFCP_TX_IRQ_Handler+0x6a>
      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
        break;

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005d1c:	7d40      	ldrb	r0, [r0, #21]
 8005d1e:	3001      	adds	r0, #1
 8005d20:	4282      	cmp	r2, r0
 8005d22:	dc0f      	bgt.n	8005d44 <UFCP_TX_IRQ_Handler+0x40>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8005d24:	1899      	adds	r1, r3, r2
 8005d26:	7d08      	ldrb	r0, [r1, #20]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005d28:	2190      	movs	r1, #144	; 0x90
 8005d2a:	0049      	lsls	r1, r1, #1
 8005d2c:	5859      	ldr	r1, [r3, r1]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8005d2e:	8508      	strh	r0, [r1, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8005d30:	e004      	b.n	8005d3c <UFCP_TX_IRQ_Handler+0x38>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8005d32:	7d01      	ldrb	r1, [r0, #20]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005d34:	2090      	movs	r0, #144	; 0x90
 8005d36:	0040      	lsls	r0, r0, #1
 8005d38:	5818      	ldr	r0, [r3, r0]
 8005d3a:	8501      	strh	r1, [r0, #40]	; 0x28
    {
      pBaseHandle->TxFrameLevel++;
 8005d3c:	2198      	movs	r1, #152	; 0x98
 8005d3e:	3201      	adds	r2, #1
 8005d40:	545a      	strb	r2, [r3, r1]

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 8005d42:	bd10      	pop	{r4, pc}
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 8005d44:	2296      	movs	r2, #150	; 0x96
 8005d46:	5c98      	ldrb	r0, [r3, r2]
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8005d48:	328a      	adds	r2, #138	; 0x8a
 8005d4a:	589a      	ldr	r2, [r3, r2]
 8005d4c:	8510      	strh	r0, [r2, #40]	; 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d4e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	2001      	movs	r0, #1
 8005d54:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005d58:	2480      	movs	r4, #128	; 0x80
 8005d5a:	6810      	ldr	r0, [r2, #0]
 8005d5c:	43a0      	bics	r0, r4
 8005d5e:	6010      	str	r0, [r2, #0]
 8005d60:	f38c 8810 	msr	PRIMASK, ip
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8005d64:	2200      	movs	r2, #0
 8005d66:	545a      	strb	r2, [r3, r1]
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8005d68:	cb09      	ldmia	r3, {r0, r3}
 8005d6a:	4798      	blx	r3
 8005d6c:	e7e9      	b.n	8005d42 <UFCP_TX_IRQ_Handler+0x3e>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 8005d6e:	7d41      	ldrb	r1, [r0, #21]
        break;
 8005d70:	e7e0      	b.n	8005d34 <UFCP_TX_IRQ_Handler+0x30>
 8005d72:	46c0      	nop			; (mov r8, r8)

08005d74 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005d74:	228e      	movs	r2, #142	; 0x8e
 8005d76:	0052      	lsls	r2, r2, #1
 8005d78:	5c81      	ldrb	r1, [r0, r2]
{
 8005d7a:	0003      	movs	r3, r0
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005d7c:	2001      	movs	r0, #1
  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8005d7e:	2900      	cmp	r1, #0
 8005d80:	d10d      	bne.n	8005d9e <UFCP_Receive+0x2a>
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 8005d82:	5298      	strh	r0, [r3, r2]
    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 8005d84:	3204      	adds	r2, #4
 8005d86:	589a      	ldr	r2, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8c:	f380 8810 	msr	PRIMASK, r0
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005d90:	6813      	ldr	r3, [r2, #0]
 8005d92:	301f      	adds	r0, #31
 8005d94:	4303      	orrs	r3, r0
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	f381 8810 	msr	PRIMASK, r1
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8005d9c:	381e      	subs	r0, #30
  }

  return ret_val;
}
 8005d9e:	4770      	bx	lr

08005da0 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 8005da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005da2:	0005      	movs	r5, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005da4:	2097      	movs	r0, #151	; 0x97
 8005da6:	5c2c      	ldrb	r4, [r5, r0]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8005da8:	3896      	subs	r0, #150	; 0x96
  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8005daa:	2c00      	cmp	r4, #0
 8005dac:	d000      	beq.n	8005db0 <UFCP_Send+0x10>
  }

  return ret_val;
}
 8005dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005db0:	0028      	movs	r0, r5
    while ( size-- ) *dest++ = *buffer++;
 8005db2:	1e5f      	subs	r7, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 8005db4:	3016      	adds	r0, #22
    pHandle->TxFrame.Code = code;
 8005db6:	7529      	strb	r1, [r5, #20]
    pHandle->TxFrame.Size = size;
 8005db8:	756b      	strb	r3, [r5, #21]
    while ( size-- ) *dest++ = *buffer++;
 8005dba:	b2ff      	uxtb	r7, r7
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d02c      	beq.n	8005e1a <UFCP_Send+0x7a>
 8005dc0:	2102      	movs	r1, #2
 8005dc2:	1c56      	adds	r6, r2, #1
 8005dc4:	1b86      	subs	r6, r0, r6
 8005dc6:	42b1      	cmp	r1, r6
 8005dc8:	4189      	sbcs	r1, r1
 8005dca:	2606      	movs	r6, #6
 8005dcc:	42be      	cmp	r6, r7
 8005dce:	41b6      	sbcs	r6, r6
 8005dd0:	4249      	negs	r1, r1
 8005dd2:	4276      	negs	r6, r6
 8005dd4:	420e      	tst	r6, r1
 8005dd6:	d03a      	beq.n	8005e4e <UFCP_Send+0xae>
 8005dd8:	0011      	movs	r1, r2
 8005dda:	4301      	orrs	r1, r0
 8005ddc:	0789      	lsls	r1, r1, #30
 8005dde:	d136      	bne.n	8005e4e <UFCP_Send+0xae>
 8005de0:	0899      	lsrs	r1, r3, #2
 8005de2:	468c      	mov	ip, r1
 8005de4:	2100      	movs	r1, #0
 8005de6:	5856      	ldr	r6, [r2, r1]
 8005de8:	3401      	adds	r4, #1
 8005dea:	b2e4      	uxtb	r4, r4
 8005dec:	5046      	str	r6, [r0, r1]
 8005dee:	3104      	adds	r1, #4
 8005df0:	45a4      	cmp	ip, r4
 8005df2:	d1f8      	bne.n	8005de6 <UFCP_Send+0x46>
 8005df4:	2103      	movs	r1, #3
 8005df6:	001c      	movs	r4, r3
 8005df8:	438c      	bics	r4, r1
 8005dfa:	1b3f      	subs	r7, r7, r4
 8005dfc:	1912      	adds	r2, r2, r4
 8005dfe:	1900      	adds	r0, r0, r4
 8005e00:	b2ff      	uxtb	r7, r7
 8005e02:	42a3      	cmp	r3, r4
 8005e04:	d009      	beq.n	8005e1a <UFCP_Send+0x7a>
 8005e06:	7813      	ldrb	r3, [r2, #0]
 8005e08:	7003      	strb	r3, [r0, #0]
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	d005      	beq.n	8005e1a <UFCP_Send+0x7a>
 8005e0e:	7853      	ldrb	r3, [r2, #1]
 8005e10:	7043      	strb	r3, [r0, #1]
 8005e12:	2f01      	cmp	r7, #1
 8005e14:	d001      	beq.n	8005e1a <UFCP_Send+0x7a>
 8005e16:	7893      	ldrb	r3, [r2, #2]
 8005e18:	7083      	strb	r3, [r0, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005e1a:	0028      	movs	r0, r5
 8005e1c:	3014      	adds	r0, #20
 8005e1e:	f7fe fa77 	bl	8004310 <FCP_CalcCRC>
 8005e22:	2396      	movs	r3, #150	; 0x96
    pHandle->TxFrameLevel = 0;
 8005e24:	2200      	movs	r2, #0
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 8005e26:	54e8      	strb	r0, [r5, r3]
    pHandle->TxFrameLevel = 0;
 8005e28:	3302      	adds	r3, #2
 8005e2a:	54ea      	strb	r2, [r5, r3]
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8005e2c:	3b97      	subs	r3, #151	; 0x97
 8005e2e:	3297      	adds	r2, #151	; 0x97
 8005e30:	54ab      	strb	r3, [r5, r2]
    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 8005e32:	3289      	adds	r2, #137	; 0x89
 8005e34:	58aa      	ldr	r2, [r5, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e36:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3a:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8005e3e:	2080      	movs	r0, #128	; 0x80
 8005e40:	6813      	ldr	r3, [r2, #0]
 8005e42:	4303      	orrs	r3, r0
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	f381 8810 	msr	PRIMASK, r1
 8005e4a:	387e      	subs	r0, #126	; 0x7e
 8005e4c:	e7af      	b.n	8005dae <UFCP_Send+0xe>
    while ( size-- ) *dest++ = *buffer++;
 8005e4e:	2100      	movs	r1, #0
 8005e50:	5c54      	ldrb	r4, [r2, r1]
 8005e52:	5444      	strb	r4, [r0, r1]
 8005e54:	3101      	adds	r1, #1
 8005e56:	b2cc      	uxtb	r4, r1
 8005e58:	42a3      	cmp	r3, r4
 8005e5a:	d1f9      	bne.n	8005e50 <UFCP_Send+0xb0>
 8005e5c:	e7dd      	b.n	8005e1a <UFCP_Send+0x7a>
 8005e5e:	46c0      	nop			; (mov r8, r8)

08005e60 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005e60:	228e      	movs	r2, #142	; 0x8e
{
 8005e62:	b5f0      	push	{r4, r5, r6, r7, lr}
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005e64:	0052      	lsls	r2, r2, #1
 8005e66:	5c83      	ldrb	r3, [r0, r2]
{
 8005e68:	0004      	movs	r4, r0
 8005e6a:	b083      	sub	sp, #12
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d011      	beq.n	8005e94 <UFCP_RX_IRQ_Handler+0x34>
    switch ( pBaseHandle->RxFrameLevel )
 8005e70:	201e      	movs	r0, #30
 8005e72:	30ff      	adds	r0, #255	; 0xff
 8005e74:	5c23      	ldrb	r3, [r4, r0]
    uint8_t rx_byte = (uint8_t) rx_data;
 8005e76:	b2cd      	uxtb	r5, r1
    switch ( pBaseHandle->RxFrameLevel )
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00e      	beq.n	8005e9a <UFCP_RX_IRQ_Handler+0x3a>
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d03b      	beq.n	8005ef8 <UFCP_RX_IRQ_Handler+0x98>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8005e80:	269a      	movs	r6, #154	; 0x9a
 8005e82:	5da1      	ldrb	r1, [r4, r6]
 8005e84:	3101      	adds	r1, #1
 8005e86:	428b      	cmp	r3, r1
 8005e88:	dc0f      	bgt.n	8005eaa <UFCP_RX_IRQ_Handler+0x4a>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005e8a:	18e2      	adds	r2, r4, r3
 8005e8c:	3299      	adds	r2, #153	; 0x99
          pBaseHandle->RxFrameLevel++;
 8005e8e:	3301      	adds	r3, #1
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8005e90:	7015      	strb	r5, [r2, #0]
          pBaseHandle->RxFrameLevel++;
 8005e92:	5423      	strb	r3, [r4, r0]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005e94:	4823      	ldr	r0, [pc, #140]	; (8005f24 <UFCP_RX_IRQ_Handler+0xc4>)
}
 8005e96:	b003      	add	sp, #12
 8005e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pBaseHandle->RxFrame.Code = rx_byte;
 8005e9a:	2399      	movs	r3, #153	; 0x99
 8005e9c:	54e5      	strb	r5, [r4, r3]
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 8005e9e:	8a23      	ldrh	r3, [r4, #16]
 8005ea0:	8263      	strh	r3, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	5423      	strb	r3, [r4, r0]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 8005ea6:	4820      	ldr	r0, [pc, #128]	; (8005f28 <UFCP_RX_IRQ_Handler+0xc8>)
        break;
 8005ea8:	e7f5      	b.n	8005e96 <UFCP_RX_IRQ_Handler+0x36>
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005eaa:	271c      	movs	r7, #28
          pBaseHandle->RxTimeoutCountdown = 0;
 8005eac:	2300      	movs	r3, #0
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8005eae:	37ff      	adds	r7, #255	; 0xff
 8005eb0:	55e5      	strb	r5, [r4, r7]
          pBaseHandle->RxTimeoutCountdown = 0;
 8005eb2:	8263      	strh	r3, [r4, #18]
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 8005eb4:	3321      	adds	r3, #33	; 0x21
 8005eb6:	33ff      	adds	r3, #255	; 0xff
 8005eb8:	58e1      	ldr	r1, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ebe:	3b20      	subs	r3, #32
 8005ec0:	3bff      	subs	r3, #255	; 0xff
 8005ec2:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8005ec6:	2520      	movs	r5, #32
 8005ec8:	680b      	ldr	r3, [r1, #0]
 8005eca:	43ab      	bics	r3, r5
 8005ecc:	600b      	str	r3, [r1, #0]
 8005ece:	f380 8810 	msr	PRIMASK, r0
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005ed2:	2300      	movs	r3, #0
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005ed4:	0020      	movs	r0, r4
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005ed6:	54a3      	strb	r3, [r4, r2]
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 8005ed8:	3099      	adds	r0, #153	; 0x99
 8005eda:	f7fe fa19 	bl	8004310 <FCP_CalcCRC>
 8005ede:	5de3      	ldrb	r3, [r4, r7]
 8005ee0:	4283      	cmp	r3, r0
 8005ee2:	d114      	bne.n	8005f0e <UFCP_RX_IRQ_Handler+0xae>
                                                      pBaseHandle->RxFrame.Buffer,
 8005ee4:	0022      	movs	r2, r4
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005ee6:	2199      	movs	r1, #153	; 0x99
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	5da3      	ldrb	r3, [r4, r6]
 8005eec:	5c61      	ldrb	r1, [r4, r1]
                                                      pBaseHandle->RxFrame.Buffer,
 8005eee:	329b      	adds	r2, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 8005ef0:	68a4      	ldr	r4, [r4, #8]
 8005ef2:	47a0      	blx	r4
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005ef4:	480d      	ldr	r0, [pc, #52]	; (8005f2c <UFCP_RX_IRQ_Handler+0xcc>)
 8005ef6:	e7ce      	b.n	8005e96 <UFCP_RX_IRQ_Handler+0x36>
        pBaseHandle->RxFrame.Size = rx_byte;
 8005ef8:	239a      	movs	r3, #154	; 0x9a
 8005efa:	54e5      	strb	r5, [r4, r3]
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 8005efc:	0609      	lsls	r1, r1, #24
 8005efe:	d402      	bmi.n	8005f06 <UFCP_RX_IRQ_Handler+0xa6>
        pBaseHandle->RxFrameLevel++;
 8005f00:	3b98      	subs	r3, #152	; 0x98
 8005f02:	5423      	strb	r3, [r4, r0]
 8005f04:	e7c6      	b.n	8005e94 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 8005f06:	2300      	movs	r3, #0
 8005f08:	5423      	strb	r3, [r4, r0]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 8005f0a:	4806      	ldr	r0, [pc, #24]	; (8005f24 <UFCP_RX_IRQ_Handler+0xc4>)
 8005f0c:	e7c3      	b.n	8005e96 <UFCP_RX_IRQ_Handler+0x36>
            error_code = FCP_MSG_RX_BAD_CRC;
 8005f0e:	466b      	mov	r3, sp
 8005f10:	1dda      	adds	r2, r3, #7
 8005f12:	230a      	movs	r3, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005f14:	21ff      	movs	r1, #255	; 0xff
            error_code = FCP_MSG_RX_BAD_CRC;
 8005f16:	7013      	strb	r3, [r2, #0]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005f18:	0020      	movs	r0, r4
 8005f1a:	3b09      	subs	r3, #9
 8005f1c:	f7ff ff40 	bl	8005da0 <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 8005f20:	4802      	ldr	r0, [pc, #8]	; (8005f2c <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 8005f22:	e7b8      	b.n	8005e96 <UFCP_RX_IRQ_Handler+0x36>
 8005f24:	08006df8 	.word	0x08006df8
 8005f28:	08006dfa 	.word	0x08006dfa
 8005f2c:	08006dfc 	.word	0x08006dfc

08005f30 <UFCP_OVR_IRQ_Handler>:
{
 8005f30:	b500      	push	{lr}
 8005f32:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8005f34:	466b      	mov	r3, sp
 8005f36:	1dda      	adds	r2, r3, #7
 8005f38:	2308      	movs	r3, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005f3a:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8005f3c:	7013      	strb	r3, [r2, #0]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8005f3e:	3b07      	subs	r3, #7
 8005f40:	f7ff ff2e 	bl	8005da0 <UFCP_Send>
}
 8005f44:	b003      	add	sp, #12
 8005f46:	bd00      	pop	{pc}

08005f48 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8005f48:	238e      	movs	r3, #142	; 0x8e
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	54c2      	strb	r2, [r0, r3]
}
 8005f50:	4770      	bx	lr
 8005f52:	46c0      	nop			; (mov r8, r8)

08005f54 <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 8005f54:	b570      	push	{r4, r5, r6, lr}
  pHandle->bCopyObserver = false;

#ifdef FASTDIV
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
 8005f56:	0005      	movs	r5, r0
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8005f58:	2300      	movs	r3, #0
{
 8005f5a:	0004      	movs	r4, r0
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005f5c:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
 8005f5e:	3538      	adds	r5, #56	; 0x38
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8005f60:	7003      	strb	r3, [r0, #0]
  pHandle->_Super.hElAngle = 0;
 8005f62:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8005f64:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8005f66:	8243      	strh	r3, [r0, #18]
  pHandle->wElAccDppP32 = 0;
 8005f68:	6203      	str	r3, [r0, #32]
  pHandle->wElSpeedDpp32 = 0;
 8005f6a:	6243      	str	r3, [r0, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 8005f6c:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8005f6e:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hElAngleAccu = 0;
 8005f70:	6303      	str	r3, [r0, #48]	; 0x30
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8005f72:	85c2      	strh	r2, [r0, #46]	; 0x2e
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
 8005f74:	2101      	movs	r1, #1
 8005f76:	7842      	ldrb	r2, [r0, #1]
 8005f78:	0028      	movs	r0, r5
 8005f7a:	f7fe f8ef 	bl	800415c <FD_FastDiv>
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
 8005f7e:	0028      	movs	r0, r5
 8005f80:	2101      	movs	r1, #1
 8005f82:	2336      	movs	r3, #54	; 0x36
 8005f84:	5ee2      	ldrsh	r2, [r4, r3]
 8005f86:	f7fe f8e9 	bl	800415c <FD_FastDiv>
#endif
}
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}

08005f8c <VSS_Init>:
{
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	0004      	movs	r4, r0
  FD_Init( &( pHandle->fd ) );
 8005f90:	3038      	adds	r0, #56	; 0x38
 8005f92:	f7fe f8d1 	bl	8004138 <FD_Init>
  VSS_Clear( pHandle );
 8005f96:	0020      	movs	r0, r4
 8005f98:	f7ff ffdc 	bl	8005f54 <VSS_Clear>
}
 8005f9c:	bd10      	pop	{r4, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)

08005fa0 <VSS_CalcElAngle>:
*         instantaneous electrical speed express in dpp.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t VSS_CalcElAngle( VirtualSpeedSensor_Handle_t * pHandle, void * pInputVars_str )
{
 8005fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fa2:	46c6      	mov	lr, r8
  int16_t hAngleDiff;
  int16_t hAngleCorr;
  int32_t wAux;
  int16_t hSignCorr = 1;

  if ( pHandle->bCopyObserver == true )
 8005fa4:	2333      	movs	r3, #51	; 0x33
{
 8005fa6:	b500      	push	{lr}
  if ( pHandle->bCopyObserver == true )
 8005fa8:	5cc3      	ldrb	r3, [r0, r3]
{
 8005faa:	0004      	movs	r4, r0
 8005fac:	000d      	movs	r5, r1
  if ( pHandle->bCopyObserver == true )
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <VSS_CalcElAngle+0x1e>
  {
    hRetAngle = *( int16_t * )pInputVars_str;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	5ec8      	ldrsh	r0, [r1, r3]
    {
      hRetAngle = pHandle->hElAngleAccu;
    }
  }

  pHandle->_Super.hElAngle = hRetAngle;
 8005fb6:	80a0      	strh	r0, [r4, #4]
  return hRetAngle;
}
 8005fb8:	bc80      	pop	{r7}
 8005fba:	46b8      	mov	r8, r7
 8005fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
 8005fbe:	0006      	movs	r6, r0
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005fc0:	230e      	movs	r3, #14
 8005fc2:	5ec1      	ldrsh	r1, [r0, r3]
 8005fc4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
 8005fc6:	3638      	adds	r6, #56	; 0x38
    pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8005fc8:	185b      	adds	r3, r3, r1
 8005fca:	8603      	strh	r3, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle += ( int16_t )( FD_FastDiv( &( pHandle->fd ),
 8005fcc:	7842      	ldrb	r2, [r0, #1]
 8005fce:	0030      	movs	r0, r6
 8005fd0:	f7fe f8c4 	bl	800415c <FD_FastDiv>
 8005fd4:	88e3      	ldrh	r3, [r4, #6]
 8005fd6:	181b      	adds	r3, r3, r0
 8005fd8:	80e3      	strh	r3, [r4, #6]
    if ( pHandle->bTransitionStarted == true )
 8005fda:	232c      	movs	r3, #44	; 0x2c
 8005fdc:	5ce3      	ldrb	r3, [r4, r3]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <VSS_CalcElAngle+0x58>
      if ( pHandle->hTransitionRemainingSteps == 0 )
 8005fe2:	222e      	movs	r2, #46	; 0x2e
 8005fe4:	5ea3      	ldrsh	r3, [r4, r2]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d109      	bne.n	8005ffe <VSS_CalcElAngle+0x5e>
        hRetAngle = *( int16_t * )pInputVars_str;
 8005fea:	2200      	movs	r2, #0
 8005fec:	5ea8      	ldrsh	r0, [r5, r2]
        pHandle->bTransitionEnded = true;
 8005fee:	2101      	movs	r1, #1
 8005ff0:	222d      	movs	r2, #45	; 0x2d
 8005ff2:	54a1      	strb	r1, [r4, r2]
        pHandle->_Super.bSpeedErrorNumber = 0u;
 8005ff4:	7023      	strb	r3, [r4, #0]
 8005ff6:	e7de      	b.n	8005fb6 <VSS_CalcElAngle+0x16>
      hRetAngle = pHandle->hElAngleAccu;
 8005ff8:	2330      	movs	r3, #48	; 0x30
 8005ffa:	5ee0      	ldrsh	r0, [r4, r3]
 8005ffc:	e7db      	b.n	8005fb6 <VSS_CalcElAngle+0x16>
        pHandle->hTransitionRemainingSteps--;
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b219      	sxth	r1, r3
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006002:	220e      	movs	r2, #14
 8006004:	5ea3      	ldrsh	r3, [r4, r2]
        pHandle->hTransitionRemainingSteps--;
 8006006:	85e1      	strh	r1, [r4, #46]	; 0x2e
        if ( pHandle->_Super.hElSpeedDpp >= 0 )
 8006008:	2b00      	cmp	r3, #0
 800600a:	db17      	blt.n	800603c <VSS_CalcElAngle+0x9c>
          hAngleDiff = *( int16_t * )pInputVars_str - pHandle->hElAngleAccu;
 800600c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 800600e:	882f      	ldrh	r7, [r5, #0]
 8006010:	1aff      	subs	r7, r7, r3
 8006012:	2301      	movs	r3, #1
 8006014:	4698      	mov	r8, r3
 8006016:	b23f      	sxth	r7, r7
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
 8006018:	2336      	movs	r3, #54	; 0x36
 800601a:	5ee2      	ldrsh	r2, [r4, r3]
 800601c:	0030      	movs	r0, r6
        wAux = ( int32_t )hAngleDiff * pHandle->hTransitionRemainingSteps;
 800601e:	4379      	muls	r1, r7
        hAngleCorr = ( int16_t )( FD_FastDiv( &( pHandle->fd ),
 8006020:	f7fe f89c 	bl	800415c <FD_FastDiv>
        hAngleCorr *= hSignCorr;
 8006024:	4643      	mov	r3, r8
 8006026:	4358      	muls	r0, r3
          pHandle->bTransitionLocked = true;
 8006028:	2232      	movs	r2, #50	; 0x32
        hAngleCorr *= hSignCorr;
 800602a:	b283      	uxth	r3, r0
        if ( hAngleDiff >= 0 )
 800602c:	2f00      	cmp	r7, #0
 800602e:	db0c      	blt.n	800604a <VSS_CalcElAngle+0xaa>
          pHandle->bTransitionLocked = true;
 8006030:	2101      	movs	r1, #1
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006032:	8828      	ldrh	r0, [r5, #0]
          pHandle->bTransitionLocked = true;
 8006034:	54a1      	strb	r1, [r4, r2]
          hRetAngle = *( int16_t * )pInputVars_str - hAngleCorr;
 8006036:	1ac0      	subs	r0, r0, r3
 8006038:	b200      	sxth	r0, r0
 800603a:	e7bc      	b.n	8005fb6 <VSS_CalcElAngle+0x16>
          hAngleDiff = pHandle->hElAngleAccu - *( int16_t * )pInputVars_str;
 800603c:	882b      	ldrh	r3, [r5, #0]
 800603e:	8e27      	ldrh	r7, [r4, #48]	; 0x30
 8006040:	1aff      	subs	r7, r7, r3
 8006042:	4b05      	ldr	r3, [pc, #20]	; (8006058 <VSS_CalcElAngle+0xb8>)
 8006044:	b23f      	sxth	r7, r7
 8006046:	4698      	mov	r8, r3
 8006048:	e7e6      	b.n	8006018 <VSS_CalcElAngle+0x78>
          if ( pHandle->bTransitionLocked == false )
 800604a:	5ca2      	ldrb	r2, [r4, r2]
 800604c:	2a00      	cmp	r2, #0
 800604e:	d0d3      	beq.n	8005ff8 <VSS_CalcElAngle+0x58>
            hRetAngle = *( int16_t * )pInputVars_str + hAngleCorr;
 8006050:	882a      	ldrh	r2, [r5, #0]
 8006052:	189b      	adds	r3, r3, r2
 8006054:	b218      	sxth	r0, r3
 8006056:	e7ae      	b.n	8005fb6 <VSS_CalcElAngle+0x16>
 8006058:	0000ffff 	.word	0x0000ffff

0800605c <VSS_CalcAvrgMecSpeedUnit>:
  *         mechanical speed (SPED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool VSS_CalcAvrgMecSpeedUnit( VirtualSpeedSensor_Handle_t * pHandle, int16_t * hMecSpeedUnit )
{
 800605c:	b570      	push	{r4, r5, r6, lr}
  bool SpeedSensorReliability = false;

  if ( pHandle->hRemainingStep > 1u )
 800605e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
{
 8006060:	0004      	movs	r4, r0
 8006062:	000d      	movs	r5, r1
  if ( pHandle->hRemainingStep > 1u )
 8006064:	2b01      	cmp	r3, #1
 8006066:	d920      	bls.n	80060aa <VSS_CalcAvrgMecSpeedUnit+0x4e>
  {
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006068:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800606a:	6a03      	ldr	r3, [r0, #32]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );

    /* Convert dpp into MecUnit */
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800606c:	69e1      	ldr	r1, [r4, #28]
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800606e:	18d2      	adds	r2, r2, r3
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006070:	17d3      	asrs	r3, r2, #31
 8006072:	041b      	lsls	r3, r3, #16
 8006074:	0c1b      	lsrs	r3, r3, #16
    pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8006076:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 8006078:	189b      	adds	r3, r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800607a:	8b42      	ldrh	r2, [r0, #26]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( pHandle->wElSpeedDpp32 / 65536 );
 800607c:	141b      	asrs	r3, r3, #16
 800607e:	81c3      	strh	r3, [r0, #14]
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006080:	4353      	muls	r3, r2
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006082:	0098      	lsls	r0, r3, #2
 8006084:	18c0      	adds	r0, r0, r3
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 8006086:	7863      	ldrb	r3, [r4, #1]
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 8006088:	0040      	lsls	r0, r0, #1
                                  ( ( int32_t )pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 800608a:	4359      	muls	r1, r3
                                    ( int32_t )pHandle->_Super.hMeasurementFrequency * SPEED_UNIT ) /
 800608c:	f7fa f8c6 	bl	800021c <__divsi3>
    *hMecSpeedUnit = ( int16_t )( ( ( int32_t )pHandle->_Super.hElSpeedDpp *
 8006090:	b200      	sxth	r0, r0
 8006092:	8028      	strh	r0, [r5, #0]

    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;

    pHandle->hRemainingStep--;
 8006094:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8006096:	81a0      	strh	r0, [r4, #12]
    pHandle->hRemainingStep--;
 8006098:	3b01      	subs	r3, #1
 800609a:	8523      	strh	r3, [r4, #40]	; 0x28
  else
  {
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
  }
  /* If the transition is not done yet, we already know that speed is not reliable */
  if ( pHandle->bTransitionEnded == false )
 800609c:	232d      	movs	r3, #45	; 0x2d
 800609e:	5ce0      	ldrb	r0, [r4, r3]
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d10b      	bne.n	80060bc <VSS_CalcAvrgMecSpeedUnit+0x60>
  {
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80060a4:	78e3      	ldrb	r3, [r4, #3]
 80060a6:	7023      	strb	r3, [r4, #0]
  {
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
  }

  return ( SpeedSensorReliability );
}
 80060a8:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->hRemainingStep == 1u )
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d00b      	beq.n	80060c6 <VSS_CalcAvrgMecSpeedUnit+0x6a>
    *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80060ae:	220c      	movs	r2, #12
 80060b0:	5e83      	ldrsh	r3, [r0, r2]
 80060b2:	800b      	strh	r3, [r1, #0]
  if ( pHandle->bTransitionEnded == false )
 80060b4:	232d      	movs	r3, #45	; 0x2d
 80060b6:	5ce0      	ldrb	r0, [r4, r3]
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d0f3      	beq.n	80060a4 <VSS_CalcAvrgMecSpeedUnit+0x48>
    SpeedSensorReliability = SPD_IsMecSpeedReliable ( &pHandle->_Super, hMecSpeedUnit );
 80060bc:	0029      	movs	r1, r5
 80060be:	0020      	movs	r0, r4
 80060c0:	f7ff f950 	bl	8005364 <SPD_IsMecSpeedReliable>
 80060c4:	e7f0      	b.n	80060a8 <VSS_CalcAvrgMecSpeedUnit+0x4c>
    *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80060c6:	222a      	movs	r2, #42	; 0x2a
 80060c8:	5e83      	ldrsh	r3, [r0, r2]
 80060ca:	800b      	strh	r3, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80060cc:	8183      	strh	r3, [r0, #12]
    pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( *hMecSpeedUnit ) *
 80060ce:	69c0      	ldr	r0, [r0, #28]
 80060d0:	4358      	muls	r0, r3
                                  ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 80060d2:	8b63      	ldrh	r3, [r4, #26]
 80060d4:	0099      	lsls	r1, r3, #2
 80060d6:	18c9      	adds	r1, r1, r3
 80060d8:	0049      	lsls	r1, r1, #1
                                  ( int32_t ) ( pHandle->_Super.DPPConvFactor) ) /
 80060da:	f7fa f89f 	bl	800021c <__divsi3>
    pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 80060de:	7863      	ldrb	r3, [r4, #1]
 80060e0:	4343      	muls	r3, r0
 80060e2:	81e3      	strh	r3, [r4, #14]
    pHandle->hRemainingStep = 0u;
 80060e4:	2300      	movs	r3, #0
 80060e6:	8523      	strh	r3, [r4, #40]	; 0x28
 80060e8:	e7d8      	b.n	800609c <VSS_CalcAvrgMecSpeedUnit+0x40>
 80060ea:	46c0      	nop			; (mov r8, r8)

080060ec <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	000d      	movs	r5, r1
 80060f0:	0004      	movs	r4, r0

  pHandle->hElAngleAccu = hMecAngle;
 80060f2:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80060f4:	7841      	ldrb	r1, [r0, #1]
 80060f6:	0028      	movs	r0, r5
 80060f8:	f7fa f890 	bl	800021c <__divsi3>
  pHandle->_Super.hElAngle = hMecAngle;
 80060fc:	80a5      	strh	r5, [r4, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 80060fe:	80e0      	strh	r0, [r4, #6]
}
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	46c0      	nop			; (mov r8, r8)

08006104 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	46ce      	mov	lr, r9
 8006108:	4647      	mov	r7, r8
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800610a:	232c      	movs	r3, #44	; 0x2c
{
 800610c:	b580      	push	{r7, lr}
  if ( pHandle->bTransitionStarted == false )
 800610e:	5cc3      	ldrb	r3, [r0, r3]
{
 8006110:	0004      	movs	r4, r0
 8006112:	000e      	movs	r6, r1
 8006114:	0015      	movs	r5, r2
  if ( pHandle->bTransitionStarted == false )
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <VSS_SetMecAcceleration+0x36>
  {
    if ( hDurationms == 0u )
 800611a:	2a00      	cmp	r2, #0
 800611c:	d111      	bne.n	8006142 <VSS_SetMecAcceleration+0x3e>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800611e:	8181      	strh	r1, [r0, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006120:	8b63      	ldrh	r3, [r4, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8006122:	69c0      	ldr	r0, [r0, #28]
 8006124:	4348      	muls	r0, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006126:	0099      	lsls	r1, r3, #2
 8006128:	18c9      	adds	r1, r1, r3
 800612a:	0049      	lsls	r1, r1, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800612c:	f7fa f876 	bl	800021c <__divsi3>

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006130:	7863      	ldrb	r3, [r4, #1]

      pHandle->hRemainingStep = 0u;
 8006132:	8525      	strh	r5, [r4, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006134:	4343      	muls	r3, r0

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8006136:	8566      	strh	r6, [r4, #42]	; 0x2a
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8006138:	81e3      	strh	r3, [r4, #14]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800613a:	bcc0      	pop	{r6, r7}
 800613c:	46b9      	mov	r9, r7
 800613e:	46b0      	mov	r8, r6
 8006140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8006142:	21fa      	movs	r1, #250	; 0xfa
 8006144:	8e80      	ldrh	r0, [r0, #52]	; 0x34
 8006146:	0089      	lsls	r1, r1, #2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8006148:	4350      	muls	r0, r2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800614a:	f7f9 ffdd 	bl	8000108 <__udivsi3>
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800614e:	220e      	movs	r2, #14
 8006150:	5ea3      	ldrsh	r3, [r4, r2]
      hNbrStep++;
 8006152:	3001      	adds	r0, #1
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006154:	4698      	mov	r8, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8006156:	7863      	ldrb	r3, [r4, #1]
      hNbrStep++;
 8006158:	b287      	uxth	r7, r0
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800615a:	4699      	mov	r9, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800615c:	8b63      	ldrh	r3, [r4, #26]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800615e:	69e0      	ldr	r0, [r4, #28]
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8006160:	0099      	lsls	r1, r3, #2
 8006162:	18c9      	adds	r1, r1, r3
 8006164:	0049      	lsls	r1, r1, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8006166:	4370      	muls	r0, r6
      pHandle->hRemainingStep = hNbrStep;
 8006168:	8527      	strh	r7, [r4, #40]	; 0x28
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800616a:	f7fa f857 	bl	800021c <__divsi3>
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800616e:	4649      	mov	r1, r9
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006170:	b205      	sxth	r5, r0
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8006172:	4640      	mov	r0, r8
 8006174:	f7fa f852 	bl	800021c <__divsi3>
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8006178:	1a28      	subs	r0, r5, r0
 800617a:	0039      	movs	r1, r7
 800617c:	0400      	lsls	r0, r0, #16
 800617e:	f7fa f84d 	bl	800021c <__divsi3>
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8006182:	464b      	mov	r3, r9
 8006184:	4358      	muls	r0, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8006186:	4643      	mov	r3, r8
 8006188:	041b      	lsls	r3, r3, #16
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800618a:	6220      	str	r0, [r4, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800618c:	8566      	strh	r6, [r4, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800618e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8006190:	e7d3      	b.n	800613a <VSS_SetMecAcceleration+0x36>
 8006192:	46c0      	nop			; (mov r8, r8)

08006194 <VSS_SetStartTransition>:
            (parameter hTransitionSteps = 0)
  */
__weak bool VSS_SetStartTransition( VirtualSpeedSensor_Handle_t * pHandle, bool bCommand )
{
  bool bAux = true;
  if ( bCommand == true )
 8006194:	2900      	cmp	r1, #0
 8006196:	d006      	beq.n	80061a6 <VSS_SetStartTransition+0x12>
  {
    pHandle->bTransitionStarted = true;
 8006198:	232c      	movs	r3, #44	; 0x2c
 800619a:	2201      	movs	r2, #1
 800619c:	54c2      	strb	r2, [r0, r3]

    if ( pHandle->hTransitionSteps == 0 )
 800619e:	2136      	movs	r1, #54	; 0x36
 80061a0:	5e43      	ldrsh	r3, [r0, r1]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <VSS_SetStartTransition+0x16>
  bool bAux = true;
 80061a6:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0u;
      bAux = false;
    }
  }
  return bAux;
}
 80061a8:	4770      	bx	lr
      pHandle->bTransitionEnded = true;
 80061aa:	212d      	movs	r1, #45	; 0x2d
 80061ac:	5442      	strb	r2, [r0, r1]
      pHandle->_Super.bSpeedErrorNumber = 0u;
 80061ae:	7003      	strb	r3, [r0, #0]
      bAux = false;
 80061b0:	2000      	movs	r0, #0
 80061b2:	e7f9      	b.n	80061a8 <VSS_SetStartTransition+0x14>

080061b4 <VSS_TransitionEnded>:
  return ( retVal );
}

__weak bool VSS_TransitionEnded( VirtualSpeedSensor_Handle_t * pHandle )
{
    return pHandle->bTransitionEnded;
 80061b4:	232d      	movs	r3, #45	; 0x2d
 80061b6:	5cc0      	ldrb	r0, [r0, r3]
}
 80061b8:	4770      	bx	lr
 80061ba:	46c0      	nop			; (mov r8, r8)

080061bc <memset>:
 80061bc:	0003      	movs	r3, r0
 80061be:	1882      	adds	r2, r0, r2
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d100      	bne.n	80061c6 <memset+0xa>
 80061c4:	4770      	bx	lr
 80061c6:	7019      	strb	r1, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	e7f9      	b.n	80061c0 <memset+0x4>

080061cc <__libc_init_array>:
 80061cc:	b570      	push	{r4, r5, r6, lr}
 80061ce:	2600      	movs	r6, #0
 80061d0:	4c0c      	ldr	r4, [pc, #48]	; (8006204 <__libc_init_array+0x38>)
 80061d2:	4d0d      	ldr	r5, [pc, #52]	; (8006208 <__libc_init_array+0x3c>)
 80061d4:	1b64      	subs	r4, r4, r5
 80061d6:	10a4      	asrs	r4, r4, #2
 80061d8:	42a6      	cmp	r6, r4
 80061da:	d109      	bne.n	80061f0 <__libc_init_array+0x24>
 80061dc:	2600      	movs	r6, #0
 80061de:	f000 f823 	bl	8006228 <_init>
 80061e2:	4c0a      	ldr	r4, [pc, #40]	; (800620c <__libc_init_array+0x40>)
 80061e4:	4d0a      	ldr	r5, [pc, #40]	; (8006210 <__libc_init_array+0x44>)
 80061e6:	1b64      	subs	r4, r4, r5
 80061e8:	10a4      	asrs	r4, r4, #2
 80061ea:	42a6      	cmp	r6, r4
 80061ec:	d105      	bne.n	80061fa <__libc_init_array+0x2e>
 80061ee:	bd70      	pop	{r4, r5, r6, pc}
 80061f0:	00b3      	lsls	r3, r6, #2
 80061f2:	58eb      	ldr	r3, [r5, r3]
 80061f4:	4798      	blx	r3
 80061f6:	3601      	adds	r6, #1
 80061f8:	e7ee      	b.n	80061d8 <__libc_init_array+0xc>
 80061fa:	00b3      	lsls	r3, r6, #2
 80061fc:	58eb      	ldr	r3, [r5, r3]
 80061fe:	4798      	blx	r3
 8006200:	3601      	adds	r6, #1
 8006202:	e7f2      	b.n	80061ea <__libc_init_array+0x1e>
 8006204:	08006e00 	.word	0x08006e00
 8006208:	08006e00 	.word	0x08006e00
 800620c:	08006e04 	.word	0x08006e04
 8006210:	08006e00 	.word	0x08006e00

08006214 <memcpy>:
 8006214:	2300      	movs	r3, #0
 8006216:	b510      	push	{r4, lr}
 8006218:	429a      	cmp	r2, r3
 800621a:	d100      	bne.n	800621e <memcpy+0xa>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	5ccc      	ldrb	r4, [r1, r3]
 8006220:	54c4      	strb	r4, [r0, r3]
 8006222:	3301      	adds	r3, #1
 8006224:	e7f8      	b.n	8006218 <memcpy+0x4>
	...

08006228 <_init>:
 8006228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622a:	46c0      	nop			; (mov r8, r8)
 800622c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622e:	bc08      	pop	{r3}
 8006230:	469e      	mov	lr, r3
 8006232:	4770      	bx	lr

08006234 <_fini>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800623a:	bc08      	pop	{r3}
 800623c:	469e      	mov	lr, r3
 800623e:	4770      	bx	lr
